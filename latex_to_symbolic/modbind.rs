/* automatically generated by rust-bindgen */

extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13version_majorE"]
    pub static GiNaC_version_major: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13version_minorE"]
    pub static GiNaC_version_minor: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13version_microE"]
    pub static GiNaC_version_micro: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_expand_options {
    pub _address: u8,
}
pub const GiNaC_expand_options_expand_indexed:
    GiNaC_expand_options__bindgen_ty_1 = 1;
pub const GiNaC_expand_options_expand_function_args:
    GiNaC_expand_options__bindgen_ty_1 = 2;
pub const GiNaC_expand_options_expand_rename_idx:
    GiNaC_expand_options__bindgen_ty_1 = 4;
pub const GiNaC_expand_options_expand_transcendental:
    GiNaC_expand_options__bindgen_ty_1 = 8;
pub type GiNaC_expand_options__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_expand_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_expand_options>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_expand_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_expand_options>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_expand_options))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_has_options {
    pub _address: u8,
}
pub const GiNaC_has_options_algebraic: GiNaC_has_options__bindgen_ty_1 = 1;
pub type GiNaC_has_options__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_has_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_has_options>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_has_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_has_options>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_has_options))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_subs_options {
    pub _address: u8,
}
pub const GiNaC_subs_options_no_pattern: GiNaC_subs_options__bindgen_ty_1 = 1;
pub const GiNaC_subs_options_subs_no_pattern: GiNaC_subs_options__bindgen_ty_1 =
    1;
pub const GiNaC_subs_options_algebraic: GiNaC_subs_options__bindgen_ty_1 = 2;
pub const GiNaC_subs_options_subs_algebraic: GiNaC_subs_options__bindgen_ty_1 =
    2;
pub const GiNaC_subs_options_pattern_is_product:
    GiNaC_subs_options__bindgen_ty_1 = 4;
pub const GiNaC_subs_options_pattern_is_not_product:
    GiNaC_subs_options__bindgen_ty_1 = 8;
pub const GiNaC_subs_options_no_index_renaming:
    GiNaC_subs_options__bindgen_ty_1 = 16;
pub const GiNaC_subs_options_really_subs_idx: GiNaC_subs_options__bindgen_ty_1 =
    32;
pub type GiNaC_subs_options__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_subs_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_subs_options>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_subs_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_subs_options>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_subs_options))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_domain {
    pub _address: u8,
}
pub const GiNaC_domain_complex: GiNaC_domain__bindgen_ty_1 = 0;
pub const GiNaC_domain_real: GiNaC_domain__bindgen_ty_1 = 1;
pub const GiNaC_domain_positive: GiNaC_domain__bindgen_ty_1 = 2;
pub type GiNaC_domain__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_domain() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_domain>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_domain))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_domain>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_domain))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_series_options {
    pub _address: u8,
}
pub const GiNaC_series_options_suppress_branchcut:
    GiNaC_series_options__bindgen_ty_1 = 1;
pub type GiNaC_series_options__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_series_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_series_options>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_series_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_series_options>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_series_options))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_determinant_algo {
    pub _address: u8,
}
pub const GiNaC_determinant_algo_automatic:
    GiNaC_determinant_algo__bindgen_ty_1 = 0;
pub const GiNaC_determinant_algo_gauss: GiNaC_determinant_algo__bindgen_ty_1 =
    1;
pub const GiNaC_determinant_algo_divfree: GiNaC_determinant_algo__bindgen_ty_1 =
    2;
pub const GiNaC_determinant_algo_laplace: GiNaC_determinant_algo__bindgen_ty_1 =
    3;
pub const GiNaC_determinant_algo_bareiss: GiNaC_determinant_algo__bindgen_ty_1 =
    4;
pub type GiNaC_determinant_algo__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_determinant_algo() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_determinant_algo>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_determinant_algo))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_determinant_algo>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_determinant_algo))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_solve_algo {
    pub _address: u8,
}
pub const GiNaC_solve_algo_automatic: GiNaC_solve_algo__bindgen_ty_1 = 0;
pub const GiNaC_solve_algo_gauss: GiNaC_solve_algo__bindgen_ty_1 = 1;
pub const GiNaC_solve_algo_divfree: GiNaC_solve_algo__bindgen_ty_1 = 2;
pub const GiNaC_solve_algo_bareiss: GiNaC_solve_algo__bindgen_ty_1 = 3;
pub const GiNaC_solve_algo_markowitz: GiNaC_solve_algo__bindgen_ty_1 = 4;
pub type GiNaC_solve_algo__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_solve_algo() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_solve_algo>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_solve_algo))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_solve_algo>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_solve_algo))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_status_flags {
    pub _address: u8,
}
pub const GiNaC_status_flags_dynallocated: GiNaC_status_flags__bindgen_ty_1 = 1;
pub const GiNaC_status_flags_evaluated: GiNaC_status_flags__bindgen_ty_1 = 2;
pub const GiNaC_status_flags_expanded: GiNaC_status_flags__bindgen_ty_1 = 4;
pub const GiNaC_status_flags_hash_calculated: GiNaC_status_flags__bindgen_ty_1 =
    8;
pub const GiNaC_status_flags_not_shareable: GiNaC_status_flags__bindgen_ty_1 =
    16;
pub const GiNaC_status_flags_has_indices: GiNaC_status_flags__bindgen_ty_1 = 32;
pub const GiNaC_status_flags_has_no_indices: GiNaC_status_flags__bindgen_ty_1 =
    64;
pub const GiNaC_status_flags_is_positive: GiNaC_status_flags__bindgen_ty_1 =
    128;
pub const GiNaC_status_flags_is_negative: GiNaC_status_flags__bindgen_ty_1 =
    256;
pub const GiNaC_status_flags_purely_indefinite:
    GiNaC_status_flags__bindgen_ty_1 = 512;
pub type GiNaC_status_flags__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_status_flags() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_status_flags>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_status_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_status_flags>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_status_flags))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_info_flags {
    pub _address: u8,
}
pub const GiNaC_info_flags_numeric: GiNaC_info_flags__bindgen_ty_1 = 0;
pub const GiNaC_info_flags_real: GiNaC_info_flags__bindgen_ty_1 = 1;
pub const GiNaC_info_flags_rational: GiNaC_info_flags__bindgen_ty_1 = 2;
pub const GiNaC_info_flags_integer: GiNaC_info_flags__bindgen_ty_1 = 3;
pub const GiNaC_info_flags_crational: GiNaC_info_flags__bindgen_ty_1 = 4;
pub const GiNaC_info_flags_cinteger: GiNaC_info_flags__bindgen_ty_1 = 5;
pub const GiNaC_info_flags_positive: GiNaC_info_flags__bindgen_ty_1 = 6;
pub const GiNaC_info_flags_negative: GiNaC_info_flags__bindgen_ty_1 = 7;
pub const GiNaC_info_flags_nonnegative: GiNaC_info_flags__bindgen_ty_1 = 8;
pub const GiNaC_info_flags_posint: GiNaC_info_flags__bindgen_ty_1 = 9;
pub const GiNaC_info_flags_negint: GiNaC_info_flags__bindgen_ty_1 = 10;
pub const GiNaC_info_flags_nonnegint: GiNaC_info_flags__bindgen_ty_1 = 11;
pub const GiNaC_info_flags_even: GiNaC_info_flags__bindgen_ty_1 = 12;
pub const GiNaC_info_flags_odd: GiNaC_info_flags__bindgen_ty_1 = 13;
pub const GiNaC_info_flags_prime: GiNaC_info_flags__bindgen_ty_1 = 14;
pub const GiNaC_info_flags_relation: GiNaC_info_flags__bindgen_ty_1 = 15;
pub const GiNaC_info_flags_relation_equal: GiNaC_info_flags__bindgen_ty_1 = 16;
pub const GiNaC_info_flags_relation_not_equal: GiNaC_info_flags__bindgen_ty_1 =
    17;
pub const GiNaC_info_flags_relation_less: GiNaC_info_flags__bindgen_ty_1 = 18;
pub const GiNaC_info_flags_relation_less_or_equal:
    GiNaC_info_flags__bindgen_ty_1 = 19;
pub const GiNaC_info_flags_relation_greater: GiNaC_info_flags__bindgen_ty_1 =
    20;
pub const GiNaC_info_flags_relation_greater_or_equal:
    GiNaC_info_flags__bindgen_ty_1 = 21;
pub const GiNaC_info_flags_symbol: GiNaC_info_flags__bindgen_ty_1 = 22;
pub const GiNaC_info_flags_list: GiNaC_info_flags__bindgen_ty_1 = 23;
pub const GiNaC_info_flags_exprseq: GiNaC_info_flags__bindgen_ty_1 = 24;
pub const GiNaC_info_flags_polynomial: GiNaC_info_flags__bindgen_ty_1 = 25;
pub const GiNaC_info_flags_integer_polynomial: GiNaC_info_flags__bindgen_ty_1 =
    26;
pub const GiNaC_info_flags_cinteger_polynomial: GiNaC_info_flags__bindgen_ty_1 =
    27;
pub const GiNaC_info_flags_rational_polynomial: GiNaC_info_flags__bindgen_ty_1 =
    28;
pub const GiNaC_info_flags_crational_polynomial:
    GiNaC_info_flags__bindgen_ty_1 = 29;
pub const GiNaC_info_flags_rational_function: GiNaC_info_flags__bindgen_ty_1 =
    30;
pub const GiNaC_info_flags_indexed: GiNaC_info_flags__bindgen_ty_1 = 31;
pub const GiNaC_info_flags_has_indices: GiNaC_info_flags__bindgen_ty_1 = 32;
pub const GiNaC_info_flags_idx: GiNaC_info_flags__bindgen_ty_1 = 33;
pub const GiNaC_info_flags_expanded: GiNaC_info_flags__bindgen_ty_1 = 34;
pub const GiNaC_info_flags_indefinite: GiNaC_info_flags__bindgen_ty_1 = 35;
pub type GiNaC_info_flags__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_info_flags() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_info_flags>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_info_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_info_flags>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_info_flags))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_return_types {
    pub _address: u8,
}
pub const GiNaC_return_types_commutative: GiNaC_return_types__bindgen_ty_1 = 0;
pub const GiNaC_return_types_noncommutative: GiNaC_return_types__bindgen_ty_1 =
    1;
pub const GiNaC_return_types_noncommutative_composite:
    GiNaC_return_types__bindgen_ty_1 = 2;
pub type GiNaC_return_types__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_return_types() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_return_types>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_return_types))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_return_types>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_return_types))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_remember_strategies {
    pub _address: u8,
}
pub const GiNaC_remember_strategies_delete_never:
    GiNaC_remember_strategies__bindgen_ty_1 = 0;
pub const GiNaC_remember_strategies_delete_lru:
    GiNaC_remember_strategies__bindgen_ty_1 = 1;
pub const GiNaC_remember_strategies_delete_lfu:
    GiNaC_remember_strategies__bindgen_ty_1 = 2;
pub const GiNaC_remember_strategies_delete_cyclic:
    GiNaC_remember_strategies__bindgen_ty_1 = 3;
pub type GiNaC_remember_strategies__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_remember_strategies() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_remember_strategies>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_remember_strategies))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_remember_strategies>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_remember_strategies))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_factor_options {
    pub _address: u8,
}
pub const GiNaC_factor_options_polynomial: GiNaC_factor_options__bindgen_ty_1 =
    0;
pub const GiNaC_factor_options_all: GiNaC_factor_options__bindgen_ty_1 = 1;
pub type GiNaC_factor_options__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_factor_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_factor_options>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_factor_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_factor_options>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_factor_options))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_refcounted {
    pub refcount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GiNaC_refcounted() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_refcounted>(),
        4usize,
        concat!("Size of: ", stringify!(GiNaC_refcounted))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_refcounted>(),
        4usize,
        concat!("Alignment of ", stringify!(GiNaC_refcounted))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_refcounted>())).refcount as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_refcounted),
            "::",
            stringify!(refcount)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_ptr<T> {
    pub p: *mut T,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_class_info<OPT> {
    pub options: OPT,
    pub next: *mut GiNaC_class_info<OPT>,
    pub parent: *mut GiNaC_class_info<OPT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<OPT>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_class_info_tree_node<OPT> {
    pub children: u8,
    pub info: *mut GiNaC_class_info<OPT>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<OPT>>,
}
extern "C" {
}
extern "C" {
    #[link_name = "\u{1}parents_identified"]
    pub static mut GiNaC_parents_identified: bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_print_context_options {
    pub name: *const ::std::os::raw::c_char,
    pub parent_name: *const ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GiNaC_print_context_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_context_options>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_context_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_context_options>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_context_options))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_print_context_options>())).name
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_print_context_options),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_print_context_options>())).parent_name
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_print_context_options),
            "::",
            stringify!(parent_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_print_context_options>())).id
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_print_context_options),
            "::",
            stringify!(id)
        )
    );
}
pub type GiNaC_print_context_class_info =
    GiNaC_class_info<GiNaC_print_context_options>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_print_options {
    pub _address: u8,
}
pub const GiNaC_print_options_print_index_dimensions:
    GiNaC_print_options__bindgen_ty_1 = 1;
pub type GiNaC_print_options__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_print_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_options>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_print_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_options>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_print_options))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21next_print_context_idE"]
    pub static mut GiNaC_next_print_context_id: ::std::os::raw::c_uint;
}
#[repr(C)]
pub struct GiNaC_print_context__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_context {
    pub vtable_: *const GiNaC_print_context__bindgen_vtable,
    pub s: *mut std_ostream,
    pub options: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GiNaC_print_context() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_context>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_context))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_context>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_print_context>())).s as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_print_context),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_print_context>())).options as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_print_context),
            "::",
            stringify!(options)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13print_context21get_class_info_staticEv"]
    pub fn GiNaC_print_context_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13print_contextC1Ev"]
    pub fn GiNaC_print_context_print_context(this: *mut GiNaC_print_context);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13print_contextC1ERSoj"]
    pub fn GiNaC_print_context_print_context1(
        this: *mut GiNaC_print_context,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_context {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_context_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_context_print_context(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_context_print_context1(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
            options,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_dflt {
    pub _base: GiNaC_print_context,
}
pub type GiNaC_print_dflt_inherited = GiNaC_print_context;
#[test]
fn bindgen_test_layout_GiNaC_print_dflt() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_dflt>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_dflt))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_dflt>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_dflt))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_dflt21get_class_info_staticEv"]
    pub fn GiNaC_print_dflt_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_dfltC1Ev"]
    pub fn GiNaC_print_dflt_print_dflt(this: *mut GiNaC_print_dflt);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_dfltC1ERSoj"]
    pub fn GiNaC_print_dflt_print_dflt1(
        this: *mut GiNaC_print_dflt,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_dflt {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_dflt_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_dflt_print_dflt(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_dflt_print_dflt1(__bindgen_tmp.as_mut_ptr(), arg1, options);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_latex {
    pub _base: GiNaC_print_context,
}
pub type GiNaC_print_latex_inherited = GiNaC_print_context;
#[test]
fn bindgen_test_layout_GiNaC_print_latex() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_latex>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_latex))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_latex>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_latex))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11print_latex21get_class_info_staticEv"]
    pub fn GiNaC_print_latex_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11print_latexC1Ev"]
    pub fn GiNaC_print_latex_print_latex(this: *mut GiNaC_print_latex);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11print_latexC1ERSoj"]
    pub fn GiNaC_print_latex_print_latex1(
        this: *mut GiNaC_print_latex,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_latex {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_latex_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_latex_print_latex(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_latex_print_latex1(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
            options,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_python {
    pub _base: GiNaC_print_context,
}
pub type GiNaC_print_python_inherited = GiNaC_print_context;
#[test]
fn bindgen_test_layout_GiNaC_print_python() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_python>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_python))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_python>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_python))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12print_python21get_class_info_staticEv"]
    pub fn GiNaC_print_python_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12print_pythonC1Ev"]
    pub fn GiNaC_print_python_print_python(this: *mut GiNaC_print_python);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12print_pythonC1ERSoj"]
    pub fn GiNaC_print_python_print_python1(
        this: *mut GiNaC_print_python,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_python {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_python_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_python_print_python(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_python_print_python1(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
            options,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_python_repr {
    pub _base: GiNaC_print_context,
}
pub type GiNaC_print_python_repr_inherited = GiNaC_print_context;
#[test]
fn bindgen_test_layout_GiNaC_print_python_repr() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_python_repr>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_python_repr))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_python_repr>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_python_repr))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17print_python_repr21get_class_info_staticEv"]
    pub fn GiNaC_print_python_repr_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17print_python_reprC1Ev"]
    pub fn GiNaC_print_python_repr_print_python_repr(
        this: *mut GiNaC_print_python_repr,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17print_python_reprC1ERSoj"]
    pub fn GiNaC_print_python_repr_print_python_repr1(
        this: *mut GiNaC_print_python_repr,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_python_repr {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_python_repr_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_python_repr_print_python_repr(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_python_repr_print_python_repr1(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
            options,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_tree {
    pub _base: GiNaC_print_context,
    pub delta_indent: ::std::os::raw::c_uint,
}
pub type GiNaC_print_tree_inherited = GiNaC_print_context;
#[test]
fn bindgen_test_layout_GiNaC_print_tree() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_tree>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_tree))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_tree>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_tree))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_print_tree>())).delta_indent
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_print_tree),
            "::",
            stringify!(delta_indent)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_tree21get_class_info_staticEv"]
    pub fn GiNaC_print_tree_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_treeC1Ev"]
    pub fn GiNaC_print_tree_print_tree(this: *mut GiNaC_print_tree);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_treeC1Ej"]
    pub fn GiNaC_print_tree_print_tree1(
        this: *mut GiNaC_print_tree,
        d: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_treeC1ERSojj"]
    pub fn GiNaC_print_tree_print_tree2(
        this: *mut GiNaC_print_tree,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
        d: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_tree {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_tree_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_tree_print_tree(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(d: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_tree_print_tree1(__bindgen_tmp.as_mut_ptr(), d);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
        d: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_tree_print_tree2(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
            options,
            d,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_csrc {
    pub _base: GiNaC_print_context,
}
pub type GiNaC_print_csrc_inherited = GiNaC_print_context;
#[test]
fn bindgen_test_layout_GiNaC_print_csrc() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_csrc>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_csrc))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_csrc>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_csrc))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_csrc21get_class_info_staticEv"]
    pub fn GiNaC_print_csrc_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_csrcC1Ev"]
    pub fn GiNaC_print_csrc_print_csrc(this: *mut GiNaC_print_csrc);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10print_csrcC1ERSoj"]
    pub fn GiNaC_print_csrc_print_csrc1(
        this: *mut GiNaC_print_csrc,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_csrc {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_csrc_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_csrc_print_csrc(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_csrc_print_csrc1(__bindgen_tmp.as_mut_ptr(), arg1, options);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_csrc_float {
    pub _base: GiNaC_print_csrc,
}
pub type GiNaC_print_csrc_float_inherited = GiNaC_print_csrc;
#[test]
fn bindgen_test_layout_GiNaC_print_csrc_float() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_csrc_float>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_csrc_float))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_csrc_float>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_csrc_float))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16print_csrc_float21get_class_info_staticEv"]
    pub fn GiNaC_print_csrc_float_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16print_csrc_floatC1Ev"]
    pub fn GiNaC_print_csrc_float_print_csrc_float(
        this: *mut GiNaC_print_csrc_float,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16print_csrc_floatC1ERSoj"]
    pub fn GiNaC_print_csrc_float_print_csrc_float1(
        this: *mut GiNaC_print_csrc_float,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_csrc_float {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_csrc_float_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_csrc_float_print_csrc_float(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_csrc_float_print_csrc_float1(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
            options,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_csrc_double {
    pub _base: GiNaC_print_csrc,
}
pub type GiNaC_print_csrc_double_inherited = GiNaC_print_csrc;
#[test]
fn bindgen_test_layout_GiNaC_print_csrc_double() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_csrc_double>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_csrc_double))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_csrc_double>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_csrc_double))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17print_csrc_double21get_class_info_staticEv"]
    pub fn GiNaC_print_csrc_double_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17print_csrc_doubleC1Ev"]
    pub fn GiNaC_print_csrc_double_print_csrc_double(
        this: *mut GiNaC_print_csrc_double,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17print_csrc_doubleC1ERSoj"]
    pub fn GiNaC_print_csrc_double_print_csrc_double1(
        this: *mut GiNaC_print_csrc_double,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_csrc_double {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_csrc_double_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_csrc_double_print_csrc_double(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_csrc_double_print_csrc_double1(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
            options,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_csrc_cl_N {
    pub _base: GiNaC_print_csrc,
}
pub type GiNaC_print_csrc_cl_N_inherited = GiNaC_print_csrc;
#[test]
fn bindgen_test_layout_GiNaC_print_csrc_cl_N() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_csrc_cl_N>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_print_csrc_cl_N))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_csrc_cl_N>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_csrc_cl_N))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15print_csrc_cl_N21get_class_info_staticEv"]
    pub fn GiNaC_print_csrc_cl_N_get_class_info_static(
    ) -> *const GiNaC_print_context_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15print_csrc_cl_NC1Ev"]
    pub fn GiNaC_print_csrc_cl_N_print_csrc_cl_N(
        this: *mut GiNaC_print_csrc_cl_N,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15print_csrc_cl_NC1ERSoj"]
    pub fn GiNaC_print_csrc_cl_N_print_csrc_cl_N1(
        this: *mut GiNaC_print_csrc_cl_N,
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    );
}
impl GiNaC_print_csrc_cl_N {
    #[inline]
    pub unsafe fn get_class_info_static(
    ) -> *const GiNaC_print_context_class_info {
        GiNaC_print_csrc_cl_N_get_class_info_static()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_csrc_cl_N_print_csrc_cl_N(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *mut std_ostream,
        options: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_print_csrc_cl_N_print_csrc_cl_N1(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
            options,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct GiNaC_print_functor_impl__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_functor_impl {
    pub vtable_: *const GiNaC_print_functor_impl__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_print_functor_impl() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_functor_impl>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_print_functor_impl))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_functor_impl>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_functor_impl))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_ptrfun_handler<T, C> {
    pub _base: GiNaC_print_functor_impl,
    pub f: GiNaC_print_ptrfun_handler_F<T, C>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<C>>,
}
pub type GiNaC_print_ptrfun_handler_F<T, C> = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const T,
        arg2: *const C,
        arg3: ::std::os::raw::c_uint,
    ),
>;
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_memfun_handler<C> {
    pub _base: GiNaC_print_functor_impl,
    pub f: GiNaC_print_memfun_handler_F<C>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<C>>,
}
pub type GiNaC_print_memfun_handler_F<C> = ::std::option::Option<
    unsafe extern "C" fn(c: *const C, level: ::std::os::raw::c_uint),
>;
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_print_functor {
    pub impl_: u64,
}
#[test]
fn bindgen_test_layout_GiNaC_print_functor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_print_functor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_print_functor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_print_functor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_print_functor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_print_functor>())).impl_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_print_functor),
            "::",
            stringify!(impl_)
        )
    );
}
pub type GiNaC_lst = [u64; 6usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_return_type_t {
    pub tinfo: *const std_type_info,
    pub rl: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GiNaC_return_type_t() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_return_type_t>(),
        16usize,
        concat!("Size of: ", stringify!(GiNaC_return_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_return_type_t>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_return_type_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_return_type_t>())).tinfo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_return_type_t),
            "::",
            stringify!(tinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_return_type_t>())).rl as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_return_type_t),
            "::",
            stringify!(rl)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_registered_class_options {
    pub name: *const ::std::os::raw::c_char,
    pub parent_name: *const ::std::os::raw::c_char,
    pub tinfo_key: *const std_type_info,
    pub print_dispatch_table: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_GiNaC_registered_class_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_registered_class_options>(),
        48usize,
        concat!("Size of: ", stringify!(GiNaC_registered_class_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_registered_class_options>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_registered_class_options))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_registered_class_options>())).name
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_registered_class_options),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_registered_class_options>()))
                .parent_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_registered_class_options),
            "::",
            stringify!(parent_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_registered_class_options>())).tinfo_key
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_registered_class_options),
            "::",
            stringify!(tinfo_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_registered_class_options>()))
                .print_dispatch_table as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_registered_class_options),
            "::",
            stringify!(print_dispatch_table)
        )
    );
}
pub type GiNaC_registered_class_info =
    GiNaC_class_info<GiNaC_registered_class_options>;
pub type GiNaC_exvector = [u64; 3usize];
pub type GiNaC_exset = [u64; 6usize];
pub type GiNaC_exmap = [u64; 6usize];
#[repr(C)]
pub struct GiNaC_map_function__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_map_function {
    pub vtable_: *const GiNaC_map_function__bindgen_vtable,
}
pub type GiNaC_map_function_argument_type = *const GiNaC_ex;
pub type GiNaC_map_function_result_type = GiNaC_ex;
#[test]
fn bindgen_test_layout_GiNaC_map_function() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_map_function>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_map_function))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_map_function>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_map_function))
    );
}
#[repr(C)]
pub struct GiNaC_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_visitor {
    pub vtable_: *const GiNaC_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_visitor))
    );
}
#[repr(C)]
pub struct GiNaC_basic__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_basic {
    pub vtable_: *const GiNaC_basic__bindgen_vtable,
    pub _base: GiNaC_refcounted,
    pub flags: ::std::os::raw::c_uint,
    pub hashvalue: ::std::os::raw::c_uint,
}
#[repr(C)]
pub struct GiNaC_basic_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_basic_visitor {
    pub vtable_: *const GiNaC_basic_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_basic_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_basic_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_basic_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_basic_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_basic_visitor))
    );
}
pub type GiNaC_basic_inherited = ::std::os::raw::c_void;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5basic8reg_infoE"]
    pub static mut GiNaC_basic_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_basic() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_basic>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_basic>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_basic))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_basic>())).flags as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_basic),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_basic>())).hashvalue as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_basic),
            "::",
            stringify!(hashvalue)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic14print_dispatchERKNS_10class_infoINS_24registered_class_optionsEEERKNS_13print_contextEj"]
    pub fn GiNaC_basic_print_dispatch(
        this: *const GiNaC_basic,
        ri: *const GiNaC_registered_class_info,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic14subs_one_levelERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_basic_subs_one_level(
        this: *const GiNaC_basic,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic4diffERKNS_6symbolEj"]
    pub fn GiNaC_basic_diff(
        this: *const GiNaC_basic,
        s: *const GiNaC_symbol,
        nth: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic7compareERKS0_"]
    pub fn GiNaC_basic_compare(
        this: *const GiNaC_basic,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic8is_equalERKS0_"]
    pub fn GiNaC_basic_is_equal(
        this: *const GiNaC_basic,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic4holdEv"]
    pub fn GiNaC_basic_hold(this: *const GiNaC_basic) -> *const GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic20ensure_if_modifiableEv"]
    pub fn GiNaC_basic_ensure_if_modifiable(this: *const GiNaC_basic);
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_basic_do_print(
        this: *const GiNaC_basic,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_basic_do_print_tree(
        this: *const GiNaC_basic,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_basic_do_print_python_repr(
        this: *const GiNaC_basic,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5basicC1ERKS0_"]
    pub fn GiNaC_basic_basic(this: *mut GiNaC_basic, other: *const GiNaC_basic);
}
impl GiNaC_basic {
    #[inline]
    pub unsafe fn print_dispatch(
        &self,
        ri: *const GiNaC_registered_class_info,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_basic_print_dispatch(self, ri, c, level)
    }
    #[inline]
    pub unsafe fn subs_one_level(
        &self,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_basic_subs_one_level(self, m, options)
    }
    #[inline]
    pub unsafe fn diff(
        &self,
        s: *const GiNaC_symbol,
        nth: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_basic_diff(self, s, nth)
    }
    #[inline]
    pub unsafe fn compare(
        &self,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int {
        GiNaC_basic_compare(self, other)
    }
    #[inline]
    pub unsafe fn is_equal(&self, other: *const GiNaC_basic) -> bool {
        GiNaC_basic_is_equal(self, other)
    }
    #[inline]
    pub unsafe fn hold(&self) -> *const GiNaC_basic {
        GiNaC_basic_hold(self)
    }
    #[inline]
    pub unsafe fn ensure_if_modifiable(&self) {
        GiNaC_basic_ensure_if_modifiable(self)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_basic_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_basic_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_basic_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn new(other: *const GiNaC_basic) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_basic_basic(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic4evalEv"]
    pub fn GiNaC_basic_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic5evalfEv"]
    pub fn GiNaC_basic_evalf(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic5evalmEv"]
    pub fn GiNaC_basic_evalm(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic10eval_integEv"]
    pub fn GiNaC_basic_eval_integ(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic10eval_ncmulERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_basic_eval_ncmul(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic12eval_indexedERKS0_"]
    pub fn GiNaC_basic_eval_indexed(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_basic,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic5printERKNS_13print_contextEj"]
    pub fn GiNaC_basic_print(
        this: *mut ::std::os::raw::c_void,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic8dbgprintEv"]
    pub fn GiNaC_basic_dbgprint(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic12dbgprinttreeEv"]
    pub fn GiNaC_basic_dbgprinttree(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic10precedenceEv"]
    pub fn GiNaC_basic_precedence(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic4infoEj"]
    pub fn GiNaC_basic_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic4nopsEv"]
    pub fn GiNaC_basic_nops(this: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic2opEm"]
    pub fn GiNaC_basic_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5basic6let_opEm"]
    pub fn GiNaC_basic_let_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic3hasERKNS_2exEj"]
    pub fn GiNaC_basic_has(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic5matchERKNS_2exERSt3mapIS1_S1_NS_10ex_is_lessESaISt4pairIS2_S1_EEE"]
    pub fn GiNaC_basic_match(
        this: *mut ::std::os::raw::c_void,
        pattern: *const GiNaC_ex,
        repls: *mut GiNaC_exmap,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic15match_same_typeERKS0_"]
    pub fn GiNaC_basic_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic4subsERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_basic_subs(
        this: *mut ::std::os::raw::c_void,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic3mapERNS_12map_functionE"]
    pub fn GiNaC_basic_map(
        this: *mut ::std::os::raw::c_void,
        f: *mut GiNaC_map_function,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic13is_polynomialERKNS_2exE"]
    pub fn GiNaC_basic_is_polynomial(
        this: *mut ::std::os::raw::c_void,
        var: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic6degreeERKNS_2exE"]
    pub fn GiNaC_basic_degree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic7ldegreeERKNS_2exE"]
    pub fn GiNaC_basic_ldegree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic5coeffERKNS_2exEi"]
    pub fn GiNaC_basic_coeff(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
        n: ::std::os::raw::c_int,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic6expandEj"]
    pub fn GiNaC_basic_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic7collectERKNS_2exEb"]
    pub fn GiNaC_basic_collect(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
        distributed: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic10derivativeERKNS_6symbolE"]
    pub fn GiNaC_basic_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic6seriesERKNS_10relationalEij"]
    pub fn GiNaC_basic_series(
        this: *mut ::std::os::raw::c_void,
        r: *const GiNaC_relational,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic6normalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEES9_"]
    pub fn GiNaC_basic_normal(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
        rev_lookup: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic11to_rationalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_basic_to_rational(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic13to_polynomialERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_basic_to_polynomial(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic15integer_contentEv"]
    pub fn GiNaC_basic_integer_content(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic4smodERKNS_7numericE"]
    pub fn GiNaC_basic_smod(
        this: *mut ::std::os::raw::c_void,
        xi: *const GiNaC_numeric,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic15max_coefficientEv"]
    pub fn GiNaC_basic_max_coefficient(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic16get_free_indicesEv"]
    pub fn GiNaC_basic_get_free_indices(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic11add_indexedERKNS_2exES3_"]
    pub fn GiNaC_basic_add_indexed(
        this: *mut ::std::os::raw::c_void,
        self_: *const GiNaC_ex,
        other: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic18scalar_mul_indexedERKNS_2exERKNS_7numericE"]
    pub fn GiNaC_basic_scalar_mul_indexed(
        this: *mut ::std::os::raw::c_void,
        self_: *const GiNaC_ex,
        other: *const GiNaC_numeric,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_basic_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic11return_typeEv"]
    pub fn GiNaC_basic_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic17return_type_tinfoEv"]
    pub fn GiNaC_basic_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic9conjugateEv"]
    pub fn GiNaC_basic_conjugate(this: *mut ::std::os::raw::c_void)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic9real_partEv"]
    pub fn GiNaC_basic_real_part(this: *mut ::std::os::raw::c_void)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic9imag_partEv"]
    pub fn GiNaC_basic_imag_part(this: *mut ::std::os::raw::c_void)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic17compare_same_typeERKS0_"]
    pub fn GiNaC_basic_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic18is_equal_same_typeERKS0_"]
    pub fn GiNaC_basic_is_equal_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic8calchashEv"]
    pub fn GiNaC_basic_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5basic7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_basic_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5basic12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_basic_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_library_init {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12library_init5countE"]
    pub static mut GiNaC_library_init_count: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_library_init() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_library_init>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_library_init))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_library_init>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_library_init))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12library_initC1Ev"]
    pub fn GiNaC_library_init_library_init(this: *mut GiNaC_library_init);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12library_initD1Ev"]
    pub fn GiNaC_library_init_library_init_destructor(
        this: *mut GiNaC_library_init,
    );
}
impl GiNaC_library_init {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_library_init_library_init(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_library_init_library_init_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL19library_initializerE"]
    pub static mut GiNaC_library_initializer: GiNaC_library_init;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_ex {
    pub bp: GiNaC_ptr<GiNaC_basic>,
}
#[test]
fn bindgen_test_layout_GiNaC_ex() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ex>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_ex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GiNaC_ex>())).bp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_ex),
            "::",
            stringify!(bp)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex5beginEv"]
    pub fn GiNaC_ex_begin(this: *const GiNaC_ex) -> GiNaC_const_iterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex3endEv"]
    pub fn GiNaC_ex_end(this: *const GiNaC_ex) -> GiNaC_const_iterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex14preorder_beginEv"]
    pub fn GiNaC_ex_preorder_begin(
        this: *const GiNaC_ex,
    ) -> GiNaC_const_preorder_iterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex12preorder_endEv"]
    pub fn GiNaC_ex_preorder_end(
        this: *const GiNaC_ex,
    ) -> GiNaC_const_preorder_iterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex15postorder_beginEv"]
    pub fn GiNaC_ex_postorder_begin(
        this: *const GiNaC_ex,
    ) -> GiNaC_const_postorder_iterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex13postorder_endEv"]
    pub fn GiNaC_ex_postorder_end(
        this: *const GiNaC_ex,
    ) -> GiNaC_const_postorder_iterator;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex5printERKNS_13print_contextEj"]
    pub fn GiNaC_ex_print(
        this: *const GiNaC_ex,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex8dbgprintEv"]
    pub fn GiNaC_ex_dbgprint(this: *const GiNaC_ex);
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex12dbgprinttreeEv"]
    pub fn GiNaC_ex_dbgprinttree(this: *const GiNaC_ex);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2ex6let_opEm"]
    pub fn GiNaC_ex_let_op(this: *mut GiNaC_ex, i: size_t) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex3lhsEv"]
    pub fn GiNaC_ex_lhs(this: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex3rhsEv"]
    pub fn GiNaC_ex_rhs(this: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex4findERKS0_RSt3setIS0_NS_10ex_is_lessESaIS0_EE"]
    pub fn GiNaC_ex_find(
        this: *const GiNaC_ex,
        pattern: *const GiNaC_ex,
        found: *mut GiNaC_exset,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex5matchERKS0_"]
    pub fn GiNaC_ex_match(
        this: *const GiNaC_ex,
        pattern: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex4subsERKSt3mapIS0_S0_NS_10ex_is_lessESaISt4pairIKS0_S0_EEEj"]
    pub fn GiNaC_ex_subs(
        this: *const GiNaC_ex,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex4subsERKNS_9containerINSt7__cxx114listEEES6_j"]
    pub fn GiNaC_ex_subs1(
        this: *const GiNaC_ex,
        ls: *const GiNaC_lst,
        lr: *const GiNaC_lst,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex4subsERKS0_j"]
    pub fn GiNaC_ex_subs2(
        this: *const GiNaC_ex,
        e: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex3mapEPFS0_RKS0_E"]
    pub fn GiNaC_ex_map(
        this: *const GiNaC_ex,
        f: ::std::option::Option<
            unsafe extern "C" fn(e: *const GiNaC_ex) -> GiNaC_ex,
        >,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex17traverse_preorderERNS_7visitorE"]
    pub fn GiNaC_ex_traverse_preorder(
        this: *const GiNaC_ex,
        v: *mut GiNaC_visitor,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex18traverse_postorderERNS_7visitorE"]
    pub fn GiNaC_ex_traverse_postorder(
        this: *const GiNaC_ex,
        v: *mut GiNaC_visitor,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex13is_polynomialERKS0_"]
    pub fn GiNaC_ex_is_polynomial(
        this: *const GiNaC_ex,
        vars: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex6expandEj"]
    pub fn GiNaC_ex_expand(
        this: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex4diffERKNS_6symbolEj"]
    pub fn GiNaC_ex_diff(
        this: *const GiNaC_ex,
        s: *const GiNaC_symbol,
        nth: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex6seriesERKS0_ij"]
    pub fn GiNaC_ex_series(
        this: *const GiNaC_ex,
        r: *const GiNaC_ex,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex6normalEv"]
    pub fn GiNaC_ex_normal(this: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex11to_rationalERSt3mapIS0_S0_NS_10ex_is_lessESaISt4pairIKS0_S0_EEE"]
    pub fn GiNaC_ex_to_rational(
        this: *const GiNaC_ex,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex13to_polynomialERSt3mapIS0_S0_NS_10ex_is_lessESaISt4pairIKS0_S0_EEE"]
    pub fn GiNaC_ex_to_polynomial(
        this: *const GiNaC_ex,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex5numerEv"]
    pub fn GiNaC_ex_numer(this: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex5denomEv"]
    pub fn GiNaC_ex_denom(this: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex11numer_denomEv"]
    pub fn GiNaC_ex_numer_denom(this: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex4unitERKS0_"]
    pub fn GiNaC_ex_unit(this: *const GiNaC_ex, x: *const GiNaC_ex)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex7contentERKS0_"]
    pub fn GiNaC_ex_content(
        this: *const GiNaC_ex,
        x: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex15integer_contentEv"]
    pub fn GiNaC_ex_integer_content(this: *const GiNaC_ex) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex8primpartERKS0_"]
    pub fn GiNaC_ex_primpart(
        this: *const GiNaC_ex,
        x: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex8primpartERKS0_S2_"]
    pub fn GiNaC_ex_primpart1(
        this: *const GiNaC_ex,
        x: *const GiNaC_ex,
        cont: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex12unitcontprimERKS0_RS0_S3_S3_"]
    pub fn GiNaC_ex_unitcontprim(
        this: *const GiNaC_ex,
        x: *const GiNaC_ex,
        u: *mut GiNaC_ex,
        c: *mut GiNaC_ex,
        p: *mut GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex15max_coefficientEv"]
    pub fn GiNaC_ex_max_coefficient(this: *const GiNaC_ex) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex16simplify_indexedEj"]
    pub fn GiNaC_ex_simplify_indexed(
        this: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex16simplify_indexedERKNS_15scalar_productsEj"]
    pub fn GiNaC_ex_simplify_indexed1(
        this: *const GiNaC_ex,
        sp: *const GiNaC_scalar_products,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex7compareERKS0_"]
    pub fn GiNaC_ex_compare(
        this: *const GiNaC_ex,
        other: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex8is_equalERKS0_"]
    pub fn GiNaC_ex_is_equal(
        this: *const GiNaC_ex,
        other: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex14is_zero_matrixEv"]
    pub fn GiNaC_ex_is_zero_matrix(this: *const GiNaC_ex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex10symmetrizeEv"]
    pub fn GiNaC_ex_symmetrize(this: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex10symmetrizeERKNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_ex_symmetrize1(
        this: *const GiNaC_ex,
        l: *const GiNaC_lst,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex14antisymmetrizeEv"]
    pub fn GiNaC_ex_antisymmetrize(this: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex14antisymmetrizeERKNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_ex_antisymmetrize1(
        this: *const GiNaC_ex,
        l: *const GiNaC_lst,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex17symmetrize_cyclicEv"]
    pub fn GiNaC_ex_symmetrize_cyclic(this: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC2ex17symmetrize_cyclicERKNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_ex_symmetrize_cyclic1(
        this: *const GiNaC_ex,
        l: *const GiNaC_lst,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1Ev"]
    pub fn GiNaC_ex_ex(this: *mut GiNaC_ex);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1ERKNS_5basicE"]
    pub fn GiNaC_ex_ex1(this: *mut GiNaC_ex, other: *const GiNaC_basic);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1Ei"]
    pub fn GiNaC_ex_ex2(this: *mut GiNaC_ex, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1Ej"]
    pub fn GiNaC_ex_ex3(this: *mut GiNaC_ex, i: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1El"]
    pub fn GiNaC_ex_ex4(this: *mut GiNaC_ex, i: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1Em"]
    pub fn GiNaC_ex_ex5(this: *mut GiNaC_ex, i: ::std::os::raw::c_ulong);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1Ex"]
    pub fn GiNaC_ex_ex6(this: *mut GiNaC_ex, i: ::std::os::raw::c_longlong);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1Ey"]
    pub fn GiNaC_ex_ex7(this: *mut GiNaC_ex, i: ::std::os::raw::c_ulonglong);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1Ed"]
    pub fn GiNaC_ex_ex8(this: *mut GiNaC_ex, d: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2exC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_"]
    pub fn GiNaC_ex_ex9(
        this: *mut GiNaC_ex,
        s: *const std_string,
        l: *const GiNaC_ex,
    );
}
impl GiNaC_ex {
    #[inline]
    pub unsafe fn begin(&self) -> GiNaC_const_iterator {
        GiNaC_ex_begin(self)
    }
    #[inline]
    pub unsafe fn end(&self) -> GiNaC_const_iterator {
        GiNaC_ex_end(self)
    }
    #[inline]
    pub unsafe fn preorder_begin(&self) -> GiNaC_const_preorder_iterator {
        GiNaC_ex_preorder_begin(self)
    }
    #[inline]
    pub unsafe fn preorder_end(&self) -> GiNaC_const_preorder_iterator {
        GiNaC_ex_preorder_end(self)
    }
    #[inline]
    pub unsafe fn postorder_begin(&self) -> GiNaC_const_postorder_iterator {
        GiNaC_ex_postorder_begin(self)
    }
    #[inline]
    pub unsafe fn postorder_end(&self) -> GiNaC_const_postorder_iterator {
        GiNaC_ex_postorder_end(self)
    }
    #[inline]
    pub unsafe fn print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_ex_print(self, c, level)
    }
    #[inline]
    pub unsafe fn dbgprint(&self) {
        GiNaC_ex_dbgprint(self)
    }
    #[inline]
    pub unsafe fn dbgprinttree(&self) {
        GiNaC_ex_dbgprinttree(self)
    }
    #[inline]
    pub unsafe fn let_op(&mut self, i: size_t) -> *mut GiNaC_ex {
        GiNaC_ex_let_op(self, i)
    }
    #[inline]
    pub unsafe fn lhs(&self) -> GiNaC_ex {
        GiNaC_ex_lhs(self)
    }
    #[inline]
    pub unsafe fn rhs(&self) -> GiNaC_ex {
        GiNaC_ex_rhs(self)
    }
    #[inline]
    pub unsafe fn find(
        &self,
        pattern: *const GiNaC_ex,
        found: *mut GiNaC_exset,
    ) -> bool {
        GiNaC_ex_find(self, pattern, found)
    }
    #[inline]
    pub unsafe fn match_(&self, pattern: *const GiNaC_ex) -> bool {
        GiNaC_ex_match(self, pattern)
    }
    #[inline]
    pub unsafe fn subs(
        &self,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_ex_subs(self, m, options)
    }
    #[inline]
    pub unsafe fn subs1(
        &self,
        ls: *const GiNaC_lst,
        lr: *const GiNaC_lst,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_ex_subs1(self, ls, lr, options)
    }
    #[inline]
    pub unsafe fn subs2(
        &self,
        e: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_ex_subs2(self, e, options)
    }
    #[inline]
    pub unsafe fn map(
        &self,
        f: ::std::option::Option<
            unsafe extern "C" fn(e: *const GiNaC_ex) -> GiNaC_ex,
        >,
    ) -> GiNaC_ex {
        GiNaC_ex_map(self, f)
    }
    #[inline]
    pub unsafe fn traverse_preorder(&self, v: *mut GiNaC_visitor) {
        GiNaC_ex_traverse_preorder(self, v)
    }
    #[inline]
    pub unsafe fn traverse_postorder(&self, v: *mut GiNaC_visitor) {
        GiNaC_ex_traverse_postorder(self, v)
    }
    #[inline]
    pub unsafe fn is_polynomial(&self, vars: *const GiNaC_ex) -> bool {
        GiNaC_ex_is_polynomial(self, vars)
    }
    #[inline]
    pub unsafe fn expand(&self, options: ::std::os::raw::c_uint) -> GiNaC_ex {
        GiNaC_ex_expand(self, options)
    }
    #[inline]
    pub unsafe fn diff(
        &self,
        s: *const GiNaC_symbol,
        nth: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_ex_diff(self, s, nth)
    }
    #[inline]
    pub unsafe fn series(
        &self,
        r: *const GiNaC_ex,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_ex_series(self, r, order, options)
    }
    #[inline]
    pub unsafe fn normal(&self) -> GiNaC_ex {
        GiNaC_ex_normal(self)
    }
    #[inline]
    pub unsafe fn to_rational(&self, repl: *mut GiNaC_exmap) -> GiNaC_ex {
        GiNaC_ex_to_rational(self, repl)
    }
    #[inline]
    pub unsafe fn to_polynomial(&self, repl: *mut GiNaC_exmap) -> GiNaC_ex {
        GiNaC_ex_to_polynomial(self, repl)
    }
    #[inline]
    pub unsafe fn numer(&self) -> GiNaC_ex {
        GiNaC_ex_numer(self)
    }
    #[inline]
    pub unsafe fn denom(&self) -> GiNaC_ex {
        GiNaC_ex_denom(self)
    }
    #[inline]
    pub unsafe fn numer_denom(&self) -> GiNaC_ex {
        GiNaC_ex_numer_denom(self)
    }
    #[inline]
    pub unsafe fn unit(&self, x: *const GiNaC_ex) -> GiNaC_ex {
        GiNaC_ex_unit(self, x)
    }
    #[inline]
    pub unsafe fn content(&self, x: *const GiNaC_ex) -> GiNaC_ex {
        GiNaC_ex_content(self, x)
    }
    #[inline]
    pub unsafe fn integer_content(&self) -> GiNaC_numeric {
        GiNaC_ex_integer_content(self)
    }
    #[inline]
    pub unsafe fn primpart(&self, x: *const GiNaC_ex) -> GiNaC_ex {
        GiNaC_ex_primpart(self, x)
    }
    #[inline]
    pub unsafe fn primpart1(
        &self,
        x: *const GiNaC_ex,
        cont: *const GiNaC_ex,
    ) -> GiNaC_ex {
        GiNaC_ex_primpart1(self, x, cont)
    }
    #[inline]
    pub unsafe fn unitcontprim(
        &self,
        x: *const GiNaC_ex,
        u: *mut GiNaC_ex,
        c: *mut GiNaC_ex,
        p: *mut GiNaC_ex,
    ) {
        GiNaC_ex_unitcontprim(self, x, u, c, p)
    }
    #[inline]
    pub unsafe fn max_coefficient(&self) -> GiNaC_numeric {
        GiNaC_ex_max_coefficient(self)
    }
    #[inline]
    pub unsafe fn simplify_indexed(
        &self,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_ex_simplify_indexed(self, options)
    }
    #[inline]
    pub unsafe fn simplify_indexed1(
        &self,
        sp: *const GiNaC_scalar_products,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_ex_simplify_indexed1(self, sp, options)
    }
    #[inline]
    pub unsafe fn compare(
        &self,
        other: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int {
        GiNaC_ex_compare(self, other)
    }
    #[inline]
    pub unsafe fn is_equal(&self, other: *const GiNaC_ex) -> bool {
        GiNaC_ex_is_equal(self, other)
    }
    #[inline]
    pub unsafe fn is_zero_matrix(&self) -> bool {
        GiNaC_ex_is_zero_matrix(self)
    }
    #[inline]
    pub unsafe fn symmetrize(&self) -> GiNaC_ex {
        GiNaC_ex_symmetrize(self)
    }
    #[inline]
    pub unsafe fn symmetrize1(&self, l: *const GiNaC_lst) -> GiNaC_ex {
        GiNaC_ex_symmetrize1(self, l)
    }
    #[inline]
    pub unsafe fn antisymmetrize(&self) -> GiNaC_ex {
        GiNaC_ex_antisymmetrize(self)
    }
    #[inline]
    pub unsafe fn antisymmetrize1(&self, l: *const GiNaC_lst) -> GiNaC_ex {
        GiNaC_ex_antisymmetrize1(self, l)
    }
    #[inline]
    pub unsafe fn symmetrize_cyclic(&self) -> GiNaC_ex {
        GiNaC_ex_symmetrize_cyclic(self)
    }
    #[inline]
    pub unsafe fn symmetrize_cyclic1(&self, l: *const GiNaC_lst) -> GiNaC_ex {
        GiNaC_ex_symmetrize_cyclic1(self, l)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(other: *const GiNaC_basic) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex1(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(i: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex2(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(i: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex3(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(i: ::std::os::raw::c_long) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex4(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(i: ::std::os::raw::c_ulong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex5(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(i: ::std::os::raw::c_longlong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex6(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(i: ::std::os::raw::c_ulonglong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex7(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new8(d: f64) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex8(__bindgen_tmp.as_mut_ptr(), d);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new9(s: *const std_string, l: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ex_ex9(__bindgen_tmp.as_mut_ptr(), s, l);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8_num0_bpE"]
    pub static mut GiNaC__num0_bp: *const GiNaC_basic;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_const_iterator {
    pub _base: u8,
    pub e: GiNaC_ex,
    pub i: size_t,
}
#[test]
fn bindgen_test_layout_GiNaC_const_iterator() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_const_iterator>(),
        16usize,
        concat!("Size of: ", stringify!(GiNaC_const_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_const_iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_const_iterator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_const_iterator>())).e as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_const_iterator),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_const_iterator>())).i as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_const_iterator),
            "::",
            stringify!(i)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_internal__iter_rep {
    pub e: GiNaC_ex,
    pub i: size_t,
    pub i_end: size_t,
}
#[test]
fn bindgen_test_layout_GiNaC_internal__iter_rep() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_internal__iter_rep>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_internal__iter_rep))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_internal__iter_rep>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_internal__iter_rep))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_internal__iter_rep>())).e as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_internal__iter_rep),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_internal__iter_rep>())).i as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_internal__iter_rep),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_internal__iter_rep>())).i_end
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_internal__iter_rep),
            "::",
            stringify!(i_end)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_const_preorder_iterator {
    pub _base: u8,
    pub s: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_GiNaC_const_preorder_iterator() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_const_preorder_iterator>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_const_preorder_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_const_preorder_iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_const_preorder_iterator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_const_preorder_iterator>())).s
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_const_preorder_iterator),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_const_postorder_iterator {
    pub _base: u8,
    pub s: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_GiNaC_const_postorder_iterator() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_const_postorder_iterator>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_const_postorder_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_const_postorder_iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_const_postorder_iterator))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_const_postorder_iterator>())).s
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_const_postorder_iterator),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_ex_is_less {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_ex_is_less() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ex_is_less>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_ex_is_less))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ex_is_less>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_ex_is_less))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_ex_is_equal {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_ex_is_equal() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ex_is_equal>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_ex_is_equal))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ex_is_equal>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_ex_is_equal))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_op0_is_equal {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_op0_is_equal() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_op0_is_equal>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_op0_is_equal))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_op0_is_equal>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_op0_is_equal))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_ex_swap {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_ex_swap() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ex_swap>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_ex_swap))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ex_swap>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_ex_swap))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pointer_to_map_function {
    pub _base: GiNaC_map_function,
    pub ptr: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const GiNaC_ex) -> GiNaC_ex,
    >,
}
#[test]
fn bindgen_test_layout_GiNaC_pointer_to_map_function() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_pointer_to_map_function>(),
        16usize,
        concat!("Size of: ", stringify!(GiNaC_pointer_to_map_function))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_pointer_to_map_function>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_pointer_to_map_function))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_pointer_to_map_function>())).ptr
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_pointer_to_map_function),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pointer_to_map_function_1arg<T1> {
    pub _base: GiNaC_map_function,
    pub ptr: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const GiNaC_ex, arg2: T1) -> GiNaC_ex,
    >,
    pub arg1: T1,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T1>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pointer_to_map_function_2args<T1, T2> {
    pub _base: GiNaC_map_function,
    pub ptr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const GiNaC_ex,
            arg2: T1,
            arg3: T2,
        ) -> GiNaC_ex,
    >,
    pub arg1: T1,
    pub arg2: T2,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<T2>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pointer_to_map_function_3args<T1, T2, T3> {
    pub _base: GiNaC_map_function,
    pub ptr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const GiNaC_ex,
            arg2: T1,
            arg3: T2,
            arg4: T3,
        ) -> GiNaC_ex,
    >,
    pub arg1: T1,
    pub arg2: T2,
    pub arg3: T3,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<T2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<T3>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pointer_to_member_to_map_function<C> {
    pub _base: GiNaC_map_function,
    pub ptr: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const GiNaC_ex) -> GiNaC_ex,
    >,
    pub c: *mut C,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<C>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pointer_to_member_to_map_function_1arg<C, T1> {
    pub _base: GiNaC_map_function,
    pub ptr: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const GiNaC_ex, arg2: T1) -> GiNaC_ex,
    >,
    pub c: *mut C,
    pub arg1: T1,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<C>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<T1>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pointer_to_member_to_map_function_2args<C, T1, T2> {
    pub _base: GiNaC_map_function,
    pub ptr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const GiNaC_ex,
            arg2: T1,
            arg3: T2,
        ) -> GiNaC_ex,
    >,
    pub c: *mut C,
    pub arg1: T1,
    pub arg2: T2,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<C>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<T1>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<T2>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pointer_to_member_to_map_function_3args<C, T1, T2, T3> {
    pub _base: GiNaC_map_function,
    pub ptr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const GiNaC_ex,
            arg2: T1,
            arg3: T2,
            arg4: T3,
        ) -> GiNaC_ex,
    >,
    pub c: *mut C,
    pub arg1: T1,
    pub arg2: T2,
    pub arg3: T3,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<C>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<T1>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<T2>>,
    pub _phantom_3: ::std::marker::PhantomData<::std::cell::UnsafeCell<T3>>,
}
pub type GiNaC_archive_node_id = ::std::os::raw::c_uint;
pub type GiNaC_archive_atom = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_archive_node {
    pub a: *mut GiNaC_archive,
    pub props: [u64; 3usize],
    pub has_expression: bool,
    pub e: GiNaC_ex,
}
pub const GiNaC_archive_node_property_type_PTYPE_BOOL:
    GiNaC_archive_node_property_type = 0;
pub const GiNaC_archive_node_property_type_PTYPE_UNSIGNED:
    GiNaC_archive_node_property_type = 1;
pub const GiNaC_archive_node_property_type_PTYPE_STRING:
    GiNaC_archive_node_property_type = 2;
pub const GiNaC_archive_node_property_type_PTYPE_NODE:
    GiNaC_archive_node_property_type = 3;
pub type GiNaC_archive_node_property_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_archive_node_property_info {
    pub type_: GiNaC_archive_node_property_type,
    pub name: std_string,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GiNaC_archive_node_property_info() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_archive_node_property_info>(),
        48usize,
        concat!("Size of: ", stringify!(GiNaC_archive_node_property_info))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_archive_node_property_info>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GiNaC_archive_node_property_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node_property_info>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node_property_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node_property_info>())).name
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node_property_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node_property_info>())).count
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node_property_info),
            "::",
            stringify!(count)
        )
    );
}
pub type GiNaC_archive_node_propinfovector = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_archive_node_property {
    pub type_: GiNaC_archive_node_property_type,
    pub name: GiNaC_archive_atom,
    pub value: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GiNaC_archive_node_property() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_archive_node_property>(),
        12usize,
        concat!("Size of: ", stringify!(GiNaC_archive_node_property))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_archive_node_property>(),
        4usize,
        concat!("Alignment of ", stringify!(GiNaC_archive_node_property))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node_property>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node_property),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node_property>())).name
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node_property),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node_property>())).value
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node_property),
            "::",
            stringify!(value)
        )
    );
}
pub type GiNaC_archive_node_archive_node_cit =
    __gnu_cxx___normal_iterator<const_pointer>;
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_archive_node_archive_node_cit_range {
    pub begin: GiNaC_archive_node_archive_node_cit,
    pub end: GiNaC_archive_node_archive_node_cit,
}
#[test]
fn bindgen_test_layout_GiNaC_archive_node_archive_node_cit_range() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_archive_node_archive_node_cit_range>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(GiNaC_archive_node_archive_node_cit_range)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_archive_node_archive_node_cit_range>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(GiNaC_archive_node_archive_node_cit_range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node_archive_node_cit_range>(
            )))
            .begin as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node_archive_node_cit_range),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node_archive_node_cit_range>(
            )))
            .end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node_archive_node_cit_range),
            "::",
            stringify!(end)
        )
    );
}
#[test]
fn bindgen_test_layout_GiNaC_archive_node() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_archive_node>(),
        48usize,
        concat!("Size of: ", stringify!(GiNaC_archive_node))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_archive_node>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_archive_node))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node>())).a as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node>())).props as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node),
            "::",
            stringify!(props)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node>())).has_expression
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node),
            "::",
            stringify!(has_expression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_node>())).e as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_node),
            "::",
            stringify!(e)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12archive_node8add_boolERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
    pub fn GiNaC_archive_node_add_bool(
        this: *mut GiNaC_archive_node,
        name: *const std_string,
        value: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12archive_node12add_unsignedERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj"]
    pub fn GiNaC_archive_node_add_unsigned(
        this: *mut GiNaC_archive_node,
        name: *const std_string,
        value: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12archive_node10add_stringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
    pub fn GiNaC_archive_node_add_string(
        this: *mut GiNaC_archive_node,
        name: *const std_string,
        value: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12archive_node6add_exERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_2exE"]
    pub fn GiNaC_archive_node_add_ex(
        this: *mut GiNaC_archive_node,
        name: *const std_string,
        value: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node9find_boolERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERbj"]
    pub fn GiNaC_archive_node_find_bool(
        this: *const GiNaC_archive_node,
        name: *const std_string,
        ret: *mut bool,
        index: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node13find_unsignedERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERjj"]
    pub fn GiNaC_archive_node_find_unsigned(
        this: *const GiNaC_archive_node,
        name: *const std_string,
        ret: *mut ::std::os::raw::c_uint,
        index: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node11find_stringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS6_j"]
    pub fn GiNaC_archive_node_find_string(
        this: *const GiNaC_archive_node,
        name: *const std_string,
        ret: *mut std_string,
        index: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node10find_firstERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_archive_node_find_first(
        this: *const GiNaC_archive_node,
        name: *const std_string,
    ) -> GiNaC_archive_node_archive_node_cit;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node9find_lastERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_archive_node_find_last(
        this: *const GiNaC_archive_node,
        name: *const std_string,
    ) -> GiNaC_archive_node_archive_node_cit;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node19find_property_rangeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
    pub fn GiNaC_archive_node_find_property_range(
        this: *const GiNaC_archive_node,
        name1: *const std_string,
        name2: *const std_string,
    ) -> GiNaC_archive_node_archive_node_cit_range;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node7find_exERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_2exERNS_9containerINS1_4listEEEj"]
    pub fn GiNaC_archive_node_find_ex(
        this: *const GiNaC_archive_node,
        name: *const std_string,
        ret: *mut GiNaC_ex,
        sym_lst: *mut GiNaC_lst,
        index: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node14find_ex_by_locEN9__gnu_cxx17__normal_iteratorIPKNS0_8propertyESt6vectorIS3_SaIS3_EEEERNS_2exERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_archive_node_find_ex_by_loc(
        this: *const GiNaC_archive_node,
        loc: GiNaC_archive_node_archive_node_cit,
        ret: *mut GiNaC_ex,
        sym_lst: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node12find_ex_nodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj"]
    pub fn GiNaC_archive_node_find_ex_node(
        this: *const GiNaC_archive_node,
        name: *const std_string,
        index: ::std::os::raw::c_uint,
    ) -> *const GiNaC_archive_node;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node14get_propertiesERSt6vectorINS0_13property_infoESaIS2_EE"]
    pub fn GiNaC_archive_node_get_properties(
        this: *const GiNaC_archive_node,
        v: *mut GiNaC_archive_node_propinfovector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node9unarchiveERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_archive_node_unarchive(
        this: *const GiNaC_archive_node,
        sym_lst: *mut GiNaC_lst,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node14has_same_ex_asERKS0_"]
    pub fn GiNaC_archive_node_has_same_ex_as(
        this: *const GiNaC_archive_node,
        other: *const GiNaC_archive_node,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12archive_node6forgetEv"]
    pub fn GiNaC_archive_node_forget(this: *mut GiNaC_archive_node);
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12archive_node8printrawERSo"]
    pub fn GiNaC_archive_node_printraw(
        this: *const GiNaC_archive_node,
        os: *mut std_ostream,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12archive_nodeC1ERNS_7archiveERKNS_2exE"]
    pub fn GiNaC_archive_node_archive_node(
        this: *mut GiNaC_archive_node,
        ar: *mut GiNaC_archive,
        expr: *const GiNaC_ex,
    );
}
impl GiNaC_archive_node {
    #[inline]
    pub unsafe fn add_bool(&mut self, name: *const std_string, value: bool) {
        GiNaC_archive_node_add_bool(self, name, value)
    }
    #[inline]
    pub unsafe fn add_unsigned(
        &mut self,
        name: *const std_string,
        value: ::std::os::raw::c_uint,
    ) {
        GiNaC_archive_node_add_unsigned(self, name, value)
    }
    #[inline]
    pub unsafe fn add_string(
        &mut self,
        name: *const std_string,
        value: *const std_string,
    ) {
        GiNaC_archive_node_add_string(self, name, value)
    }
    #[inline]
    pub unsafe fn add_ex(
        &mut self,
        name: *const std_string,
        value: *const GiNaC_ex,
    ) {
        GiNaC_archive_node_add_ex(self, name, value)
    }
    #[inline]
    pub unsafe fn find_bool(
        &self,
        name: *const std_string,
        ret: *mut bool,
        index: ::std::os::raw::c_uint,
    ) -> bool {
        GiNaC_archive_node_find_bool(self, name, ret, index)
    }
    #[inline]
    pub unsafe fn find_unsigned(
        &self,
        name: *const std_string,
        ret: *mut ::std::os::raw::c_uint,
        index: ::std::os::raw::c_uint,
    ) -> bool {
        GiNaC_archive_node_find_unsigned(self, name, ret, index)
    }
    #[inline]
    pub unsafe fn find_string(
        &self,
        name: *const std_string,
        ret: *mut std_string,
        index: ::std::os::raw::c_uint,
    ) -> bool {
        GiNaC_archive_node_find_string(self, name, ret, index)
    }
    #[inline]
    pub unsafe fn find_first(
        &self,
        name: *const std_string,
    ) -> GiNaC_archive_node_archive_node_cit {
        GiNaC_archive_node_find_first(self, name)
    }
    #[inline]
    pub unsafe fn find_last(
        &self,
        name: *const std_string,
    ) -> GiNaC_archive_node_archive_node_cit {
        GiNaC_archive_node_find_last(self, name)
    }
    #[inline]
    pub unsafe fn find_property_range(
        &self,
        name1: *const std_string,
        name2: *const std_string,
    ) -> GiNaC_archive_node_archive_node_cit_range {
        GiNaC_archive_node_find_property_range(self, name1, name2)
    }
    #[inline]
    pub unsafe fn find_ex(
        &self,
        name: *const std_string,
        ret: *mut GiNaC_ex,
        sym_lst: *mut GiNaC_lst,
        index: ::std::os::raw::c_uint,
    ) -> bool {
        GiNaC_archive_node_find_ex(self, name, ret, sym_lst, index)
    }
    #[inline]
    pub unsafe fn find_ex_by_loc(
        &self,
        loc: GiNaC_archive_node_archive_node_cit,
        ret: *mut GiNaC_ex,
        sym_lst: *mut GiNaC_lst,
    ) {
        GiNaC_archive_node_find_ex_by_loc(self, loc, ret, sym_lst)
    }
    #[inline]
    pub unsafe fn find_ex_node(
        &self,
        name: *const std_string,
        index: ::std::os::raw::c_uint,
    ) -> *const GiNaC_archive_node {
        GiNaC_archive_node_find_ex_node(self, name, index)
    }
    #[inline]
    pub unsafe fn get_properties(
        &self,
        v: *mut GiNaC_archive_node_propinfovector,
    ) {
        GiNaC_archive_node_get_properties(self, v)
    }
    #[inline]
    pub unsafe fn unarchive(&self, sym_lst: *mut GiNaC_lst) -> GiNaC_ex {
        GiNaC_archive_node_unarchive(self, sym_lst)
    }
    #[inline]
    pub unsafe fn has_same_ex_as(
        &self,
        other: *const GiNaC_archive_node,
    ) -> bool {
        GiNaC_archive_node_has_same_ex_as(self, other)
    }
    #[inline]
    pub unsafe fn forget(&mut self) {
        GiNaC_archive_node_forget(self)
    }
    #[inline]
    pub unsafe fn printraw(&self, os: *mut std_ostream) {
        GiNaC_archive_node_printraw(self, os)
    }
    #[inline]
    pub unsafe fn new(ar: *mut GiNaC_archive, expr: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_archive_node_archive_node(__bindgen_tmp.as_mut_ptr(), ar, expr);
        __bindgen_tmp.assume_init()
    }
}
pub type GiNaC_synthesize_func =
    ::std::option::Option<unsafe extern "C" fn() -> *mut GiNaC_basic>;
pub type GiNaC_unarchive_map_t = u8;
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_unarchive_table_t {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17unarchive_table_t8usecountE"]
    pub static mut GiNaC_unarchive_table_t_usecount: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17unarchive_table_t10unarch_mapB5cxx11E"]
    pub static mut GiNaC_unarchive_table_t_unarch_map:
        *mut GiNaC_unarchive_map_t;
}
#[test]
fn bindgen_test_layout_GiNaC_unarchive_table_t() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_unarchive_table_t>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_unarchive_table_t))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_unarchive_table_t>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_unarchive_table_t))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC17unarchive_table_t4findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_unarchive_table_t_find(
        this: *const GiNaC_unarchive_table_t,
        classname: *const std_string,
    ) -> GiNaC_synthesize_func;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17unarchive_table_t6insertERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFPNS_5basicEvE"]
    pub fn GiNaC_unarchive_table_t_insert(
        this: *mut GiNaC_unarchive_table_t,
        classname: *const std_string,
        f: GiNaC_synthesize_func,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17unarchive_table_tC1Ev"]
    pub fn GiNaC_unarchive_table_t_unarchive_table_t(
        this: *mut GiNaC_unarchive_table_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17unarchive_table_tD1Ev"]
    pub fn GiNaC_unarchive_table_t_unarchive_table_t_destructor(
        this: *mut GiNaC_unarchive_table_t,
    );
}
impl GiNaC_unarchive_table_t {
    #[inline]
    pub unsafe fn find(
        &self,
        classname: *const std_string,
    ) -> GiNaC_synthesize_func {
        GiNaC_unarchive_table_t_find(self, classname)
    }
    #[inline]
    pub unsafe fn insert(
        &mut self,
        classname: *const std_string,
        f: GiNaC_synthesize_func,
    ) {
        GiNaC_unarchive_table_t_insert(self, classname, f)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_unarchive_table_t_unarchive_table_t(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_unarchive_table_t_unarchive_table_t_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL21unarch_table_instanceE"]
    pub static mut GiNaC_unarch_table_instance: GiNaC_unarchive_table_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_archive {
    pub nodes: [u64; 3usize],
    pub exprs: [u64; 3usize],
    pub atoms: [u64; 3usize],
    pub inverse_atoms: [u64; 6usize],
    pub exprtable: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_archive_archived_ex {
    pub name: GiNaC_archive_atom,
    pub root: GiNaC_archive_node_id,
}
#[test]
fn bindgen_test_layout_GiNaC_archive_archived_ex() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_archive_archived_ex>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_archive_archived_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_archive_archived_ex>(),
        4usize,
        concat!("Alignment of ", stringify!(GiNaC_archive_archived_ex))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_archived_ex>())).name
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_archived_ex),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive_archived_ex>())).root
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive_archived_ex),
            "::",
            stringify!(root)
        )
    );
}
pub type GiNaC_archive_inv_at_cit = u8;
#[test]
fn bindgen_test_layout_GiNaC_archive() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_archive>(),
        168usize,
        concat!("Size of: ", stringify!(GiNaC_archive))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_archive>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_archive))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive>())).nodes as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive>())).exprs as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive),
            "::",
            stringify!(exprs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive>())).atoms as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive),
            "::",
            stringify!(atoms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive>())).inverse_atoms as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive),
            "::",
            stringify!(inverse_atoms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_archive>())).exprtable as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_archive),
            "::",
            stringify!(exprtable)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7archive10archive_exERKNS_2exEPKc"]
    pub fn GiNaC_archive_archive_ex(
        this: *mut GiNaC_archive,
        e: *const GiNaC_ex,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7archive12unarchive_exERKNS_9containerINSt7__cxx114listEEEPKc"]
    pub fn GiNaC_archive_unarchive_ex(
        this: *const GiNaC_archive,
        sym_lst: *const GiNaC_lst,
        name: *const ::std::os::raw::c_char,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7archive12unarchive_exERKNS_9containerINSt7__cxx114listEEEj"]
    pub fn GiNaC_archive_unarchive_ex1(
        this: *const GiNaC_archive,
        sym_lst: *const GiNaC_lst,
        index: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7archive12unarchive_exERKNS_9containerINSt7__cxx114listEEERNS2_12basic_stringIcSt11char_traitsIcESaIcEEEj"]
    pub fn GiNaC_archive_unarchive_ex2(
        this: *const GiNaC_archive,
        sym_lst: *const GiNaC_lst,
        name: *mut std_string,
        index: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7archive15num_expressionsEv"]
    pub fn GiNaC_archive_num_expressions(
        this: *const GiNaC_archive,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7archive12get_top_nodeEj"]
    pub fn GiNaC_archive_get_top_node(
        this: *const GiNaC_archive,
        index: ::std::os::raw::c_uint,
    ) -> *const GiNaC_archive_node;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7archive5clearEv"]
    pub fn GiNaC_archive_clear(this: *mut GiNaC_archive);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7archive8add_nodeERKNS_12archive_nodeE"]
    pub fn GiNaC_archive_add_node(
        this: *mut GiNaC_archive,
        n: *const GiNaC_archive_node,
    ) -> GiNaC_archive_node_id;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7archive8get_nodeEj"]
    pub fn GiNaC_archive_get_node(
        this: *mut GiNaC_archive,
        id: GiNaC_archive_node_id,
    ) -> *mut GiNaC_archive_node;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7archive6forgetEv"]
    pub fn GiNaC_archive_forget(this: *mut GiNaC_archive);
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7archive8printrawERSo"]
    pub fn GiNaC_archive_printraw(
        this: *const GiNaC_archive,
        os: *mut std_ostream,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7archive7atomizeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_archive_atomize(
        this: *const GiNaC_archive,
        s: *const std_string,
    ) -> GiNaC_archive_atom;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7archive9unatomizeB5cxx11Ej"]
    pub fn GiNaC_archive_unatomize(
        this: *const GiNaC_archive,
        id: GiNaC_archive_atom,
    ) -> *const std_string;
}
impl GiNaC_archive {
    #[inline]
    pub unsafe fn archive_ex(
        &mut self,
        e: *const GiNaC_ex,
        name: *const ::std::os::raw::c_char,
    ) {
        GiNaC_archive_archive_ex(self, e, name)
    }
    #[inline]
    pub unsafe fn unarchive_ex(
        &self,
        sym_lst: *const GiNaC_lst,
        name: *const ::std::os::raw::c_char,
    ) -> GiNaC_ex {
        GiNaC_archive_unarchive_ex(self, sym_lst, name)
    }
    #[inline]
    pub unsafe fn unarchive_ex1(
        &self,
        sym_lst: *const GiNaC_lst,
        index: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_archive_unarchive_ex1(self, sym_lst, index)
    }
    #[inline]
    pub unsafe fn unarchive_ex2(
        &self,
        sym_lst: *const GiNaC_lst,
        name: *mut std_string,
        index: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_archive_unarchive_ex2(self, sym_lst, name, index)
    }
    #[inline]
    pub unsafe fn num_expressions(&self) -> ::std::os::raw::c_uint {
        GiNaC_archive_num_expressions(self)
    }
    #[inline]
    pub unsafe fn get_top_node(
        &self,
        index: ::std::os::raw::c_uint,
    ) -> *const GiNaC_archive_node {
        GiNaC_archive_get_top_node(self, index)
    }
    #[inline]
    pub unsafe fn clear(&mut self) {
        GiNaC_archive_clear(self)
    }
    #[inline]
    pub unsafe fn add_node(
        &mut self,
        n: *const GiNaC_archive_node,
    ) -> GiNaC_archive_node_id {
        GiNaC_archive_add_node(self, n)
    }
    #[inline]
    pub unsafe fn get_node(
        &mut self,
        id: GiNaC_archive_node_id,
    ) -> *mut GiNaC_archive_node {
        GiNaC_archive_get_node(self, id)
    }
    #[inline]
    pub unsafe fn forget(&mut self) {
        GiNaC_archive_forget(self)
    }
    #[inline]
    pub unsafe fn printraw(&self, os: *mut std_ostream) {
        GiNaC_archive_printraw(self, os)
    }
    #[inline]
    pub unsafe fn atomize(&self, s: *const std_string) -> GiNaC_archive_atom {
        GiNaC_archive_atomize(self, s)
    }
    #[inline]
    pub unsafe fn unatomize(
        &self,
        id: GiNaC_archive_atom,
    ) -> *const std_string {
        GiNaC_archive_unatomize(self, id)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_container_storage {
    pub seq: GiNaC_container_storage_STLT,
}
pub type GiNaC_container_storage_STLT = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_container_init<STLT> {
    pub stlt: *mut STLT,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<STLT>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_container {
    pub _base: GiNaC_basic,
    pub _base_1: GiNaC_container_storage,
}
#[repr(C)]
pub struct GiNaC_container_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_container_visitor {
    pub vtable_: *const GiNaC_container_visitor__bindgen_vtable,
}
pub type GiNaC_container_inherited = GiNaC_basic;
pub type GiNaC_container_STLT = GiNaC_container_storage;
pub type GiNaC_container_const_iterator = GiNaC_container_STLT;
pub type GiNaC_container_const_reverse_iterator = GiNaC_container_STLT;
extern "C" {
    #[link_name = "\u{1}reg_info"]
    pub static mut GiNaC_container_reg_info: GiNaC_registered_class_info;
}
extern "C" {
    #[link_name = "\u{1}prepend"]
    pub fn GiNaC_container_prepend(
        this: *mut GiNaC_container,
        b: *const GiNaC_ex,
    ) -> *mut GiNaC_container;
}
extern "C" {
    #[link_name = "\u{1}append"]
    pub fn GiNaC_container_append(
        this: *mut GiNaC_container,
        b: *const GiNaC_ex,
    ) -> *mut GiNaC_container;
}
extern "C" {
    #[link_name = "\u{1}remove_first"]
    pub fn GiNaC_container_remove_first(
        this: *mut GiNaC_container,
    ) -> *mut GiNaC_container;
}
extern "C" {
    #[link_name = "\u{1}remove_last"]
    pub fn GiNaC_container_remove_last(
        this: *mut GiNaC_container,
    ) -> *mut GiNaC_container;
}
extern "C" {
    #[link_name = "\u{1}remove_all"]
    pub fn GiNaC_container_remove_all(
        this: *mut GiNaC_container,
    ) -> *mut GiNaC_container;
}
extern "C" {
    #[link_name = "\u{1}sort"]
    pub fn GiNaC_container_sort(
        this: *mut GiNaC_container,
    ) -> *mut GiNaC_container;
}
extern "C" {
    #[link_name = "\u{1}unique"]
    pub fn GiNaC_container_unique(
        this: *mut GiNaC_container,
    ) -> *mut GiNaC_container;
}
extern "C" {
    #[link_name = "\u{1}do_print"]
    pub fn GiNaC_container_do_print(
        this: *const GiNaC_container,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}do_print_tree"]
    pub fn GiNaC_container_do_print_tree(
        this: *const GiNaC_container,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}do_print_python"]
    pub fn GiNaC_container_do_print_python(
        this: *const GiNaC_container,
        c: *const GiNaC_print_python,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}do_print_python_repr"]
    pub fn GiNaC_container_do_print_python_repr(
        this: *const GiNaC_container,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}subschildren"]
    pub fn GiNaC_container_subschildren(
        this: *const GiNaC_container,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_container_STLT;
}
impl GiNaC_container {
    #[inline]
    pub unsafe fn prepend(
        &mut self,
        b: *const GiNaC_ex,
    ) -> *mut GiNaC_container {
        GiNaC_container_prepend(self, b)
    }
    #[inline]
    pub unsafe fn append(
        &mut self,
        b: *const GiNaC_ex,
    ) -> *mut GiNaC_container {
        GiNaC_container_append(self, b)
    }
    #[inline]
    pub unsafe fn remove_first(&mut self) -> *mut GiNaC_container {
        GiNaC_container_remove_first(self)
    }
    #[inline]
    pub unsafe fn remove_last(&mut self) -> *mut GiNaC_container {
        GiNaC_container_remove_last(self)
    }
    #[inline]
    pub unsafe fn remove_all(&mut self) -> *mut GiNaC_container {
        GiNaC_container_remove_all(self)
    }
    #[inline]
    pub unsafe fn sort(&mut self) -> *mut GiNaC_container {
        GiNaC_container_sort(self)
    }
    #[inline]
    pub unsafe fn unique(&mut self) -> *mut GiNaC_container {
        GiNaC_container_unique(self)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_container_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_container_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python(
        &self,
        c: *const GiNaC_print_python,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_container_do_print_python(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_container_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn subschildren(
        &self,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_container_STLT {
        GiNaC_container_subschildren(self, m, options)
    }
}
extern "C" {
    #[link_name = "\u{1}compare_same_type"]
    pub fn GiNaC_container_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}op"]
    pub fn GiNaC_container_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}let_op"]
    pub fn GiNaC_container_let_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}subs"]
    pub fn GiNaC_container_subs(
        this: *mut ::std::os::raw::c_void,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}is_equal_same_type"]
    pub fn GiNaC_container_is_equal_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}printseq"]
    pub fn GiNaC_container_printseq(
        this: *mut ::std::os::raw::c_void,
        c: *const GiNaC_print_context,
        openbracket: ::std::os::raw::c_char,
        delim: ::std::os::raw::c_char,
        closebracket: ::std::os::raw::c_char,
        this_precedence: ::std::os::raw::c_uint,
        upper_precedence: ::std::os::raw::c_uint,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_lst_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14lst_unarchiver8usecountE"]
    pub static mut GiNaC_lst_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_lst_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_lst_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_lst_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_lst_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_lst_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14lst_unarchiver6createEv"]
    pub fn GiNaC_lst_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14lst_unarchiverC1Ev"]
    pub fn GiNaC_lst_unarchiver_lst_unarchiver(this: *mut GiNaC_lst_unarchiver);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14lst_unarchiverD1Ev"]
    pub fn GiNaC_lst_unarchiver_lst_unarchiver_destructor(
        this: *mut GiNaC_lst_unarchiver,
    );
}
impl GiNaC_lst_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_lst_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_lst_unarchiver_lst_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_lst_unarchiver_lst_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL23lst_unarchiver_instanceE"]
    pub static mut GiNaC_lst_unarchiver_instance: GiNaC_lst_unarchiver;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_gcd_options {
    pub _address: u8,
}
pub const GiNaC_gcd_options_no_heur_gcd: GiNaC_gcd_options__bindgen_ty_1 = 2;
pub const GiNaC_gcd_options_no_part_factored: GiNaC_gcd_options__bindgen_ty_1 =
    4;
pub const GiNaC_gcd_options_use_sr_gcd: GiNaC_gcd_options__bindgen_ty_1 = 8;
pub type GiNaC_gcd_options__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_GiNaC_gcd_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_gcd_options>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_gcd_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_gcd_options>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_gcd_options))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3quoERKNS_2exES2_S2_b"]
    pub fn GiNaC_quo(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        x: *const GiNaC_ex,
        check_args: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3remERKNS_2exES2_S2_b"]
    pub fn GiNaC_rem(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        x: *const GiNaC_ex,
        check_args: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15decomp_rationalERKNS_2exES2_"]
    pub fn GiNaC_decomp_rational(
        a: *const GiNaC_ex,
        x: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4premERKNS_2exES2_S2_b"]
    pub fn GiNaC_prem(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        x: *const GiNaC_ex,
        check_args: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5spremERKNS_2exES2_S2_b"]
    pub fn GiNaC_sprem(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        x: *const GiNaC_ex,
        check_args: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6divideERKNS_2exES2_RS0_b"]
    pub fn GiNaC_divide(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        q: *mut GiNaC_ex,
        check_args: bool,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3gcdERKNS_2exES2_PS0_S3_bj"]
    pub fn GiNaC_gcd(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        ca: *mut GiNaC_ex,
        cb: *mut GiNaC_ex,
        check_args: bool,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3lcmERKNS_2exES2_b"]
    pub fn GiNaC_lcm(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        check_args: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7sqrfreeERKNS_2exERKNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_sqrfree(a: *const GiNaC_ex, l: *const GiNaC_lst) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15sqrfree_parfracERKNS_2exERKNS_6symbolE"]
    pub fn GiNaC_sqrfree_parfrac(
        a: *const GiNaC_ex,
        x: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22collect_common_factorsERKNS_2exE"]
    pub fn GiNaC_collect_common_factors(e: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9resultantERKNS_2exES2_S2_"]
    pub fn GiNaC_resultant(
        e1: *const GiNaC_ex,
        e2: *const GiNaC_ex,
        s: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
pub type GiNaC_evalffunctype =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_constant {
    pub _base: GiNaC_basic,
    pub name: std_string,
    pub TeX_name: std_string,
    pub ef: GiNaC_evalffunctype,
    pub number: GiNaC_ex,
    pub serial: ::std::os::raw::c_uint,
    pub domain: ::std::os::raw::c_uint,
}
#[repr(C)]
pub struct GiNaC_constant_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_constant_visitor {
    pub vtable_: *const GiNaC_constant_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_constant_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_constant_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_constant_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_constant_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_constant_visitor))
    );
}
pub type GiNaC_constant_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8constant8reg_infoE"]
    pub static mut GiNaC_constant_reg_info: GiNaC_registered_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8constant11next_serialE"]
    pub static mut GiNaC_constant_next_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_constant() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_constant>(),
        112usize,
        concat!("Size of: ", stringify!(GiNaC_constant))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_constant>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_constant))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_constant>())).name as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_constant),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_constant>())).TeX_name as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_constant),
            "::",
            stringify!(TeX_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_constant>())).ef as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_constant),
            "::",
            stringify!(ef)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_constant>())).number as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_constant),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_constant>())).serial as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_constant),
            "::",
            stringify!(serial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_constant>())).domain as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_constant),
            "::",
            stringify!(domain)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_constant_do_print(
        this: *const GiNaC_constant,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_constant_do_print_tree(
        this: *const GiNaC_constant,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_constant_do_print_latex(
        this: *const GiNaC_constant,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_constant_do_print_python_repr(
        this: *const GiNaC_constant,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8constantC1Ev"]
    pub fn GiNaC_constant_constant(this: *mut GiNaC_constant);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8constantC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFNS_2exEvES8_j"]
    pub fn GiNaC_constant_constant1(
        this: *mut GiNaC_constant,
        initname: *const std_string,
        efun: GiNaC_evalffunctype,
        texname: *const std_string,
        domain: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8constantC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7numericES8_j"]
    pub fn GiNaC_constant_constant2(
        this: *mut GiNaC_constant,
        initname: *const std_string,
        initnumber: *const GiNaC_numeric,
        texname: *const std_string,
        domain: ::std::os::raw::c_uint,
    );
}
impl GiNaC_constant {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_constant_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_constant_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_constant_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_constant_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_constant_constant(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        initname: *const std_string,
        efun: GiNaC_evalffunctype,
        texname: *const std_string,
        domain: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_constant_constant1(
            __bindgen_tmp.as_mut_ptr(),
            initname,
            efun,
            texname,
            domain,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        initname: *const std_string,
        initnumber: *const GiNaC_numeric,
        texname: *const std_string,
        domain: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_constant_constant2(
            __bindgen_tmp.as_mut_ptr(),
            initname,
            initnumber,
            texname,
            domain,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_constant_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant4infoEj"]
    pub fn GiNaC_constant_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant5evalfEv"]
    pub fn GiNaC_constant_evalf(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant13is_polynomialERKNS_2exE"]
    pub fn GiNaC_constant_is_polynomial(
        this: *mut ::std::os::raw::c_void,
        var: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant9conjugateEv"]
    pub fn GiNaC_constant_conjugate(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant9real_partEv"]
    pub fn GiNaC_constant_real_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant9imag_partEv"]
    pub fn GiNaC_constant_imag_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_constant_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8constant12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_constant_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant10derivativeERKNS_6symbolE"]
    pub fn GiNaC_constant_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant18is_equal_same_typeERKNS_5basicE"]
    pub fn GiNaC_constant_is_equal_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8constant8calchashEv"]
    pub fn GiNaC_constant_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_constant_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19constant_unarchiver8usecountE"]
    pub static mut GiNaC_constant_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_constant_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_constant_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_constant_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_constant_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_constant_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19constant_unarchiver6createEv"]
    pub fn GiNaC_constant_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19constant_unarchiverC1Ev"]
    pub fn GiNaC_constant_unarchiver_constant_unarchiver(
        this: *mut GiNaC_constant_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19constant_unarchiverD1Ev"]
    pub fn GiNaC_constant_unarchiver_constant_unarchiver_destructor(
        this: *mut GiNaC_constant_unarchiver,
    );
}
impl GiNaC_constant_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_constant_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_constant_unarchiver_constant_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_constant_unarchiver_constant_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL28constant_unarchiver_instanceE"]
    pub static mut GiNaC_constant_unarchiver_instance:
        GiNaC_constant_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC2PiE"]
    pub static GiNaC_Pi: GiNaC_constant;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7CatalanE"]
    pub static GiNaC_Catalan: GiNaC_constant;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5EulerE"]
    pub static GiNaC_Euler: GiNaC_constant;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_fail {
    pub _base: GiNaC_basic,
}
#[repr(C)]
pub struct GiNaC_fail_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_fail_visitor {
    pub vtable_: *const GiNaC_fail_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_fail_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_fail_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_fail_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_fail_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_fail_visitor))
    );
}
pub type GiNaC_fail_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4fail8reg_infoE"]
    pub static mut GiNaC_fail_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_fail() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_fail>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_fail))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_fail>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_fail))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4fail8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_fail_do_print(
        this: *const GiNaC_fail,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4failC1Ev"]
    pub fn GiNaC_fail_fail(this: *mut GiNaC_fail);
}
impl GiNaC_fail {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_fail_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_fail_fail(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4fail17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_fail_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_fail_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15fail_unarchiver8usecountE"]
    pub static mut GiNaC_fail_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_fail_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_fail_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_fail_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_fail_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_fail_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15fail_unarchiver6createEv"]
    pub fn GiNaC_fail_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15fail_unarchiverC1Ev"]
    pub fn GiNaC_fail_unarchiver_fail_unarchiver(
        this: *mut GiNaC_fail_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15fail_unarchiverD1Ev"]
    pub fn GiNaC_fail_unarchiver_fail_unarchiver_destructor(
        this: *mut GiNaC_fail_unarchiver,
    );
}
impl GiNaC_fail_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_fail_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_fail_unarchiver_fail_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_fail_unarchiver_fail_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL24fail_unarchiver_instanceE"]
    pub static mut GiNaC_fail_unarchiver_instance: GiNaC_fail_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_integral {
    pub _base: GiNaC_basic,
    pub x: GiNaC_ex,
    pub a: GiNaC_ex,
    pub b: GiNaC_ex,
    pub f: GiNaC_ex,
}
#[repr(C)]
pub struct GiNaC_integral_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_integral_visitor {
    pub vtable_: *const GiNaC_integral_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_integral_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_integral_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_integral_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_integral_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_integral_visitor))
    );
}
pub type GiNaC_integral_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8integral8reg_infoE"]
    pub static mut GiNaC_integral_reg_info: GiNaC_registered_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8integral21max_integration_levelE"]
    pub static mut GiNaC_integral_max_integration_level: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8integral26relative_integration_errorE"]
    pub static mut GiNaC_integral_relative_integration_error: GiNaC_ex;
}
#[test]
fn bindgen_test_layout_GiNaC_integral() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_integral>(),
        56usize,
        concat!("Size of: ", stringify!(GiNaC_integral))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_integral>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_integral))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_integral>())).x as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_integral),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_integral>())).a as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_integral),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_integral>())).b as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_integral),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_integral>())).f as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_integral),
            "::",
            stringify!(f)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_integral_do_print(
        this: *const GiNaC_integral,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_integral_do_print_latex(
        this: *const GiNaC_integral,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8integralC1Ev"]
    pub fn GiNaC_integral_integral(this: *mut GiNaC_integral);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8integralC1ERKNS_2exES3_S3_S3_"]
    pub fn GiNaC_integral_integral1(
        this: *mut GiNaC_integral,
        x_: *const GiNaC_ex,
        a_: *const GiNaC_ex,
        b_: *const GiNaC_ex,
        f_: *const GiNaC_ex,
    );
}
impl GiNaC_integral {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_integral_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_integral_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_integral_integral(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        x_: *const GiNaC_ex,
        a_: *const GiNaC_ex,
        b_: *const GiNaC_ex,
        f_: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_integral_integral1(__bindgen_tmp.as_mut_ptr(), x_, a_, b_, f_);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_integral_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral4evalEv"]
    pub fn GiNaC_integral_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral5evalfEv"]
    pub fn GiNaC_integral_evalf(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral6degreeERKNS_2exE"]
    pub fn GiNaC_integral_degree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral7ldegreeERKNS_2exE"]
    pub fn GiNaC_integral_ldegree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral10eval_ncmulERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_integral_eval_ncmul(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral4nopsEv"]
    pub fn GiNaC_integral_nops(this: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral2opEm"]
    pub fn GiNaC_integral_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8integral6let_opEm"]
    pub fn GiNaC_integral_let_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral6expandEj"]
    pub fn GiNaC_integral_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral16get_free_indicesEv"]
    pub fn GiNaC_integral_get_free_indices(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral11return_typeEv"]
    pub fn GiNaC_integral_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral17return_type_tinfoEv"]
    pub fn GiNaC_integral_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral9conjugateEv"]
    pub fn GiNaC_integral_conjugate(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral10eval_integEv"]
    pub fn GiNaC_integral_eval_integ(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_integral_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8integral12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_integral_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral10derivativeERKNS_6symbolE"]
    pub fn GiNaC_integral_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8integral6seriesERKNS_10relationalEij"]
    pub fn GiNaC_integral_series(
        this: *mut ::std::os::raw::c_void,
        r: *const GiNaC_relational,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_integral_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19integral_unarchiver8usecountE"]
    pub static mut GiNaC_integral_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_integral_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_integral_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_integral_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_integral_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_integral_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19integral_unarchiver6createEv"]
    pub fn GiNaC_integral_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19integral_unarchiverC1Ev"]
    pub fn GiNaC_integral_unarchiver_integral_unarchiver(
        this: *mut GiNaC_integral_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19integral_unarchiverD1Ev"]
    pub fn GiNaC_integral_unarchiver_integral_unarchiver_destructor(
        this: *mut GiNaC_integral_unarchiver,
    );
}
impl GiNaC_integral_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_integral_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_integral_unarchiver_integral_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_integral_unarchiver_integral_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL28integral_unarchiver_instanceE"]
    pub static mut GiNaC_integral_unarchiver_instance:
        GiNaC_integral_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15adaptivesimpsonERKNS_2exES2_S2_S2_S2_"]
    pub fn GiNaC_adaptivesimpson(
        x: *const GiNaC_ex,
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        f: *const GiNaC_ex,
        error: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_matrix_init<It> {
    pub iter: It,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<It>>,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_matrix {
    pub _base: GiNaC_basic,
    pub row: ::std::os::raw::c_uint,
    pub col: ::std::os::raw::c_uint,
    pub m: GiNaC_exvector,
}
#[repr(C)]
pub struct GiNaC_matrix_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_matrix_visitor {
    pub vtable_: *const GiNaC_matrix_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_matrix_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_matrix_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_matrix_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_matrix_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_matrix_visitor))
    );
}
pub type GiNaC_matrix_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrix8reg_infoE"]
    pub static mut GiNaC_matrix_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_matrix() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_matrix>(),
        56usize,
        concat!("Size of: ", stringify!(GiNaC_matrix))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_matrix>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_matrix))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_matrix>())).row as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_matrix),
            "::",
            stringify!(row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_matrix>())).col as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_matrix),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_matrix>())).m as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_matrix),
            "::",
            stringify!(m)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix3addERKS0_"]
    pub fn GiNaC_matrix_add(
        this: *const GiNaC_matrix,
        other: *const GiNaC_matrix,
    ) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix3subERKS0_"]
    pub fn GiNaC_matrix_sub(
        this: *const GiNaC_matrix,
        other: *const GiNaC_matrix,
    ) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix3mulERKS0_"]
    pub fn GiNaC_matrix_mul(
        this: *const GiNaC_matrix,
        other: *const GiNaC_matrix,
    ) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix3mulERKNS_7numericE"]
    pub fn GiNaC_matrix_mul1(
        this: *const GiNaC_matrix,
        other: *const GiNaC_numeric,
    ) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix10mul_scalarERKNS_2exE"]
    pub fn GiNaC_matrix_mul_scalar(
        this: *const GiNaC_matrix,
        other: *const GiNaC_ex,
    ) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix3powERKNS_2exE"]
    pub fn GiNaC_matrix_pow(
        this: *const GiNaC_matrix,
        expn: *const GiNaC_ex,
    ) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix9transposeEv"]
    pub fn GiNaC_matrix_transpose(this: *const GiNaC_matrix) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix11determinantEj"]
    pub fn GiNaC_matrix_determinant(
        this: *const GiNaC_matrix,
        algo: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix5traceEv"]
    pub fn GiNaC_matrix_trace(this: *const GiNaC_matrix) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix8charpolyERKNS_2exE"]
    pub fn GiNaC_matrix_charpoly(
        this: *const GiNaC_matrix,
        lambda: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix7inverseEv"]
    pub fn GiNaC_matrix_inverse(this: *const GiNaC_matrix) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix7inverseEj"]
    pub fn GiNaC_matrix_inverse1(
        this: *const GiNaC_matrix,
        algo: ::std::os::raw::c_uint,
    ) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix5solveERKS0_S2_j"]
    pub fn GiNaC_matrix_solve(
        this: *const GiNaC_matrix,
        vars: *const GiNaC_matrix,
        rhs: *const GiNaC_matrix,
        algo: ::std::os::raw::c_uint,
    ) -> GiNaC_matrix;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix4rankEv"]
    pub fn GiNaC_matrix_rank(
        this: *const GiNaC_matrix,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix4rankEj"]
    pub fn GiNaC_matrix_rank1(
        this: *const GiNaC_matrix,
        solve_algo: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix14is_zero_matrixEv"]
    pub fn GiNaC_matrix_is_zero_matrix(this: *const GiNaC_matrix) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix17determinant_minorEv"]
    pub fn GiNaC_matrix_determinant_minor(
        this: *const GiNaC_matrix,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrix12echelon_formEji"]
    pub fn GiNaC_matrix_echelon_form(
        this: *mut GiNaC_matrix,
        algo: ::std::os::raw::c_uint,
        n: ::std::os::raw::c_int,
    ) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrix17gauss_eliminationEb"]
    pub fn GiNaC_matrix_gauss_elimination(
        this: *mut GiNaC_matrix,
        det: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrix25division_free_eliminationEb"]
    pub fn GiNaC_matrix_division_free_elimination(
        this: *mut GiNaC_matrix,
        det: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrix25fraction_free_eliminationEb"]
    pub fn GiNaC_matrix_fraction_free_elimination(
        this: *mut GiNaC_matrix,
        det: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrix21markowitz_eliminationEj"]
    pub fn GiNaC_matrix_markowitz_elimination(
        this: *mut GiNaC_matrix,
        n: ::std::os::raw::c_uint,
    ) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrix5pivotEjjb"]
    pub fn GiNaC_matrix_pivot(
        this: *mut GiNaC_matrix,
        ro: ::std::os::raw::c_uint,
        co: ::std::os::raw::c_uint,
        symbolic: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix14print_elementsERKNS_13print_contextEPKcS5_S5_S5_"]
    pub fn GiNaC_matrix_print_elements(
        this: *const GiNaC_matrix,
        c: *const GiNaC_print_context,
        row_start: *const ::std::os::raw::c_char,
        row_end: *const ::std::os::raw::c_char,
        row_sep: *const ::std::os::raw::c_char,
        col_sep: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_matrix_do_print(
        this: *const GiNaC_matrix,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_matrix_do_print_latex(
        this: *const GiNaC_matrix,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_matrix_do_print_python_repr(
        this: *const GiNaC_matrix,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrixC1Ev"]
    pub fn GiNaC_matrix_matrix(this: *mut GiNaC_matrix);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrixC1Ejj"]
    pub fn GiNaC_matrix_matrix1(
        this: *mut GiNaC_matrix,
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrixC1EjjRKNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_matrix_matrix2(
        this: *mut GiNaC_matrix,
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
        l: *const GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrixC1ESt16initializer_listIS1_INS_2exEEE"]
    pub fn GiNaC_matrix_matrix3(this: *mut GiNaC_matrix, l: [u64; 2usize]);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrixC1EjjRKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_matrix_matrix4(
        this: *mut GiNaC_matrix,
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
        m2: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrixC1EjjOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_matrix_matrix5(
        this: *mut GiNaC_matrix,
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
        m2: *mut GiNaC_exvector,
    );
}
impl GiNaC_matrix {
    #[inline]
    pub unsafe fn add(&self, other: *const GiNaC_matrix) -> GiNaC_matrix {
        GiNaC_matrix_add(self, other)
    }
    #[inline]
    pub unsafe fn sub(&self, other: *const GiNaC_matrix) -> GiNaC_matrix {
        GiNaC_matrix_sub(self, other)
    }
    #[inline]
    pub unsafe fn mul(&self, other: *const GiNaC_matrix) -> GiNaC_matrix {
        GiNaC_matrix_mul(self, other)
    }
    #[inline]
    pub unsafe fn mul1(&self, other: *const GiNaC_numeric) -> GiNaC_matrix {
        GiNaC_matrix_mul1(self, other)
    }
    #[inline]
    pub unsafe fn mul_scalar(&self, other: *const GiNaC_ex) -> GiNaC_matrix {
        GiNaC_matrix_mul_scalar(self, other)
    }
    #[inline]
    pub unsafe fn pow(&self, expn: *const GiNaC_ex) -> GiNaC_matrix {
        GiNaC_matrix_pow(self, expn)
    }
    #[inline]
    pub unsafe fn transpose(&self) -> GiNaC_matrix {
        GiNaC_matrix_transpose(self)
    }
    #[inline]
    pub unsafe fn determinant(&self, algo: ::std::os::raw::c_uint) -> GiNaC_ex {
        GiNaC_matrix_determinant(self, algo)
    }
    #[inline]
    pub unsafe fn trace(&self) -> GiNaC_ex {
        GiNaC_matrix_trace(self)
    }
    #[inline]
    pub unsafe fn charpoly(&self, lambda: *const GiNaC_ex) -> GiNaC_ex {
        GiNaC_matrix_charpoly(self, lambda)
    }
    #[inline]
    pub unsafe fn inverse(&self) -> GiNaC_matrix {
        GiNaC_matrix_inverse(self)
    }
    #[inline]
    pub unsafe fn inverse1(
        &self,
        algo: ::std::os::raw::c_uint,
    ) -> GiNaC_matrix {
        GiNaC_matrix_inverse1(self, algo)
    }
    #[inline]
    pub unsafe fn solve(
        &self,
        vars: *const GiNaC_matrix,
        rhs: *const GiNaC_matrix,
        algo: ::std::os::raw::c_uint,
    ) -> GiNaC_matrix {
        GiNaC_matrix_solve(self, vars, rhs, algo)
    }
    #[inline]
    pub unsafe fn rank(&self) -> ::std::os::raw::c_uint {
        GiNaC_matrix_rank(self)
    }
    #[inline]
    pub unsafe fn rank1(
        &self,
        solve_algo: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        GiNaC_matrix_rank1(self, solve_algo)
    }
    #[inline]
    pub unsafe fn is_zero_matrix(&self) -> bool {
        GiNaC_matrix_is_zero_matrix(self)
    }
    #[inline]
    pub unsafe fn determinant_minor(&self) -> GiNaC_ex {
        GiNaC_matrix_determinant_minor(self)
    }
    #[inline]
    pub unsafe fn echelon_form(
        &mut self,
        algo: ::std::os::raw::c_uint,
        n: ::std::os::raw::c_int,
    ) -> u8 {
        GiNaC_matrix_echelon_form(self, algo, n)
    }
    #[inline]
    pub unsafe fn gauss_elimination(
        &mut self,
        det: bool,
    ) -> ::std::os::raw::c_int {
        GiNaC_matrix_gauss_elimination(self, det)
    }
    #[inline]
    pub unsafe fn division_free_elimination(
        &mut self,
        det: bool,
    ) -> ::std::os::raw::c_int {
        GiNaC_matrix_division_free_elimination(self, det)
    }
    #[inline]
    pub unsafe fn fraction_free_elimination(
        &mut self,
        det: bool,
    ) -> ::std::os::raw::c_int {
        GiNaC_matrix_fraction_free_elimination(self, det)
    }
    #[inline]
    pub unsafe fn markowitz_elimination(
        &mut self,
        n: ::std::os::raw::c_uint,
    ) -> u8 {
        GiNaC_matrix_markowitz_elimination(self, n)
    }
    #[inline]
    pub unsafe fn pivot(
        &mut self,
        ro: ::std::os::raw::c_uint,
        co: ::std::os::raw::c_uint,
        symbolic: bool,
    ) -> ::std::os::raw::c_int {
        GiNaC_matrix_pivot(self, ro, co, symbolic)
    }
    #[inline]
    pub unsafe fn print_elements(
        &self,
        c: *const GiNaC_print_context,
        row_start: *const ::std::os::raw::c_char,
        row_end: *const ::std::os::raw::c_char,
        row_sep: *const ::std::os::raw::c_char,
        col_sep: *const ::std::os::raw::c_char,
    ) {
        GiNaC_matrix_print_elements(
            self, c, row_start, row_end, row_sep, col_sep,
        )
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_matrix_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_matrix_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_matrix_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_matrix_matrix(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_matrix_matrix1(__bindgen_tmp.as_mut_ptr(), r, c);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
        l: *const GiNaC_lst,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_matrix_matrix2(__bindgen_tmp.as_mut_ptr(), r, c, l);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(l: [u64; 2usize]) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_matrix_matrix3(__bindgen_tmp.as_mut_ptr(), l);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
        m2: *const GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_matrix_matrix4(__bindgen_tmp.as_mut_ptr(), r, c, m2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
        m2: *mut GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_matrix_matrix5(__bindgen_tmp.as_mut_ptr(), r, c, m2);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_matrix_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix4nopsEv"]
    pub fn GiNaC_matrix_nops(this: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix2opEm"]
    pub fn GiNaC_matrix_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrix6let_opEm"]
    pub fn GiNaC_matrix_let_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix4subsERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_matrix_subs(
        this: *mut ::std::os::raw::c_void,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix12eval_indexedERKNS_5basicE"]
    pub fn GiNaC_matrix_eval_indexed(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_basic,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix11add_indexedERKNS_2exES3_"]
    pub fn GiNaC_matrix_add_indexed(
        this: *mut ::std::os::raw::c_void,
        self_: *const GiNaC_ex,
        other: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix18scalar_mul_indexedERKNS_2exERKNS_7numericE"]
    pub fn GiNaC_matrix_scalar_mul_indexed(
        this: *mut ::std::os::raw::c_void,
        self_: *const GiNaC_ex,
        other: *const GiNaC_numeric,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_matrix_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix9conjugateEv"]
    pub fn GiNaC_matrix_conjugate(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix9real_partEv"]
    pub fn GiNaC_matrix_real_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix9imag_partEv"]
    pub fn GiNaC_matrix_imag_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_matrix_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6matrix12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_matrix_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6matrix15match_same_typeERKNS_5basicE"]
    pub fn GiNaC_matrix_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_matrix_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17matrix_unarchiver8usecountE"]
    pub static mut GiNaC_matrix_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_matrix_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_matrix_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_matrix_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_matrix_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_matrix_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17matrix_unarchiver6createEv"]
    pub fn GiNaC_matrix_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17matrix_unarchiverC1Ev"]
    pub fn GiNaC_matrix_unarchiver_matrix_unarchiver(
        this: *mut GiNaC_matrix_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17matrix_unarchiverD1Ev"]
    pub fn GiNaC_matrix_unarchiver_matrix_unarchiver_destructor(
        this: *mut GiNaC_matrix_unarchiver,
    );
}
impl GiNaC_matrix_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_matrix_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_matrix_unarchiver_matrix_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_matrix_unarchiver_matrix_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL26matrix_unarchiver_instanceE"]
    pub static mut GiNaC_matrix_unarchiver_instance: GiNaC_matrix_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13lst_to_matrixERKNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_lst_to_matrix(l: *const GiNaC_lst) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11diag_matrixERKNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_diag_matrix(l: *const GiNaC_lst) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11diag_matrixESt16initializer_listINS_2exEE"]
    pub fn GiNaC_diag_matrix1(l: [u64; 2usize]) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11unit_matrixEjj"]
    pub fn GiNaC_unit_matrix(
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15symbolic_matrixEjjRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_"]
    pub fn GiNaC_symbolic_matrix(
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
        base_name: *const std_string,
        tex_base_name: *const std_string,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14reduced_matrixERKNS_6matrixEjj"]
    pub fn GiNaC_reduced_matrix(
        m: *const GiNaC_matrix,
        r: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10sub_matrixERKNS_6matrixEjjjj"]
    pub fn GiNaC_sub_matrix(
        m: *const GiNaC_matrix,
        r: ::std::os::raw::c_uint,
        nr: ::std::os::raw::c_uint,
        c: ::std::os::raw::c_uint,
        nc: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
pub type GiNaC_digits_changed_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_long)>;
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC__numeric_digits {
    pub digits: ::std::os::raw::c_long,
    pub callbacklist: [u64; 3usize],
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15_numeric_digits8too_lateE"]
    pub static mut GiNaC__numeric_digits_too_late: bool;
}
#[test]
fn bindgen_test_layout_GiNaC__numeric_digits() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC__numeric_digits>(),
        32usize,
        concat!("Size of: ", stringify!(GiNaC__numeric_digits))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC__numeric_digits>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC__numeric_digits))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC__numeric_digits>())).digits as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC__numeric_digits),
            "::",
            stringify!(digits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC__numeric_digits>())).callbacklist
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC__numeric_digits),
            "::",
            stringify!(callbacklist)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC15_numeric_digits5printERSo"]
    pub fn GiNaC__numeric_digits_print(
        this: *const GiNaC__numeric_digits,
        os: *mut std_ostream,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15_numeric_digits12add_callbackEPFvlE"]
    pub fn GiNaC__numeric_digits_add_callback(
        this: *mut GiNaC__numeric_digits,
        callback: GiNaC_digits_changed_callback,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15_numeric_digitsC1Ev"]
    pub fn GiNaC__numeric_digits__numeric_digits(
        this: *mut GiNaC__numeric_digits,
    );
}
impl GiNaC__numeric_digits {
    #[inline]
    pub unsafe fn print(&self, os: *mut std_ostream) {
        GiNaC__numeric_digits_print(self, os)
    }
    #[inline]
    pub unsafe fn add_callback(
        &mut self,
        callback: GiNaC_digits_changed_callback,
    ) {
        GiNaC__numeric_digits_add_callback(self, callback)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC__numeric_digits__numeric_digits(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pole_error {
    pub _base: std_domain_error,
    pub deg: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GiNaC_pole_error() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_pole_error>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_pole_error))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_pole_error>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_pole_error))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_pole_error>())).deg as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_pole_error),
            "::",
            stringify!(deg)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10pole_error6degreeEv"]
    pub fn GiNaC_pole_error_degree(
        this: *const GiNaC_pole_error,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10pole_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"]
    pub fn GiNaC_pole_error_pole_error(
        this: *mut GiNaC_pole_error,
        what_arg: *const std_string,
        degree: ::std::os::raw::c_int,
    );
}
impl GiNaC_pole_error {
    #[inline]
    pub unsafe fn degree(&self) -> ::std::os::raw::c_int {
        GiNaC_pole_error_degree(self)
    }
    #[inline]
    pub unsafe fn new(
        what_arg: *const std_string,
        degree: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_pole_error_pole_error(
            __bindgen_tmp.as_mut_ptr(),
            what_arg,
            degree,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct GiNaC_numeric {
    pub _base: GiNaC_basic,
    pub value: cln_cl_N,
}
#[repr(C)]
pub struct GiNaC_numeric_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_numeric_visitor {
    pub vtable_: *const GiNaC_numeric_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_numeric_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_numeric_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_numeric_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_numeric_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_numeric_visitor))
    );
}
pub type GiNaC_numeric_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numeric8reg_infoE"]
    pub static mut GiNaC_numeric_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_numeric() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_numeric>(),
        32usize,
        concat!("Size of: ", stringify!(GiNaC_numeric))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_numeric>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_numeric))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_numeric>())).value as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_numeric),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric3addERKS0_"]
    pub fn GiNaC_numeric_add(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric3subERKS0_"]
    pub fn GiNaC_numeric_sub(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric3mulERKS0_"]
    pub fn GiNaC_numeric_mul(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric3divERKS0_"]
    pub fn GiNaC_numeric_div(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric5powerERKS0_"]
    pub fn GiNaC_numeric_power(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7add_dynERKS0_"]
    pub fn GiNaC_numeric_add_dyn(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7sub_dynERKS0_"]
    pub fn GiNaC_numeric_sub_dyn(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7mul_dynERKS0_"]
    pub fn GiNaC_numeric_mul_dyn(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7div_dynERKS0_"]
    pub fn GiNaC_numeric_div_dyn(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric9power_dynERKS0_"]
    pub fn GiNaC_numeric_power_dyn(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7inverseEv"]
    pub fn GiNaC_numeric_inverse(this: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric4stepEv"]
    pub fn GiNaC_numeric_step(this: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric4csgnEv"]
    pub fn GiNaC_numeric_csgn(
        this: *const GiNaC_numeric,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7compareERKS0_"]
    pub fn GiNaC_numeric_compare(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric8is_equalERKS0_"]
    pub fn GiNaC_numeric_is_equal(
        this: *const GiNaC_numeric,
        other: *const GiNaC_numeric,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7is_zeroEv"]
    pub fn GiNaC_numeric_is_zero(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric11is_positiveEv"]
    pub fn GiNaC_numeric_is_positive(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric11is_negativeEv"]
    pub fn GiNaC_numeric_is_negative(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric10is_integerEv"]
    pub fn GiNaC_numeric_is_integer(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric14is_pos_integerEv"]
    pub fn GiNaC_numeric_is_pos_integer(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric17is_nonneg_integerEv"]
    pub fn GiNaC_numeric_is_nonneg_integer(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7is_evenEv"]
    pub fn GiNaC_numeric_is_even(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric6is_oddEv"]
    pub fn GiNaC_numeric_is_odd(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric8is_primeEv"]
    pub fn GiNaC_numeric_is_prime(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric11is_rationalEv"]
    pub fn GiNaC_numeric_is_rational(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7is_realEv"]
    pub fn GiNaC_numeric_is_real(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric11is_cintegerEv"]
    pub fn GiNaC_numeric_is_cinteger(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric12is_crationalEv"]
    pub fn GiNaC_numeric_is_crational(this: *const GiNaC_numeric) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric6to_intEv"]
    pub fn GiNaC_numeric_to_int(
        this: *const GiNaC_numeric,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7to_longEv"]
    pub fn GiNaC_numeric_to_long(
        this: *const GiNaC_numeric,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric9to_doubleEv"]
    pub fn GiNaC_numeric_to_double(this: *const GiNaC_numeric) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7to_cl_NEv"]
    pub fn GiNaC_numeric_to_cl_N(this: *const GiNaC_numeric) -> cln_cl_N;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric4realEv"]
    pub fn GiNaC_numeric_real(this: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric4imagEv"]
    pub fn GiNaC_numeric_imag(this: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric5numerEv"]
    pub fn GiNaC_numeric_numer(this: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric5denomEv"]
    pub fn GiNaC_numeric_denom(this: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric10int_lengthEv"]
    pub fn GiNaC_numeric_int_length(
        this: *const GiNaC_numeric,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric13print_numericERKNS_13print_contextEPKcS5_S5_S5_j"]
    pub fn GiNaC_numeric_print_numeric(
        this: *const GiNaC_numeric,
        c: *const GiNaC_print_context,
        par_open: *const ::std::os::raw::c_char,
        par_close: *const ::std::os::raw::c_char,
        imag_sym: *const ::std::os::raw::c_char,
        mul_sym: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_numeric_do_print(
        this: *const GiNaC_numeric,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_numeric_do_print_latex(
        this: *const GiNaC_numeric,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric13do_print_csrcERKNS_10print_csrcEj"]
    pub fn GiNaC_numeric_do_print_csrc(
        this: *const GiNaC_numeric,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric18do_print_csrc_cl_NERKNS_15print_csrc_cl_NEj"]
    pub fn GiNaC_numeric_do_print_csrc_cl_N(
        this: *const GiNaC_numeric,
        c: *const GiNaC_print_csrc_cl_N,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_numeric_do_print_tree(
        this: *const GiNaC_numeric,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_numeric_do_print_python_repr(
        this: *const GiNaC_numeric,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1Ev"]
    pub fn GiNaC_numeric_numeric(this: *mut GiNaC_numeric);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1Ei"]
    pub fn GiNaC_numeric_numeric1(
        this: *mut GiNaC_numeric,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1Ej"]
    pub fn GiNaC_numeric_numeric2(
        this: *mut GiNaC_numeric,
        i: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1El"]
    pub fn GiNaC_numeric_numeric3(
        this: *mut GiNaC_numeric,
        i: ::std::os::raw::c_long,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1Em"]
    pub fn GiNaC_numeric_numeric4(
        this: *mut GiNaC_numeric,
        i: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1Ex"]
    pub fn GiNaC_numeric_numeric5(
        this: *mut GiNaC_numeric,
        i: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1Ey"]
    pub fn GiNaC_numeric_numeric6(
        this: *mut GiNaC_numeric,
        i: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1Ell"]
    pub fn GiNaC_numeric_numeric7(
        this: *mut GiNaC_numeric,
        numer: ::std::os::raw::c_long,
        denom: ::std::os::raw::c_long,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1Ed"]
    pub fn GiNaC_numeric_numeric8(this: *mut GiNaC_numeric, d: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1EPKc"]
    pub fn GiNaC_numeric_numeric9(
        this: *mut GiNaC_numeric,
        arg1: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numericC1ERKN3cln4cl_NE"]
    pub fn GiNaC_numeric_numeric10(
        this: *mut GiNaC_numeric,
        z: *const cln_cl_N,
    );
}
impl GiNaC_numeric {
    #[inline]
    pub unsafe fn add(&self, other: *const GiNaC_numeric) -> GiNaC_numeric {
        GiNaC_numeric_add(self, other)
    }
    #[inline]
    pub unsafe fn sub(&self, other: *const GiNaC_numeric) -> GiNaC_numeric {
        GiNaC_numeric_sub(self, other)
    }
    #[inline]
    pub unsafe fn mul(&self, other: *const GiNaC_numeric) -> GiNaC_numeric {
        GiNaC_numeric_mul(self, other)
    }
    #[inline]
    pub unsafe fn div(&self, other: *const GiNaC_numeric) -> GiNaC_numeric {
        GiNaC_numeric_div(self, other)
    }
    #[inline]
    pub unsafe fn power(&self, other: *const GiNaC_numeric) -> GiNaC_numeric {
        GiNaC_numeric_power(self, other)
    }
    #[inline]
    pub unsafe fn add_dyn(
        &self,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric {
        GiNaC_numeric_add_dyn(self, other)
    }
    #[inline]
    pub unsafe fn sub_dyn(
        &self,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric {
        GiNaC_numeric_sub_dyn(self, other)
    }
    #[inline]
    pub unsafe fn mul_dyn(
        &self,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric {
        GiNaC_numeric_mul_dyn(self, other)
    }
    #[inline]
    pub unsafe fn div_dyn(
        &self,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric {
        GiNaC_numeric_div_dyn(self, other)
    }
    #[inline]
    pub unsafe fn power_dyn(
        &self,
        other: *const GiNaC_numeric,
    ) -> *const GiNaC_numeric {
        GiNaC_numeric_power_dyn(self, other)
    }
    #[inline]
    pub unsafe fn inverse(&self) -> GiNaC_numeric {
        GiNaC_numeric_inverse(self)
    }
    #[inline]
    pub unsafe fn step(&self) -> GiNaC_numeric {
        GiNaC_numeric_step(self)
    }
    #[inline]
    pub unsafe fn csgn(&self) -> ::std::os::raw::c_int {
        GiNaC_numeric_csgn(self)
    }
    #[inline]
    pub unsafe fn compare(
        &self,
        other: *const GiNaC_numeric,
    ) -> ::std::os::raw::c_int {
        GiNaC_numeric_compare(self, other)
    }
    #[inline]
    pub unsafe fn is_equal(&self, other: *const GiNaC_numeric) -> bool {
        GiNaC_numeric_is_equal(self, other)
    }
    #[inline]
    pub unsafe fn is_zero(&self) -> bool {
        GiNaC_numeric_is_zero(self)
    }
    #[inline]
    pub unsafe fn is_positive(&self) -> bool {
        GiNaC_numeric_is_positive(self)
    }
    #[inline]
    pub unsafe fn is_negative(&self) -> bool {
        GiNaC_numeric_is_negative(self)
    }
    #[inline]
    pub unsafe fn is_integer(&self) -> bool {
        GiNaC_numeric_is_integer(self)
    }
    #[inline]
    pub unsafe fn is_pos_integer(&self) -> bool {
        GiNaC_numeric_is_pos_integer(self)
    }
    #[inline]
    pub unsafe fn is_nonneg_integer(&self) -> bool {
        GiNaC_numeric_is_nonneg_integer(self)
    }
    #[inline]
    pub unsafe fn is_even(&self) -> bool {
        GiNaC_numeric_is_even(self)
    }
    #[inline]
    pub unsafe fn is_odd(&self) -> bool {
        GiNaC_numeric_is_odd(self)
    }
    #[inline]
    pub unsafe fn is_prime(&self) -> bool {
        GiNaC_numeric_is_prime(self)
    }
    #[inline]
    pub unsafe fn is_rational(&self) -> bool {
        GiNaC_numeric_is_rational(self)
    }
    #[inline]
    pub unsafe fn is_real(&self) -> bool {
        GiNaC_numeric_is_real(self)
    }
    #[inline]
    pub unsafe fn is_cinteger(&self) -> bool {
        GiNaC_numeric_is_cinteger(self)
    }
    #[inline]
    pub unsafe fn is_crational(&self) -> bool {
        GiNaC_numeric_is_crational(self)
    }
    #[inline]
    pub unsafe fn to_int(&self) -> ::std::os::raw::c_int {
        GiNaC_numeric_to_int(self)
    }
    #[inline]
    pub unsafe fn to_long(&self) -> ::std::os::raw::c_long {
        GiNaC_numeric_to_long(self)
    }
    #[inline]
    pub unsafe fn to_double(&self) -> f64 {
        GiNaC_numeric_to_double(self)
    }
    #[inline]
    pub unsafe fn to_cl_N(&self) -> cln_cl_N {
        GiNaC_numeric_to_cl_N(self)
    }
    #[inline]
    pub unsafe fn real(&self) -> GiNaC_numeric {
        GiNaC_numeric_real(self)
    }
    #[inline]
    pub unsafe fn imag(&self) -> GiNaC_numeric {
        GiNaC_numeric_imag(self)
    }
    #[inline]
    pub unsafe fn numer(&self) -> GiNaC_numeric {
        GiNaC_numeric_numer(self)
    }
    #[inline]
    pub unsafe fn denom(&self) -> GiNaC_numeric {
        GiNaC_numeric_denom(self)
    }
    #[inline]
    pub unsafe fn int_length(&self) -> ::std::os::raw::c_int {
        GiNaC_numeric_int_length(self)
    }
    #[inline]
    pub unsafe fn print_numeric(
        &self,
        c: *const GiNaC_print_context,
        par_open: *const ::std::os::raw::c_char,
        par_close: *const ::std::os::raw::c_char,
        imag_sym: *const ::std::os::raw::c_char,
        mul_sym: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_numeric_print_numeric(
            self, c, par_open, par_close, imag_sym, mul_sym, level,
        )
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_numeric_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_numeric_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_csrc(
        &self,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_numeric_do_print_csrc(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_csrc_cl_N(
        &self,
        c: *const GiNaC_print_csrc_cl_N,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_numeric_do_print_csrc_cl_N(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_numeric_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_numeric_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(i: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric1(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(i: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric2(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(i: ::std::os::raw::c_long) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric3(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(i: ::std::os::raw::c_ulong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric4(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(i: ::std::os::raw::c_longlong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric5(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(i: ::std::os::raw::c_ulonglong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric6(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(
        numer: ::std::os::raw::c_long,
        denom: ::std::os::raw::c_long,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric7(__bindgen_tmp.as_mut_ptr(), numer, denom);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new8(d: f64) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric8(__bindgen_tmp.as_mut_ptr(), d);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new9(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric9(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new10(z: *const cln_cl_N) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_numeric10(__bindgen_tmp.as_mut_ptr(), z);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_numeric_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric4infoEj"]
    pub fn GiNaC_numeric_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric13is_polynomialERKNS_2exE"]
    pub fn GiNaC_numeric_is_polynomial(
        this: *mut ::std::os::raw::c_void,
        var: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric6degreeERKNS_2exE"]
    pub fn GiNaC_numeric_degree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7ldegreeERKNS_2exE"]
    pub fn GiNaC_numeric_ldegree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric5coeffERKNS_2exEi"]
    pub fn GiNaC_numeric_coeff(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
        n: ::std::os::raw::c_int,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric3hasERKNS_2exEj"]
    pub fn GiNaC_numeric_has(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric4evalEv"]
    pub fn GiNaC_numeric_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric5evalfEv"]
    pub fn GiNaC_numeric_evalf(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric6normalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEES9_"]
    pub fn GiNaC_numeric_normal(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
        rev_lookup: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric11to_rationalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_numeric_to_rational(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric13to_polynomialERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_numeric_to_polynomial(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric15integer_contentEv"]
    pub fn GiNaC_numeric_integer_content(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric4smodERKS0_"]
    pub fn GiNaC_numeric_smod(
        this: *mut ::std::os::raw::c_void,
        xi: *const GiNaC_numeric,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric15max_coefficientEv"]
    pub fn GiNaC_numeric_max_coefficient(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric9conjugateEv"]
    pub fn GiNaC_numeric_conjugate(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric9real_partEv"]
    pub fn GiNaC_numeric_real_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric9imag_partEv"]
    pub fn GiNaC_numeric_imag_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_numeric_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7numeric12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_numeric_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric18is_equal_same_typeERKNS_5basicE"]
    pub fn GiNaC_numeric_is_equal_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7numeric8calchashEv"]
    pub fn GiNaC_numeric_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_numeric_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18numeric_unarchiver8usecountE"]
    pub static mut GiNaC_numeric_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_numeric_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_numeric_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_numeric_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_numeric_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_numeric_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18numeric_unarchiver6createEv"]
    pub fn GiNaC_numeric_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18numeric_unarchiverC1Ev"]
    pub fn GiNaC_numeric_unarchiver_numeric_unarchiver(
        this: *mut GiNaC_numeric_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18numeric_unarchiverD1Ev"]
    pub fn GiNaC_numeric_unarchiver_numeric_unarchiver_destructor(
        this: *mut GiNaC_numeric_unarchiver,
    );
}
impl GiNaC_numeric_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_numeric_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_numeric_unarchiver_numeric_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_numeric_unarchiver_numeric_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL27numeric_unarchiver_instanceE"]
    pub static mut GiNaC_numeric_unarchiver_instance: GiNaC_numeric_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC1IE"]
    pub static GiNaC_I: GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6DigitsE"]
    pub static mut GiNaC_Digits: GiNaC__numeric_digits;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3expERKNS_7numericE"]
    pub fn GiNaC_exp(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3logERKNS_7numericE"]
    pub fn GiNaC_log(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3sinERKNS_7numericE"]
    pub fn GiNaC_sin(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3cosERKNS_7numericE"]
    pub fn GiNaC_cos(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3tanERKNS_7numericE"]
    pub fn GiNaC_tan(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4asinERKNS_7numericE"]
    pub fn GiNaC_asin(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4acosERKNS_7numericE"]
    pub fn GiNaC_acos(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4atanERKNS_7numericE"]
    pub fn GiNaC_atan(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4atanERKNS_7numericES2_"]
    pub fn GiNaC_atan1(
        y: *const GiNaC_numeric,
        x: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4sinhERKNS_7numericE"]
    pub fn GiNaC_sinh(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4coshERKNS_7numericE"]
    pub fn GiNaC_cosh(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4tanhERKNS_7numericE"]
    pub fn GiNaC_tanh(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5asinhERKNS_7numericE"]
    pub fn GiNaC_asinh(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5acoshERKNS_7numericE"]
    pub fn GiNaC_acosh(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5atanhERKNS_7numericE"]
    pub fn GiNaC_atanh(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3Li2ERKNS_7numericE"]
    pub fn GiNaC_Li2(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4zetaERKNS_7numericE"]
    pub fn GiNaC_zeta(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6lgammaERKNS_7numericE"]
    pub fn GiNaC_lgamma(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6tgammaERKNS_7numericE"]
    pub fn GiNaC_tgamma(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3psiERKNS_7numericE"]
    pub fn GiNaC_psi(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3psiERKNS_7numericES2_"]
    pub fn GiNaC_psi1(
        n: *const GiNaC_numeric,
        x: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9factorialERKNS_7numericE"]
    pub fn GiNaC_factorial(n: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15doublefactorialERKNS_7numericE"]
    pub fn GiNaC_doublefactorial(n: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8binomialERKNS_7numericES2_"]
    pub fn GiNaC_binomial(
        n: *const GiNaC_numeric,
        k: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9bernoulliERKNS_7numericE"]
    pub fn GiNaC_bernoulli(n: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9fibonacciERKNS_7numericE"]
    pub fn GiNaC_fibonacci(n: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5isqrtERKNS_7numericE"]
    pub fn GiNaC_isqrt(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4sqrtERKNS_7numericE"]
    pub fn GiNaC_sqrt(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3absERKNS_7numericE"]
    pub fn GiNaC_abs(x: *const GiNaC_numeric) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3modERKNS_7numericES2_"]
    pub fn GiNaC_mod(
        a: *const GiNaC_numeric,
        b: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4smodERKNS_7numericES2_"]
    pub fn GiNaC_smod(
        a: *const GiNaC_numeric,
        b: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4iremERKNS_7numericES2_"]
    pub fn GiNaC_irem(
        a: *const GiNaC_numeric,
        b: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4iremERKNS_7numericES2_RS0_"]
    pub fn GiNaC_irem1(
        a: *const GiNaC_numeric,
        b: *const GiNaC_numeric,
        q: *mut GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4iquoERKNS_7numericES2_"]
    pub fn GiNaC_iquo(
        a: *const GiNaC_numeric,
        b: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4iquoERKNS_7numericES2_RS0_"]
    pub fn GiNaC_iquo1(
        a: *const GiNaC_numeric,
        b: *const GiNaC_numeric,
        r: *mut GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3gcdERKNS_7numericES2_"]
    pub fn GiNaC_gcd1(
        a: *const GiNaC_numeric,
        b: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3lcmERKNS_7numericES2_"]
    pub fn GiNaC_lcm1(
        a: *const GiNaC_numeric,
        b: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7PiEvalfEv"]
    pub fn GiNaC_PiEvalf() -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10EulerEvalfEv"]
    pub fn GiNaC_EulerEvalf() -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12CatalanEvalfEv"]
    pub fn GiNaC_CatalanEvalf() -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_power {
    pub _base: GiNaC_basic,
    pub basis: GiNaC_ex,
    pub exponent: GiNaC_ex,
}
#[repr(C)]
pub struct GiNaC_power_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_power_visitor {
    pub vtable_: *const GiNaC_power_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_power_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_power_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_power_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_power_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_power_visitor))
    );
}
pub type GiNaC_power_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5power8reg_infoE"]
    pub static mut GiNaC_power_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_power() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_power>(),
        40usize,
        concat!("Size of: ", stringify!(GiNaC_power))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_power>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_power))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_power>())).basis as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_power),
            "::",
            stringify!(basis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_power>())).exponent as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_power),
            "::",
            stringify!(exponent)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power11print_powerERKNS_13print_contextEPKcS5_S5_j"]
    pub fn GiNaC_power_print_power(
        this: *const GiNaC_power,
        c: *const GiNaC_print_context,
        powersymbol: *const ::std::os::raw::c_char,
        openbrace: *const ::std::os::raw::c_char,
        closebrace: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power13do_print_dfltERKNS_10print_dfltEj"]
    pub fn GiNaC_power_do_print_dflt(
        this: *const GiNaC_power,
        c: *const GiNaC_print_dflt,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_power_do_print_latex(
        this: *const GiNaC_power,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power13do_print_csrcERKNS_10print_csrcEj"]
    pub fn GiNaC_power_do_print_csrc(
        this: *const GiNaC_power,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power15do_print_pythonERKNS_12print_pythonEj"]
    pub fn GiNaC_power_do_print_python(
        this: *const GiNaC_power,
        c: *const GiNaC_print_python,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_power_do_print_python_repr(
        this: *const GiNaC_power,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power18do_print_csrc_cl_NERKNS_15print_csrc_cl_NEj"]
    pub fn GiNaC_power_do_print_csrc_cl_N(
        this: *const GiNaC_power,
        c: *const GiNaC_print_csrc_cl_N,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5power10expand_addERKNS_3addElj"]
    pub fn GiNaC_power_expand_add(
        a: *const GiNaC_add,
        n: ::std::os::raw::c_long,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5power12expand_add_2ERKNS_3addEj"]
    pub fn GiNaC_power_expand_add_2(
        a: *const GiNaC_add,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5power10expand_mulERKNS_3mulERKNS_7numericEjb"]
    pub fn GiNaC_power_expand_mul(
        m: *const GiNaC_mul,
        n: *const GiNaC_numeric,
        options: ::std::os::raw::c_uint,
        from_expand: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5powerC1Ev"]
    pub fn GiNaC_power_power(this: *mut GiNaC_power);
}
impl GiNaC_power {
    #[inline]
    pub unsafe fn print_power(
        &self,
        c: *const GiNaC_print_context,
        powersymbol: *const ::std::os::raw::c_char,
        openbrace: *const ::std::os::raw::c_char,
        closebrace: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_power_print_power(
            self,
            c,
            powersymbol,
            openbrace,
            closebrace,
            level,
        )
    }
    #[inline]
    pub unsafe fn do_print_dflt(
        &self,
        c: *const GiNaC_print_dflt,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_power_do_print_dflt(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_power_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_csrc(
        &self,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_power_do_print_csrc(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python(
        &self,
        c: *const GiNaC_print_python,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_power_do_print_python(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_power_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_csrc_cl_N(
        &self,
        c: *const GiNaC_print_csrc_cl_N,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_power_do_print_csrc_cl_N(self, c, level)
    }
    #[inline]
    pub unsafe fn expand_add(
        a: *const GiNaC_add,
        n: ::std::os::raw::c_long,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_power_expand_add(a, n, options)
    }
    #[inline]
    pub unsafe fn expand_add_2(
        a: *const GiNaC_add,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_power_expand_add_2(a, options)
    }
    #[inline]
    pub unsafe fn expand_mul(
        m: *const GiNaC_mul,
        n: *const GiNaC_numeric,
        options: ::std::os::raw::c_uint,
        from_expand: bool,
    ) -> GiNaC_ex {
        GiNaC_power_expand_mul(m, n, options, from_expand)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_power_power(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_power_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power4infoEj"]
    pub fn GiNaC_power_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power4nopsEv"]
    pub fn GiNaC_power_nops(this: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power2opEm"]
    pub fn GiNaC_power_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power3mapERNS_12map_functionE"]
    pub fn GiNaC_power_map(
        this: *mut ::std::os::raw::c_void,
        f: *mut GiNaC_map_function,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power13is_polynomialERKNS_2exE"]
    pub fn GiNaC_power_is_polynomial(
        this: *mut ::std::os::raw::c_void,
        var: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power6degreeERKNS_2exE"]
    pub fn GiNaC_power_degree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power7ldegreeERKNS_2exE"]
    pub fn GiNaC_power_ldegree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power5coeffERKNS_2exEi"]
    pub fn GiNaC_power_coeff(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
        n: ::std::os::raw::c_int,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power4evalEv"]
    pub fn GiNaC_power_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power5evalfEv"]
    pub fn GiNaC_power_evalf(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power5evalmEv"]
    pub fn GiNaC_power_evalm(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power6seriesERKNS_10relationalEij"]
    pub fn GiNaC_power_series(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_relational,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power4subsERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_power_subs(
        this: *mut ::std::os::raw::c_void,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power3hasERKNS_2exEj"]
    pub fn GiNaC_power_has(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power6normalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEES9_"]
    pub fn GiNaC_power_normal(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
        rev_lookup: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power11to_rationalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_power_to_rational(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power13to_polynomialERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_power_to_polynomial(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power9conjugateEv"]
    pub fn GiNaC_power_conjugate(this: *mut ::std::os::raw::c_void)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power9real_partEv"]
    pub fn GiNaC_power_real_part(this: *mut ::std::os::raw::c_void)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power9imag_partEv"]
    pub fn GiNaC_power_imag_part(this: *mut ::std::os::raw::c_void)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_power_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5power12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_power_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power10derivativeERKNS_6symbolE"]
    pub fn GiNaC_power_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power10eval_ncmulERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_power_eval_ncmul(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power11return_typeEv"]
    pub fn GiNaC_power_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power17return_type_tinfoEv"]
    pub fn GiNaC_power_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5power6expandEj"]
    pub fn GiNaC_power_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_power_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16power_unarchiver8usecountE"]
    pub static mut GiNaC_power_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_power_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_power_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_power_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_power_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_power_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16power_unarchiver6createEv"]
    pub fn GiNaC_power_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16power_unarchiverC1Ev"]
    pub fn GiNaC_power_unarchiver_power_unarchiver(
        this: *mut GiNaC_power_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16power_unarchiverD1Ev"]
    pub fn GiNaC_power_unarchiver_power_unarchiver_destructor(
        this: *mut GiNaC_power_unarchiver,
    );
}
impl GiNaC_power_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_power_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_power_unarchiver_power_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_power_unarchiver_power_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL25power_unarchiver_instanceE"]
    pub static mut GiNaC_power_unarchiver_instance: GiNaC_power_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_relational {
    pub _base: GiNaC_basic,
    pub lh: GiNaC_ex,
    pub rh: GiNaC_ex,
    pub o: GiNaC_relational_operators,
}
#[repr(C)]
pub struct GiNaC_relational_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_relational_visitor {
    pub vtable_: *const GiNaC_relational_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_relational_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_relational_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_relational_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_relational_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_relational_visitor))
    );
}
pub type GiNaC_relational_inherited = GiNaC_basic;
pub const GiNaC_relational_operators_equal: GiNaC_relational_operators = 0;
pub const GiNaC_relational_operators_not_equal: GiNaC_relational_operators = 1;
pub const GiNaC_relational_operators_less: GiNaC_relational_operators = 2;
pub const GiNaC_relational_operators_less_or_equal: GiNaC_relational_operators =
    3;
pub const GiNaC_relational_operators_greater: GiNaC_relational_operators = 4;
pub const GiNaC_relational_operators_greater_or_equal:
    GiNaC_relational_operators = 5;
pub type GiNaC_relational_operators = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_relational_safe_bool_helper {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_relational_safe_bool_helper() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_relational_safe_bool_helper>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_relational_safe_bool_helper))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_relational_safe_bool_helper>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(GiNaC_relational_safe_bool_helper)
        )
    );
}
pub type GiNaC_relational_safe_bool =
    ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10relational8reg_infoE"]
    pub static mut GiNaC_relational_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_relational() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_relational>(),
        48usize,
        concat!("Size of: ", stringify!(GiNaC_relational))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_relational>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_relational))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_relational>())).lh as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_relational),
            "::",
            stringify!(lh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_relational>())).rh as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_relational),
            "::",
            stringify!(rh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_relational>())).o as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_relational),
            "::",
            stringify!(o)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_relational_do_print(
        this: *const GiNaC_relational,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_relational_do_print_python_repr(
        this: *const GiNaC_relational,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10relationalC1Ev"]
    pub fn GiNaC_relational_relational(this: *mut GiNaC_relational);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10relationalC1ERKNS_2exES3_NS0_9operatorsE"]
    pub fn GiNaC_relational_relational1(
        this: *mut GiNaC_relational,
        lhs: *const GiNaC_ex,
        rhs: *const GiNaC_ex,
        oper: GiNaC_relational_operators,
    );
}
impl GiNaC_relational {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_relational_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_relational_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_relational_relational(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        lhs: *const GiNaC_ex,
        rhs: *const GiNaC_ex,
        oper: GiNaC_relational_operators,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_relational_relational1(
            __bindgen_tmp.as_mut_ptr(),
            lhs,
            rhs,
            oper,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_relational_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational4infoEj"]
    pub fn GiNaC_relational_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational4nopsEv"]
    pub fn GiNaC_relational_nops(this: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational2opEm"]
    pub fn GiNaC_relational_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational3mapERNS_12map_functionE"]
    pub fn GiNaC_relational_map(
        this: *mut ::std::os::raw::c_void,
        f: *mut GiNaC_map_function,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational4subsERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_relational_subs(
        this: *mut ::std::os::raw::c_void,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_relational_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10relational12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_relational_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational10eval_ncmulERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_relational_eval_ncmul(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational15match_same_typeERKNS_5basicE"]
    pub fn GiNaC_relational_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational11return_typeEv"]
    pub fn GiNaC_relational_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational17return_type_tinfoEv"]
    pub fn GiNaC_relational_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10relational8calchashEv"]
    pub fn GiNaC_relational_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_relational_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21relational_unarchiver8usecountE"]
    pub static mut GiNaC_relational_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_relational_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_relational_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_relational_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_relational_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_relational_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21relational_unarchiver6createEv"]
    pub fn GiNaC_relational_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21relational_unarchiverC1Ev"]
    pub fn GiNaC_relational_unarchiver_relational_unarchiver(
        this: *mut GiNaC_relational_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21relational_unarchiverD1Ev"]
    pub fn GiNaC_relational_unarchiver_relational_unarchiver_destructor(
        this: *mut GiNaC_relational_unarchiver,
    );
}
impl GiNaC_relational_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_relational_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_relational_unarchiver_relational_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_relational_unarchiver_relational_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL30relational_unarchiver_instanceE"]
    pub static mut GiNaC_relational_unarchiver_instance:
        GiNaC_relational_unarchiver;
}
pub type GiNaC_exprseq = [u64; 6usize];
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_ncmul {
    pub _base: GiNaC_exprseq,
}
#[repr(C)]
pub struct GiNaC_ncmul_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_ncmul_visitor {
    pub vtable_: *const GiNaC_ncmul_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_ncmul_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ncmul_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_ncmul_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ncmul_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_ncmul_visitor))
    );
}
pub type GiNaC_ncmul_inherited = GiNaC_exprseq;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5ncmul8reg_infoE"]
    pub static mut GiNaC_ncmul_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_ncmul() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ncmul>(),
        48usize,
        concat!("Size of: ", stringify!(GiNaC_ncmul))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ncmul>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_ncmul))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_ncmul_do_print(
        this: *const GiNaC_ncmul,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul13do_print_csrcERKNS_13print_contextEj"]
    pub fn GiNaC_ncmul_do_print_csrc(
        this: *const GiNaC_ncmul,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul13count_factorsERKNS_2exE"]
    pub fn GiNaC_ncmul_count_factors(
        this: *const GiNaC_ncmul,
        e: *const GiNaC_ex,
    ) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul14append_factorsERSt6vectorINS_2exESaIS2_EERKS2_"]
    pub fn GiNaC_ncmul_append_factors(
        this: *const GiNaC_ncmul,
        v: *mut GiNaC_exvector,
        e: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul14expandchildrenEj"]
    pub fn GiNaC_ncmul_expandchildren(
        this: *const GiNaC_ncmul,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul11get_factorsEv"]
    pub fn GiNaC_ncmul_get_factors(
        this: *const GiNaC_ncmul,
    ) -> *const GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5ncmulC1Ev"]
    pub fn GiNaC_ncmul_ncmul(this: *mut GiNaC_ncmul);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5ncmulC1ERKNS_2exES3_"]
    pub fn GiNaC_ncmul_ncmul1(
        this: *mut GiNaC_ncmul,
        lh: *const GiNaC_ex,
        rh: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5ncmulC1ERKNS_2exES3_S3_"]
    pub fn GiNaC_ncmul_ncmul2(
        this: *mut GiNaC_ncmul,
        f1: *const GiNaC_ex,
        f2: *const GiNaC_ex,
        f3: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5ncmulC1ERKNS_2exES3_S3_S3_"]
    pub fn GiNaC_ncmul_ncmul3(
        this: *mut GiNaC_ncmul,
        f1: *const GiNaC_ex,
        f2: *const GiNaC_ex,
        f3: *const GiNaC_ex,
        f4: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5ncmulC1ERKNS_2exES3_S3_S3_S3_"]
    pub fn GiNaC_ncmul_ncmul4(
        this: *mut GiNaC_ncmul,
        f1: *const GiNaC_ex,
        f2: *const GiNaC_ex,
        f3: *const GiNaC_ex,
        f4: *const GiNaC_ex,
        f5: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5ncmulC1ERKNS_2exES3_S3_S3_S3_S3_"]
    pub fn GiNaC_ncmul_ncmul5(
        this: *mut GiNaC_ncmul,
        f1: *const GiNaC_ex,
        f2: *const GiNaC_ex,
        f3: *const GiNaC_ex,
        f4: *const GiNaC_ex,
        f5: *const GiNaC_ex,
        f6: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5ncmulC1ERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_ncmul_ncmul6(this: *mut GiNaC_ncmul, v: *const GiNaC_exvector);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5ncmulC1EOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_ncmul_ncmul7(this: *mut GiNaC_ncmul, v: *mut GiNaC_exvector);
}
impl GiNaC_ncmul {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_ncmul_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_csrc(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_ncmul_do_print_csrc(self, c, level)
    }
    #[inline]
    pub unsafe fn count_factors(&self, e: *const GiNaC_ex) -> size_t {
        GiNaC_ncmul_count_factors(self, e)
    }
    #[inline]
    pub unsafe fn append_factors(
        &self,
        v: *mut GiNaC_exvector,
        e: *const GiNaC_ex,
    ) {
        GiNaC_ncmul_append_factors(self, v, e)
    }
    #[inline]
    pub unsafe fn expandchildren(
        &self,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_exvector {
        GiNaC_ncmul_expandchildren(self, options)
    }
    #[inline]
    pub unsafe fn get_factors(&self) -> *const GiNaC_exvector {
        GiNaC_ncmul_get_factors(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ncmul_ncmul(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(lh: *const GiNaC_ex, rh: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ncmul_ncmul1(__bindgen_tmp.as_mut_ptr(), lh, rh);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        f1: *const GiNaC_ex,
        f2: *const GiNaC_ex,
        f3: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ncmul_ncmul2(__bindgen_tmp.as_mut_ptr(), f1, f2, f3);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        f1: *const GiNaC_ex,
        f2: *const GiNaC_ex,
        f3: *const GiNaC_ex,
        f4: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ncmul_ncmul3(__bindgen_tmp.as_mut_ptr(), f1, f2, f3, f4);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        f1: *const GiNaC_ex,
        f2: *const GiNaC_ex,
        f3: *const GiNaC_ex,
        f4: *const GiNaC_ex,
        f5: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ncmul_ncmul4(__bindgen_tmp.as_mut_ptr(), f1, f2, f3, f4, f5);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(
        f1: *const GiNaC_ex,
        f2: *const GiNaC_ex,
        f3: *const GiNaC_ex,
        f4: *const GiNaC_ex,
        f5: *const GiNaC_ex,
        f6: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ncmul_ncmul5(__bindgen_tmp.as_mut_ptr(), f1, f2, f3, f4, f5, f6);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(v: *const GiNaC_exvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ncmul_ncmul6(__bindgen_tmp.as_mut_ptr(), v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(v: *mut GiNaC_exvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ncmul_ncmul7(__bindgen_tmp.as_mut_ptr(), v);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_ncmul_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul4infoEj"]
    pub fn GiNaC_ncmul_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul6degreeERKNS_2exE"]
    pub fn GiNaC_ncmul_degree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul7ldegreeERKNS_2exE"]
    pub fn GiNaC_ncmul_ldegree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul6expandEj"]
    pub fn GiNaC_ncmul_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul5coeffERKNS_2exEi"]
    pub fn GiNaC_ncmul_coeff(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
        n: ::std::os::raw::c_int,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul4evalEv"]
    pub fn GiNaC_ncmul_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul5evalmEv"]
    pub fn GiNaC_ncmul_evalm(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul16get_free_indicesEv"]
    pub fn GiNaC_ncmul_get_free_indices(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul13thiscontainerERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_ncmul_thiscontainer(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul13thiscontainerEOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_ncmul_thiscontainer1(
        this: *mut ::std::os::raw::c_void,
        v: *mut GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul9conjugateEv"]
    pub fn GiNaC_ncmul_conjugate(this: *mut ::std::os::raw::c_void)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul9real_partEv"]
    pub fn GiNaC_ncmul_real_part(this: *mut ::std::os::raw::c_void)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul9imag_partEv"]
    pub fn GiNaC_ncmul_imag_part(this: *mut ::std::os::raw::c_void)
        -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul10derivativeERKNS_6symbolE"]
    pub fn GiNaC_ncmul_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul11return_typeEv"]
    pub fn GiNaC_ncmul_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5ncmul17return_type_tinfoEv"]
    pub fn GiNaC_ncmul_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_ncmul_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16ncmul_unarchiver8usecountE"]
    pub static mut GiNaC_ncmul_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_ncmul_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ncmul_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_ncmul_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ncmul_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_ncmul_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16ncmul_unarchiver6createEv"]
    pub fn GiNaC_ncmul_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16ncmul_unarchiverC1Ev"]
    pub fn GiNaC_ncmul_unarchiver_ncmul_unarchiver(
        this: *mut GiNaC_ncmul_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16ncmul_unarchiverD1Ev"]
    pub fn GiNaC_ncmul_unarchiver_ncmul_unarchiver_destructor(
        this: *mut GiNaC_ncmul_unarchiver,
    );
}
impl GiNaC_ncmul_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_ncmul_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_ncmul_unarchiver_ncmul_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_ncmul_unarchiver_ncmul_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL25ncmul_unarchiver_instanceE"]
    pub static mut GiNaC_ncmul_unarchiver_instance: GiNaC_ncmul_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12reeval_ncmulERKSt6vectorINS_2exESaIS1_EE"]
    pub fn GiNaC_reeval_ncmul(v: *const GiNaC_exvector) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10hold_ncmulERKSt6vectorINS_2exESaIS1_EE"]
    pub fn GiNaC_hold_ncmul(v: *const GiNaC_exvector) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4dfltERSo"]
    pub fn GiNaC_dflt(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5latexERSo"]
    pub fn GiNaC_latex(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6pythonERSo"]
    pub fn GiNaC_python(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11python_reprERSo"]
    pub fn GiNaC_python_repr(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4treeERSo"]
    pub fn GiNaC_tree(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4csrcERSo"]
    pub fn GiNaC_csrc(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10csrc_floatERSo"]
    pub fn GiNaC_csrc_float(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11csrc_doubleERSo"]
    pub fn GiNaC_csrc_double(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9csrc_cl_NERSo"]
    pub fn GiNaC_csrc_cl_N(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16index_dimensionsERSo"]
    pub fn GiNaC_index_dimensions(os: *mut std_ostream) -> *mut std_ostream;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19no_index_dimensionsERSo"]
    pub fn GiNaC_no_index_dimensions(os: *mut std_ostream) -> *mut std_ostream;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_compare_all_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_compare_std_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_compare_bitwise {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_structure<T> {
    pub _base: GiNaC_basic,
    pub obj: T,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
pub struct GiNaC_structure_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_structure_visitor {
    pub vtable_: *const GiNaC_structure_visitor__bindgen_vtable,
}
pub type GiNaC_structure_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}reg_info"]
    pub static mut GiNaC_reg_info: GiNaC_registered_class_info;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_symbol {
    pub _base: GiNaC_basic,
    pub serial: ::std::os::raw::c_uint,
    pub name: std_string,
    pub TeX_name: std_string,
}
#[repr(C)]
pub struct GiNaC_symbol_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_symbol_visitor {
    pub vtable_: *const GiNaC_symbol_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_symbol_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_symbol_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_symbol_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_symbol_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_symbol_visitor))
    );
}
pub type GiNaC_symbol_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6symbol8reg_infoE"]
    pub static mut GiNaC_symbol_reg_info: GiNaC_registered_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6symbol11next_serialE"]
    pub static mut GiNaC_symbol_next_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_symbol() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_symbol>(),
        88usize,
        concat!("Size of: ", stringify!(GiNaC_symbol))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_symbol>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_symbol))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_symbol>())).serial as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_symbol),
            "::",
            stringify!(serial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_symbol>())).name as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_symbol),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_symbol>())).TeX_name as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_symbol),
            "::",
            stringify!(TeX_name)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol8get_nameB5cxx11Ev"]
    pub fn GiNaC_symbol_get_name(this: *const GiNaC_symbol) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol12get_TeX_nameB5cxx11Ev"]
    pub fn GiNaC_symbol_get_TeX_name(this: *const GiNaC_symbol) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_symbol_do_print(
        this: *const GiNaC_symbol,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_symbol_do_print_latex(
        this: *const GiNaC_symbol,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_symbol_do_print_tree(
        this: *const GiNaC_symbol,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_symbol_do_print_python_repr(
        this: *const GiNaC_symbol,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6symbolC1Ev"]
    pub fn GiNaC_symbol_symbol(this: *mut GiNaC_symbol);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6symbolC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_symbol_symbol1(
        this: *mut GiNaC_symbol,
        initname: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6symbolC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
    pub fn GiNaC_symbol_symbol2(
        this: *mut GiNaC_symbol,
        initname: *const std_string,
        texname: *const std_string,
    );
}
impl GiNaC_symbol {
    #[inline]
    pub unsafe fn get_name(&self) -> std_string {
        GiNaC_symbol_get_name(self)
    }
    #[inline]
    pub unsafe fn get_TeX_name(&self) -> std_string {
        GiNaC_symbol_get_TeX_name(self)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_symbol_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_symbol_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_symbol_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_symbol_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_symbol_symbol(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(initname: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_symbol_symbol1(__bindgen_tmp.as_mut_ptr(), initname);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        initname: *const std_string,
        texname: *const std_string,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_symbol_symbol2(__bindgen_tmp.as_mut_ptr(), initname, texname);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_symbol_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol4infoEj"]
    pub fn GiNaC_symbol_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol6seriesERKNS_10relationalEij"]
    pub fn GiNaC_symbol_series(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_relational,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol6normalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEES9_"]
    pub fn GiNaC_symbol_normal(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
        rev_lookup: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol11to_rationalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_symbol_to_rational(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol13to_polynomialERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_symbol_to_polynomial(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol9conjugateEv"]
    pub fn GiNaC_symbol_conjugate(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol9real_partEv"]
    pub fn GiNaC_symbol_real_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol9imag_partEv"]
    pub fn GiNaC_symbol_imag_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol13is_polynomialERKNS_2exE"]
    pub fn GiNaC_symbol_is_polynomial(
        this: *mut ::std::os::raw::c_void,
        var: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_symbol_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6symbol12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_symbol_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol10derivativeERKS0_"]
    pub fn GiNaC_symbol_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol18is_equal_same_typeERKNS_5basicE"]
    pub fn GiNaC_symbol_is_equal_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6symbol8calchashEv"]
    pub fn GiNaC_symbol_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_symbol_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17symbol_unarchiver8usecountE"]
    pub static mut GiNaC_symbol_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_symbol_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_symbol_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_symbol_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_symbol_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_symbol_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17symbol_unarchiver6createEv"]
    pub fn GiNaC_symbol_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17symbol_unarchiverC1Ev"]
    pub fn GiNaC_symbol_unarchiver_symbol_unarchiver(
        this: *mut GiNaC_symbol_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17symbol_unarchiverD1Ev"]
    pub fn GiNaC_symbol_unarchiver_symbol_unarchiver_destructor(
        this: *mut GiNaC_symbol_unarchiver,
    );
}
impl GiNaC_symbol_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_symbol_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_symbol_unarchiver_symbol_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_symbol_unarchiver_symbol_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL26symbol_unarchiver_instanceE"]
    pub static mut GiNaC_symbol_unarchiver_instance: GiNaC_symbol_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_realsymbol {
    pub _base: GiNaC_symbol,
}
#[test]
fn bindgen_test_layout_GiNaC_realsymbol() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_realsymbol>(),
        88usize,
        concat!("Size of: ", stringify!(GiNaC_realsymbol))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_realsymbol>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_realsymbol))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10realsymbolC1Ev"]
    pub fn GiNaC_realsymbol_realsymbol(this: *mut GiNaC_realsymbol);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10realsymbolC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_realsymbol_realsymbol1(
        this: *mut GiNaC_realsymbol,
        initname: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10realsymbolC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
    pub fn GiNaC_realsymbol_realsymbol2(
        this: *mut GiNaC_realsymbol,
        initname: *const std_string,
        texname: *const std_string,
    );
}
impl GiNaC_realsymbol {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_realsymbol_realsymbol(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(initname: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_realsymbol_realsymbol1(__bindgen_tmp.as_mut_ptr(), initname);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        initname: *const std_string,
        texname: *const std_string,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_realsymbol_realsymbol2(
            __bindgen_tmp.as_mut_ptr(),
            initname,
            texname,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_realsymbol_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21realsymbol_unarchiver8usecountE"]
    pub static mut GiNaC_realsymbol_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_realsymbol_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_realsymbol_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_realsymbol_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_realsymbol_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_realsymbol_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21realsymbol_unarchiver6createEv"]
    pub fn GiNaC_realsymbol_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21realsymbol_unarchiverC1Ev"]
    pub fn GiNaC_realsymbol_unarchiver_realsymbol_unarchiver(
        this: *mut GiNaC_realsymbol_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21realsymbol_unarchiverD1Ev"]
    pub fn GiNaC_realsymbol_unarchiver_realsymbol_unarchiver_destructor(
        this: *mut GiNaC_realsymbol_unarchiver,
    );
}
impl GiNaC_realsymbol_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_realsymbol_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_realsymbol_unarchiver_realsymbol_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_realsymbol_unarchiver_realsymbol_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL30realsymbol_unarchiver_instanceE"]
    pub static mut GiNaC_realsymbol_unarchiver_instance:
        GiNaC_realsymbol_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_possymbol {
    pub _base: GiNaC_realsymbol,
}
#[test]
fn bindgen_test_layout_GiNaC_possymbol() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_possymbol>(),
        88usize,
        concat!("Size of: ", stringify!(GiNaC_possymbol))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_possymbol>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_possymbol))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9possymbolC1Ev"]
    pub fn GiNaC_possymbol_possymbol(this: *mut GiNaC_possymbol);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9possymbolC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_possymbol_possymbol1(
        this: *mut GiNaC_possymbol,
        initname: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9possymbolC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
    pub fn GiNaC_possymbol_possymbol2(
        this: *mut GiNaC_possymbol,
        initname: *const std_string,
        texname: *const std_string,
    );
}
impl GiNaC_possymbol {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_possymbol_possymbol(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(initname: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_possymbol_possymbol1(__bindgen_tmp.as_mut_ptr(), initname);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        initname: *const std_string,
        texname: *const std_string,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_possymbol_possymbol2(
            __bindgen_tmp.as_mut_ptr(),
            initname,
            texname,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_possymbol_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20possymbol_unarchiver8usecountE"]
    pub static mut GiNaC_possymbol_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_possymbol_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_possymbol_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_possymbol_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_possymbol_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_possymbol_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20possymbol_unarchiver6createEv"]
    pub fn GiNaC_possymbol_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20possymbol_unarchiverC1Ev"]
    pub fn GiNaC_possymbol_unarchiver_possymbol_unarchiver(
        this: *mut GiNaC_possymbol_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20possymbol_unarchiverD1Ev"]
    pub fn GiNaC_possymbol_unarchiver_possymbol_unarchiver_destructor(
        this: *mut GiNaC_possymbol_unarchiver,
    );
}
impl GiNaC_possymbol_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_possymbol_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_possymbol_unarchiver_possymbol_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_possymbol_unarchiver_possymbol_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL29possymbol_unarchiver_instanceE"]
    pub static mut GiNaC_possymbol_unarchiver_instance:
        GiNaC_possymbol_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_expair {
    pub rest: GiNaC_ex,
    pub coeff: GiNaC_ex,
}
#[test]
fn bindgen_test_layout_GiNaC_expair() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_expair>(),
        16usize,
        concat!("Size of: ", stringify!(GiNaC_expair))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_expair>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_expair))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_expair>())).rest as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_expair),
            "::",
            stringify!(rest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_expair>())).coeff as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_expair),
            "::",
            stringify!(coeff)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6expair5printERSo"]
    pub fn GiNaC_expair_print(this: *const GiNaC_expair, os: *mut std_ostream);
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6expair9conjugateEv"]
    pub fn GiNaC_expair_conjugate(this: *const GiNaC_expair) -> GiNaC_expair;
}
impl GiNaC_expair {
    #[inline]
    pub unsafe fn print(&self, os: *mut std_ostream) {
        GiNaC_expair_print(self, os)
    }
    #[inline]
    pub unsafe fn conjugate(&self) -> GiNaC_expair {
        GiNaC_expair_conjugate(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_expair_is_less {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_expair_is_less() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_expair_is_less>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_expair_is_less))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_expair_is_less>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_expair_is_less))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_expair_rest_is_less {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_expair_rest_is_less() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_expair_rest_is_less>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_expair_rest_is_less))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_expair_rest_is_less>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_expair_rest_is_less))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_expair_swap {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_expair_swap() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_expair_swap>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_expair_swap))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_expair_swap>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_expair_swap))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_wildcard {
    pub _base: GiNaC_basic,
    pub label: ::std::os::raw::c_uint,
}
#[repr(C)]
pub struct GiNaC_wildcard_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_wildcard_visitor {
    pub vtable_: *const GiNaC_wildcard_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_wildcard_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_wildcard_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_wildcard_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_wildcard_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_wildcard_visitor))
    );
}
pub type GiNaC_wildcard_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8wildcard8reg_infoE"]
    pub static mut GiNaC_wildcard_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_wildcard() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_wildcard>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_wildcard))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_wildcard>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_wildcard))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_wildcard>())).label as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_wildcard),
            "::",
            stringify!(label)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8wildcard8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_wildcard_do_print(
        this: *const GiNaC_wildcard,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8wildcard13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_wildcard_do_print_tree(
        this: *const GiNaC_wildcard,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8wildcard20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_wildcard_do_print_python_repr(
        this: *const GiNaC_wildcard,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8wildcardC1Ev"]
    pub fn GiNaC_wildcard_wildcard(this: *mut GiNaC_wildcard);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8wildcardC1Ej"]
    pub fn GiNaC_wildcard_wildcard1(
        this: *mut GiNaC_wildcard,
        label: ::std::os::raw::c_uint,
    );
}
impl GiNaC_wildcard {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_wildcard_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_wildcard_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_wildcard_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_wildcard_wildcard(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(label: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_wildcard_wildcard1(__bindgen_tmp.as_mut_ptr(), label);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8wildcard17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_wildcard_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8wildcard5matchERKNS_2exERSt3mapIS1_S1_NS_10ex_is_lessESaISt4pairIS2_S1_EEE"]
    pub fn GiNaC_wildcard_match(
        this: *mut ::std::os::raw::c_void,
        pattern: *const GiNaC_ex,
        repl_lst: *mut GiNaC_exmap,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8wildcard7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_wildcard_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8wildcard12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_wildcard_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8wildcard8calchashEv"]
    pub fn GiNaC_wildcard_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_wildcard_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19wildcard_unarchiver8usecountE"]
    pub static mut GiNaC_wildcard_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_wildcard_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_wildcard_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_wildcard_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_wildcard_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_wildcard_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19wildcard_unarchiver6createEv"]
    pub fn GiNaC_wildcard_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19wildcard_unarchiverC1Ev"]
    pub fn GiNaC_wildcard_unarchiver_wildcard_unarchiver(
        this: *mut GiNaC_wildcard_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19wildcard_unarchiverD1Ev"]
    pub fn GiNaC_wildcard_unarchiver_wildcard_unarchiver_destructor(
        this: *mut GiNaC_wildcard_unarchiver,
    );
}
impl GiNaC_wildcard_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_wildcard_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_wildcard_unarchiver_wildcard_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_wildcard_unarchiver_wildcard_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL28wildcard_unarchiver_instanceE"]
    pub static mut GiNaC_wildcard_unarchiver_instance:
        GiNaC_wildcard_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7haswildERKNS_2exE"]
    pub fn GiNaC_haswild(x: *const GiNaC_ex) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_indexed {
    pub _base: GiNaC_exprseq,
    pub symtree: GiNaC_ex,
}
#[repr(C)]
pub struct GiNaC_indexed_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_indexed_visitor {
    pub vtable_: *const GiNaC_indexed_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_indexed_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_indexed_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_indexed_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_indexed_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_indexed_visitor))
    );
}
pub type GiNaC_indexed_inherited = GiNaC_exprseq;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexed8reg_infoE"]
    pub static mut GiNaC_indexed_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_indexed() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_indexed>(),
        56usize,
        concat!("Size of: ", stringify!(GiNaC_indexed))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_indexed>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_indexed))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_indexed>())).symtree as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_indexed),
            "::",
            stringify!(symtree)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed20all_index_values_areEj"]
    pub fn GiNaC_indexed_all_index_values_are(
        this: *const GiNaC_indexed,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed11get_indicesEv"]
    pub fn GiNaC_indexed_get_indices(
        this: *const GiNaC_indexed,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed17get_dummy_indicesEv"]
    pub fn GiNaC_indexed_get_dummy_indices(
        this: *const GiNaC_indexed,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed17get_dummy_indicesERKS0_"]
    pub fn GiNaC_indexed_get_dummy_indices1(
        this: *const GiNaC_indexed,
        other: *const GiNaC_indexed,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed19has_dummy_index_forERKNS_2exE"]
    pub fn GiNaC_indexed_has_dummy_index_for(
        this: *const GiNaC_indexed,
        i: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed12printindicesERKNS_13print_contextEj"]
    pub fn GiNaC_indexed_printindices(
        this: *const GiNaC_indexed,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed13print_indexedERKNS_13print_contextEPKcS5_j"]
    pub fn GiNaC_indexed_print_indexed(
        this: *const GiNaC_indexed,
        c: *const GiNaC_print_context,
        openbrace: *const ::std::os::raw::c_char,
        closebrace: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_indexed_do_print(
        this: *const GiNaC_indexed,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_indexed_do_print_latex(
        this: *const GiNaC_indexed,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_indexed_do_print_tree(
        this: *const GiNaC_indexed,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed8validateEv"]
    pub fn GiNaC_indexed_validate(this: *const GiNaC_indexed);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1Ev"]
    pub fn GiNaC_indexed_indexed(this: *mut GiNaC_indexed);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exE"]
    pub fn GiNaC_indexed_indexed1(this: *mut GiNaC_indexed, b: *const GiNaC_ex);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exES3_"]
    pub fn GiNaC_indexed_indexed2(
        this: *mut GiNaC_indexed,
        b: *const GiNaC_ex,
        i1: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exES3_S3_"]
    pub fn GiNaC_indexed_indexed3(
        this: *mut GiNaC_indexed,
        b: *const GiNaC_ex,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exES3_S3_S3_"]
    pub fn GiNaC_indexed_indexed4(
        this: *mut GiNaC_indexed,
        b: *const GiNaC_ex,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exES3_S3_S3_S3_"]
    pub fn GiNaC_indexed_indexed5(
        this: *mut GiNaC_indexed,
        b: *const GiNaC_ex,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
        i4: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exERKNS_8symmetryES3_S3_"]
    pub fn GiNaC_indexed_indexed6(
        this: *mut GiNaC_indexed,
        b: *const GiNaC_ex,
        symm: *const GiNaC_symmetry,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exERKNS_8symmetryES3_S3_S3_"]
    pub fn GiNaC_indexed_indexed7(
        this: *mut GiNaC_indexed,
        b: *const GiNaC_ex,
        symm: *const GiNaC_symmetry,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exERKNS_8symmetryES3_S3_S3_S3_"]
    pub fn GiNaC_indexed_indexed8(
        this: *mut GiNaC_indexed,
        b: *const GiNaC_ex,
        symm: *const GiNaC_symmetry,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
        i4: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exERKSt6vectorIS1_SaIS1_EE"]
    pub fn GiNaC_indexed_indexed9(
        this: *mut GiNaC_indexed,
        b: *const GiNaC_ex,
        iv: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_2exERKNS_8symmetryERKSt6vectorIS1_SaIS1_EE"]
    pub fn GiNaC_indexed_indexed10(
        this: *mut GiNaC_indexed,
        b: *const GiNaC_ex,
        symm: *const GiNaC_symmetry,
        iv: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_8symmetryERKNS_9containerISt6vectorEE"]
    pub fn GiNaC_indexed_indexed11(
        this: *mut GiNaC_indexed,
        symm: *const GiNaC_symmetry,
        es: *const GiNaC_exprseq,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_8symmetryERKSt6vectorINS_2exESaIS5_EE"]
    pub fn GiNaC_indexed_indexed12(
        this: *mut GiNaC_indexed,
        symm: *const GiNaC_symmetry,
        v: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexedC1ERKNS_8symmetryEOSt6vectorINS_2exESaIS5_EE"]
    pub fn GiNaC_indexed_indexed13(
        this: *mut GiNaC_indexed,
        symm: *const GiNaC_symmetry,
        v: *mut GiNaC_exvector,
    );
}
impl GiNaC_indexed {
    #[inline]
    pub unsafe fn all_index_values_are(
        &self,
        inf: ::std::os::raw::c_uint,
    ) -> bool {
        GiNaC_indexed_all_index_values_are(self, inf)
    }
    #[inline]
    pub unsafe fn get_indices(&self) -> GiNaC_exvector {
        GiNaC_indexed_get_indices(self)
    }
    #[inline]
    pub unsafe fn get_dummy_indices(&self) -> GiNaC_exvector {
        GiNaC_indexed_get_dummy_indices(self)
    }
    #[inline]
    pub unsafe fn get_dummy_indices1(
        &self,
        other: *const GiNaC_indexed,
    ) -> GiNaC_exvector {
        GiNaC_indexed_get_dummy_indices1(self, other)
    }
    #[inline]
    pub unsafe fn has_dummy_index_for(&self, i: *const GiNaC_ex) -> bool {
        GiNaC_indexed_has_dummy_index_for(self, i)
    }
    #[inline]
    pub unsafe fn printindices(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_indexed_printindices(self, c, level)
    }
    #[inline]
    pub unsafe fn print_indexed(
        &self,
        c: *const GiNaC_print_context,
        openbrace: *const ::std::os::raw::c_char,
        closebrace: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_indexed_print_indexed(self, c, openbrace, closebrace, level)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_indexed_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_indexed_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_indexed_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn validate(&self) {
        GiNaC_indexed_validate(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(b: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed1(__bindgen_tmp.as_mut_ptr(), b);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(b: *const GiNaC_ex, i1: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed2(__bindgen_tmp.as_mut_ptr(), b, i1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        b: *const GiNaC_ex,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed3(__bindgen_tmp.as_mut_ptr(), b, i1, i2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        b: *const GiNaC_ex,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed4(__bindgen_tmp.as_mut_ptr(), b, i1, i2, i3);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(
        b: *const GiNaC_ex,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
        i4: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed5(__bindgen_tmp.as_mut_ptr(), b, i1, i2, i3, i4);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(
        b: *const GiNaC_ex,
        symm: *const GiNaC_symmetry,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed6(__bindgen_tmp.as_mut_ptr(), b, symm, i1, i2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(
        b: *const GiNaC_ex,
        symm: *const GiNaC_symmetry,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed7(__bindgen_tmp.as_mut_ptr(), b, symm, i1, i2, i3);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new8(
        b: *const GiNaC_ex,
        symm: *const GiNaC_symmetry,
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
        i4: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed8(
            __bindgen_tmp.as_mut_ptr(),
            b,
            symm,
            i1,
            i2,
            i3,
            i4,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new9(b: *const GiNaC_ex, iv: *const GiNaC_exvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed9(__bindgen_tmp.as_mut_ptr(), b, iv);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new10(
        b: *const GiNaC_ex,
        symm: *const GiNaC_symmetry,
        iv: *const GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed10(__bindgen_tmp.as_mut_ptr(), b, symm, iv);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new11(
        symm: *const GiNaC_symmetry,
        es: *const GiNaC_exprseq,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed11(__bindgen_tmp.as_mut_ptr(), symm, es);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new12(
        symm: *const GiNaC_symmetry,
        v: *const GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed12(__bindgen_tmp.as_mut_ptr(), symm, v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new13(
        symm: *const GiNaC_symmetry,
        v: *mut GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_indexed13(__bindgen_tmp.as_mut_ptr(), symm, v);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_indexed_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed4infoEj"]
    pub fn GiNaC_indexed_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed4evalEv"]
    pub fn GiNaC_indexed_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed9real_partEv"]
    pub fn GiNaC_indexed_real_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed9imag_partEv"]
    pub fn GiNaC_indexed_imag_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed16get_free_indicesEv"]
    pub fn GiNaC_indexed_get_free_indices(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_indexed_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7indexed12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_indexed_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed10derivativeERKNS_6symbolE"]
    pub fn GiNaC_indexed_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed13thiscontainerERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_indexed_thiscontainer(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed13thiscontainerEOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_indexed_thiscontainer1(
        this: *mut ::std::os::raw::c_void,
        v: *mut GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed11return_typeEv"]
    pub fn GiNaC_indexed_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7indexed6expandEj"]
    pub fn GiNaC_indexed_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_indexed_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18indexed_unarchiver8usecountE"]
    pub static mut GiNaC_indexed_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_indexed_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_indexed_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_indexed_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_indexed_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_indexed_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18indexed_unarchiver6createEv"]
    pub fn GiNaC_indexed_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18indexed_unarchiverC1Ev"]
    pub fn GiNaC_indexed_unarchiver_indexed_unarchiver(
        this: *mut GiNaC_indexed_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18indexed_unarchiverD1Ev"]
    pub fn GiNaC_indexed_unarchiver_indexed_unarchiver_destructor(
        this: *mut GiNaC_indexed_unarchiver,
    );
}
impl GiNaC_indexed_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_indexed_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_indexed_unarchiver_indexed_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_indexed_unarchiver_indexed_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL27indexed_unarchiver_instanceE"]
    pub static mut GiNaC_indexed_unarchiver_instance: GiNaC_indexed_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_spmapkey {
    pub v1: GiNaC_ex,
    pub v2: GiNaC_ex,
    pub dim: GiNaC_ex,
}
#[test]
fn bindgen_test_layout_GiNaC_spmapkey() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_spmapkey>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_spmapkey))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_spmapkey>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_spmapkey))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_spmapkey>())).v1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_spmapkey),
            "::",
            stringify!(v1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_spmapkey>())).v2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_spmapkey),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_spmapkey>())).dim as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_spmapkey),
            "::",
            stringify!(dim)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8spmapkey10debugprintEv"]
    pub fn GiNaC_spmapkey_debugprint(this: *const GiNaC_spmapkey);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8spmapkeyC1ERKNS_2exES3_S3_"]
    pub fn GiNaC_spmapkey_spmapkey(
        this: *mut GiNaC_spmapkey,
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        dim: *const GiNaC_ex,
    );
}
impl GiNaC_spmapkey {
    #[inline]
    pub unsafe fn debugprint(&self) {
        GiNaC_spmapkey_debugprint(self)
    }
    #[inline]
    pub unsafe fn new(
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        dim: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_spmapkey_spmapkey(__bindgen_tmp.as_mut_ptr(), v1, v2, dim);
        __bindgen_tmp.assume_init()
    }
}
pub type GiNaC_spmap = [u64; 6usize];
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_scalar_products {
    pub spm: GiNaC_spmap,
}
#[test]
fn bindgen_test_layout_GiNaC_scalar_products() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_scalar_products>(),
        48usize,
        concat!("Size of: ", stringify!(GiNaC_scalar_products))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_scalar_products>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_scalar_products))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_scalar_products>())).spm as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_scalar_products),
            "::",
            stringify!(spm)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15scalar_products3addERKNS_2exES3_S3_"]
    pub fn GiNaC_scalar_products_add(
        this: *mut GiNaC_scalar_products,
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        sp: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15scalar_products3addERKNS_2exES3_S3_S3_"]
    pub fn GiNaC_scalar_products_add1(
        this: *mut GiNaC_scalar_products,
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        dim: *const GiNaC_ex,
        sp: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15scalar_products11add_vectorsERKNS_9containerINSt7__cxx114listEEERKNS_2exE"]
    pub fn GiNaC_scalar_products_add_vectors(
        this: *mut GiNaC_scalar_products,
        l: *const GiNaC_lst,
        dim: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15scalar_products5clearEv"]
    pub fn GiNaC_scalar_products_clear(this: *mut GiNaC_scalar_products);
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC15scalar_products10is_definedERKNS_2exES3_S3_"]
    pub fn GiNaC_scalar_products_is_defined(
        this: *const GiNaC_scalar_products,
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        dim: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC15scalar_products8evaluateERKNS_2exES3_S3_"]
    pub fn GiNaC_scalar_products_evaluate(
        this: *const GiNaC_scalar_products,
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        dim: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC15scalar_products10debugprintEv"]
    pub fn GiNaC_scalar_products_debugprint(this: *const GiNaC_scalar_products);
}
impl GiNaC_scalar_products {
    #[inline]
    pub unsafe fn add(
        &mut self,
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        sp: *const GiNaC_ex,
    ) {
        GiNaC_scalar_products_add(self, v1, v2, sp)
    }
    #[inline]
    pub unsafe fn add1(
        &mut self,
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        dim: *const GiNaC_ex,
        sp: *const GiNaC_ex,
    ) {
        GiNaC_scalar_products_add1(self, v1, v2, dim, sp)
    }
    #[inline]
    pub unsafe fn add_vectors(
        &mut self,
        l: *const GiNaC_lst,
        dim: *const GiNaC_ex,
    ) {
        GiNaC_scalar_products_add_vectors(self, l, dim)
    }
    #[inline]
    pub unsafe fn clear(&mut self) {
        GiNaC_scalar_products_clear(self)
    }
    #[inline]
    pub unsafe fn is_defined(
        &self,
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        dim: *const GiNaC_ex,
    ) -> bool {
        GiNaC_scalar_products_is_defined(self, v1, v2, dim)
    }
    #[inline]
    pub unsafe fn evaluate(
        &self,
        v1: *const GiNaC_ex,
        v2: *const GiNaC_ex,
        dim: *const GiNaC_ex,
    ) -> GiNaC_ex {
        GiNaC_scalar_products_evaluate(self, v1, v2, dim)
    }
    #[inline]
    pub unsafe fn debugprint(&self) {
        GiNaC_scalar_products_debugprint(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21get_all_dummy_indicesERKNS_2exE"]
    pub fn GiNaC_get_all_dummy_indices(e: *const GiNaC_ex) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC28get_all_dummy_indices_safelyERKNS_2exE"]
    pub fn GiNaC_get_all_dummy_indices_safely(
        e: *const GiNaC_ex,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC29rename_dummy_indices_uniquelyERSt6vectorINS_2exESaIS1_EERKS1_b"]
    pub fn GiNaC_rename_dummy_indices_uniquely(
        va: *mut GiNaC_exvector,
        b: *const GiNaC_ex,
        modify_va: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC29rename_dummy_indices_uniquelyERKNS_2exES2_"]
    pub fn GiNaC_rename_dummy_indices_uniquely1(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC29rename_dummy_indices_uniquelyERKSt6vectorINS_2exESaIS1_EES5_RKS1_"]
    pub fn GiNaC_rename_dummy_indices_uniquely2(
        va: *const GiNaC_exvector,
        vb: *const GiNaC_exvector,
        b: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC29rename_dummy_indices_uniquelyB5cxx11ERKSt6vectorINS_2exESaIS1_EES5_"]
    pub fn GiNaC_rename_dummy_indices_uniquely3(
        va: *const GiNaC_exvector,
        vb: *const GiNaC_exvector,
    ) -> GiNaC_lst;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16expand_dummy_sumERKNS_2exEb"]
    pub fn GiNaC_expand_dummy_sum(
        e: *const GiNaC_ex,
        subs_idx: bool,
    ) -> GiNaC_ex;
}
pub type GiNaC_epvector = [u64; 3usize];
pub type GiNaC_epp = __gnu_cxx___normal_iterator<pointer>;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17conjugateepvectorERKSt6vectorINS_6expairESaIS1_EE"]
    pub fn GiNaC_conjugateepvector(
        arg1: *const GiNaC_epvector,
    ) -> *mut GiNaC_epvector;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_expairseq {
    pub _base: GiNaC_basic,
    pub seq: GiNaC_epvector,
    pub overall_coeff: GiNaC_ex,
}
#[repr(C)]
pub struct GiNaC_expairseq_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_expairseq_visitor {
    pub vtable_: *const GiNaC_expairseq_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_expairseq_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_expairseq_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_expairseq_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_expairseq_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_expairseq_visitor))
    );
}
pub type GiNaC_expairseq_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq8reg_infoE"]
    pub static mut GiNaC_expairseq_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_expairseq() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_expairseq>(),
        56usize,
        concat!("Size of: ", stringify!(GiNaC_expairseq))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_expairseq>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_expairseq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_expairseq>())).seq as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_expairseq),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_expairseq>())).overall_coeff
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_expairseq),
            "::",
            stringify!(overall_coeff)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_expairseq_do_print(
        this: *const GiNaC_expairseq,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_expairseq_do_print_tree(
        this: *const GiNaC_expairseq,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq19construct_from_2_exERKNS_2exES3_"]
    pub fn GiNaC_expairseq_construct_from_2_ex(
        this: *mut GiNaC_expairseq,
        lh: *const GiNaC_ex,
        rh: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq26construct_from_2_expairseqERKS0_S2_"]
    pub fn GiNaC_expairseq_construct_from_2_expairseq(
        this: *mut GiNaC_expairseq,
        s1: *const GiNaC_expairseq,
        s2: *const GiNaC_expairseq,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq27construct_from_expairseq_exERKS0_RKNS_2exE"]
    pub fn GiNaC_expairseq_construct_from_expairseq_ex(
        this: *mut GiNaC_expairseq,
        s: *const GiNaC_expairseq,
        e: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq23construct_from_exvectorERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_expairseq_construct_from_exvector(
        this: *mut GiNaC_expairseq,
        v: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq23construct_from_epvectorERKSt6vectorINS_6expairESaIS2_EEb"]
    pub fn GiNaC_expairseq_construct_from_epvector(
        this: *mut GiNaC_expairseq,
        v: *const GiNaC_epvector,
        do_index_renaming: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq23construct_from_epvectorEOSt6vectorINS_6expairESaIS2_EEb"]
    pub fn GiNaC_expairseq_construct_from_epvector1(
        this: *mut GiNaC_expairseq,
        v: *mut GiNaC_epvector,
        do_index_renaming: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq9make_flatERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_expairseq_make_flat(
        this: *mut GiNaC_expairseq,
        v: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq9make_flatERKSt6vectorINS_6expairESaIS2_EEb"]
    pub fn GiNaC_expairseq_make_flat1(
        this: *mut GiNaC_expairseq,
        v: *const GiNaC_epvector,
        do_index_renaming: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq12canonicalizeEv"]
    pub fn GiNaC_expairseq_canonicalize(this: *mut GiNaC_expairseq);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq29combine_same_terms_sorted_seqEv"]
    pub fn GiNaC_expairseq_combine_same_terms_sorted_seq(
        this: *mut GiNaC_expairseq,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq12is_canonicalEv"]
    pub fn GiNaC_expairseq_is_canonical(this: *const GiNaC_expairseq) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq14expandchildrenEj"]
    pub fn GiNaC_expairseq_expandchildren(
        this: *const GiNaC_expairseq,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_epvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq12evalchildrenEv"]
    pub fn GiNaC_expairseq_evalchildren(
        this: *const GiNaC_expairseq,
    ) -> GiNaC_epvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq12subschildrenERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_expairseq_subschildren(
        this: *const GiNaC_expairseq,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_epvector;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseqC1Ev"]
    pub fn GiNaC_expairseq_expairseq(this: *mut GiNaC_expairseq);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseqC1ERKNS_2exES3_"]
    pub fn GiNaC_expairseq_expairseq1(
        this: *mut GiNaC_expairseq,
        lh: *const GiNaC_ex,
        rh: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseqC1ERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_expairseq_expairseq2(
        this: *mut GiNaC_expairseq,
        v: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseqC1ERKSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_expairseq_expairseq3(
        this: *mut GiNaC_expairseq,
        v: *const GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseqC1EOSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_expairseq_expairseq4(
        this: *mut GiNaC_expairseq,
        vp: *mut GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    );
}
impl GiNaC_expairseq {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_expairseq_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_expairseq_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn construct_from_2_ex(
        &mut self,
        lh: *const GiNaC_ex,
        rh: *const GiNaC_ex,
    ) {
        GiNaC_expairseq_construct_from_2_ex(self, lh, rh)
    }
    #[inline]
    pub unsafe fn construct_from_2_expairseq(
        &mut self,
        s1: *const GiNaC_expairseq,
        s2: *const GiNaC_expairseq,
    ) {
        GiNaC_expairseq_construct_from_2_expairseq(self, s1, s2)
    }
    #[inline]
    pub unsafe fn construct_from_expairseq_ex(
        &mut self,
        s: *const GiNaC_expairseq,
        e: *const GiNaC_ex,
    ) {
        GiNaC_expairseq_construct_from_expairseq_ex(self, s, e)
    }
    #[inline]
    pub unsafe fn construct_from_exvector(&mut self, v: *const GiNaC_exvector) {
        GiNaC_expairseq_construct_from_exvector(self, v)
    }
    #[inline]
    pub unsafe fn construct_from_epvector(
        &mut self,
        v: *const GiNaC_epvector,
        do_index_renaming: bool,
    ) {
        GiNaC_expairseq_construct_from_epvector(self, v, do_index_renaming)
    }
    #[inline]
    pub unsafe fn construct_from_epvector1(
        &mut self,
        v: *mut GiNaC_epvector,
        do_index_renaming: bool,
    ) {
        GiNaC_expairseq_construct_from_epvector1(self, v, do_index_renaming)
    }
    #[inline]
    pub unsafe fn make_flat(&mut self, v: *const GiNaC_exvector) {
        GiNaC_expairseq_make_flat(self, v)
    }
    #[inline]
    pub unsafe fn make_flat1(
        &mut self,
        v: *const GiNaC_epvector,
        do_index_renaming: bool,
    ) {
        GiNaC_expairseq_make_flat1(self, v, do_index_renaming)
    }
    #[inline]
    pub unsafe fn canonicalize(&mut self) {
        GiNaC_expairseq_canonicalize(self)
    }
    #[inline]
    pub unsafe fn combine_same_terms_sorted_seq(&mut self) {
        GiNaC_expairseq_combine_same_terms_sorted_seq(self)
    }
    #[inline]
    pub unsafe fn is_canonical(&self) -> bool {
        GiNaC_expairseq_is_canonical(self)
    }
    #[inline]
    pub unsafe fn expandchildren(
        &self,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_epvector {
        GiNaC_expairseq_expandchildren(self, options)
    }
    #[inline]
    pub unsafe fn evalchildren(&self) -> GiNaC_epvector {
        GiNaC_expairseq_evalchildren(self)
    }
    #[inline]
    pub unsafe fn subschildren(
        &self,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_epvector {
        GiNaC_expairseq_subschildren(self, m, options)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_expairseq_expairseq(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(lh: *const GiNaC_ex, rh: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_expairseq_expairseq1(__bindgen_tmp.as_mut_ptr(), lh, rh);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(v: *const GiNaC_exvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_expairseq_expairseq2(__bindgen_tmp.as_mut_ptr(), v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        v: *const GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_expairseq_expairseq3(
            __bindgen_tmp.as_mut_ptr(),
            v,
            oc,
            do_index_renaming,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        vp: *mut GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_expairseq_expairseq4(
            __bindgen_tmp.as_mut_ptr(),
            vp,
            oc,
            do_index_renaming,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_expairseq_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq4infoEj"]
    pub fn GiNaC_expairseq_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq4nopsEv"]
    pub fn GiNaC_expairseq_nops(this: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq2opEm"]
    pub fn GiNaC_expairseq_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq3mapERNS_12map_functionE"]
    pub fn GiNaC_expairseq_map(
        this: *mut ::std::os::raw::c_void,
        f: *mut GiNaC_map_function,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq4evalEv"]
    pub fn GiNaC_expairseq_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq11to_rationalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_expairseq_to_rational(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq13to_polynomialERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEE"]
    pub fn GiNaC_expairseq_to_polynomial(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq5matchERKNS_2exERSt3mapIS1_S1_NS_10ex_is_lessESaISt4pairIS2_S1_EEE"]
    pub fn GiNaC_expairseq_match(
        this: *mut ::std::os::raw::c_void,
        pattern: *const GiNaC_ex,
        repl_lst: *mut GiNaC_exmap,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq4subsERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_expairseq_subs(
        this: *mut ::std::os::raw::c_void,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq9conjugateEv"]
    pub fn GiNaC_expairseq_conjugate(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_expairseq_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_expairseq_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq18is_equal_same_typeERKNS_5basicE"]
    pub fn GiNaC_expairseq_is_equal_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq11return_typeEv"]
    pub fn GiNaC_expairseq_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq8calchashEv"]
    pub fn GiNaC_expairseq_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq6expandEj"]
    pub fn GiNaC_expairseq_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq13thisexpairseqERKSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_expairseq_thisexpairseq(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq13thisexpairseqEOSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_expairseq_thisexpairseq1(
        this: *mut ::std::os::raw::c_void,
        vp: *mut GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq8printseqERKNS_13print_contextEcjj"]
    pub fn GiNaC_expairseq_printseq(
        this: *mut ::std::os::raw::c_void,
        c: *const GiNaC_print_context,
        delim: ::std::os::raw::c_char,
        this_precedence: ::std::os::raw::c_uint,
        upper_precedence: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq9printpairERKNS_13print_contextERKNS_6expairEj"]
    pub fn GiNaC_expairseq_printpair(
        this: *mut ::std::os::raw::c_void,
        c: *const GiNaC_print_context,
        p: *const GiNaC_expair,
        upper_precedence: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq16split_ex_to_pairERKNS_2exE"]
    pub fn GiNaC_expairseq_split_ex_to_pair(
        this: *mut ::std::os::raw::c_void,
        e: *const GiNaC_ex,
    ) -> GiNaC_expair;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq29combine_ex_with_coeff_to_pairERKNS_2exES3_"]
    pub fn GiNaC_expairseq_combine_ex_with_coeff_to_pair(
        this: *mut ::std::os::raw::c_void,
        e: *const GiNaC_ex,
        c: *const GiNaC_ex,
    ) -> GiNaC_expair;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq31combine_pair_with_coeff_to_pairERKNS_6expairERKNS_2exE"]
    pub fn GiNaC_expairseq_combine_pair_with_coeff_to_pair(
        this: *mut ::std::os::raw::c_void,
        p: *const GiNaC_expair,
        c: *const GiNaC_ex,
    ) -> GiNaC_expair;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq20recombine_pair_to_exERKNS_6expairE"]
    pub fn GiNaC_expairseq_recombine_pair_to_ex(
        this: *mut ::std::os::raw::c_void,
        p: *const GiNaC_expair,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq31expair_needs_further_processingEN9__gnu_cxx17__normal_iteratorIPNS_6expairESt6vectorIS3_SaIS3_EEEE"]
    pub fn GiNaC_expairseq_expair_needs_further_processing(
        this: *mut ::std::os::raw::c_void,
        it: GiNaC_epp,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq21default_overall_coeffEv"]
    pub fn GiNaC_expairseq_default_overall_coeff(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq21combine_overall_coeffERKNS_2exE"]
    pub fn GiNaC_expairseq_combine_overall_coeff(
        this: *mut ::std::os::raw::c_void,
        c: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9expairseq21combine_overall_coeffERKNS_2exES3_"]
    pub fn GiNaC_expairseq_combine_overall_coeff1(
        this: *mut ::std::os::raw::c_void,
        c1: *const GiNaC_ex,
        c2: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9expairseq13can_make_flatERKNS_6expairE"]
    pub fn GiNaC_expairseq_can_make_flat(
        this: *mut ::std::os::raw::c_void,
        p: *const GiNaC_expair,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_make_flat_inserter {
    pub do_renaming: bool,
    pub used_indices: GiNaC_exvector,
}
#[test]
fn bindgen_test_layout_GiNaC_make_flat_inserter() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_make_flat_inserter>(),
        32usize,
        concat!("Size of: ", stringify!(GiNaC_make_flat_inserter))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_make_flat_inserter>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_make_flat_inserter))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_make_flat_inserter>())).do_renaming
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_make_flat_inserter),
            "::",
            stringify!(do_renaming)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_make_flat_inserter>())).used_indices
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_make_flat_inserter),
            "::",
            stringify!(used_indices)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pseries {
    pub _base: GiNaC_basic,
    pub seq: GiNaC_epvector,
    pub var: GiNaC_ex,
    pub point: GiNaC_ex,
}
#[repr(C)]
pub struct GiNaC_pseries_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pseries_visitor {
    pub vtable_: *const GiNaC_pseries_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_pseries_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_pseries_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_pseries_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_pseries_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_pseries_visitor))
    );
}
pub type GiNaC_pseries_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7pseries8reg_infoE"]
    pub static mut GiNaC_pseries_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_pseries() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_pseries>(),
        64usize,
        concat!("Size of: ", stringify!(GiNaC_pseries))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_pseries>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_pseries))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_pseries>())).seq as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_pseries),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_pseries>())).var as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_pseries),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_pseries>())).point as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_pseries),
            "::",
            stringify!(point)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries15convert_to_polyEb"]
    pub fn GiNaC_pseries_convert_to_poly(
        this: *const GiNaC_pseries,
        no_order: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries14is_terminatingEv"]
    pub fn GiNaC_pseries_is_terminating(this: *const GiNaC_pseries) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries7coeffopEm"]
    pub fn GiNaC_pseries_coeffop(
        this: *const GiNaC_pseries,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries7exponopEm"]
    pub fn GiNaC_pseries_exponop(
        this: *const GiNaC_pseries,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries10add_seriesERKS0_"]
    pub fn GiNaC_pseries_add_series(
        this: *const GiNaC_pseries,
        other: *const GiNaC_pseries,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries9mul_constERKNS_7numericE"]
    pub fn GiNaC_pseries_mul_const(
        this: *const GiNaC_pseries,
        other: *const GiNaC_numeric,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries10mul_seriesERKS0_"]
    pub fn GiNaC_pseries_mul_series(
        this: *const GiNaC_pseries,
        other: *const GiNaC_pseries,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries11power_constERKNS_7numericEi"]
    pub fn GiNaC_pseries_power_const(
        this: *const GiNaC_pseries,
        p: *const GiNaC_numeric,
        deg: ::std::os::raw::c_int,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries15shift_exponentsEi"]
    pub fn GiNaC_pseries_shift_exponents(
        this: *const GiNaC_pseries,
        deg: ::std::os::raw::c_int,
    ) -> GiNaC_pseries;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries12print_seriesERKNS_13print_contextEPKcS5_S5_S5_j"]
    pub fn GiNaC_pseries_print_series(
        this: *const GiNaC_pseries,
        c: *const GiNaC_print_context,
        openbrace: *const ::std::os::raw::c_char,
        closebrace: *const ::std::os::raw::c_char,
        mul_sym: *const ::std::os::raw::c_char,
        pow_sym: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_pseries_do_print(
        this: *const GiNaC_pseries,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_pseries_do_print_latex(
        this: *const GiNaC_pseries,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_pseries_do_print_tree(
        this: *const GiNaC_pseries,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries15do_print_pythonERKNS_12print_pythonEj"]
    pub fn GiNaC_pseries_do_print_python(
        this: *const GiNaC_pseries,
        c: *const GiNaC_print_python,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_pseries_do_print_python_repr(
        this: *const GiNaC_pseries,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7pseriesC1Ev"]
    pub fn GiNaC_pseries_pseries(this: *mut GiNaC_pseries);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7pseriesC1ERKNS_2exERKSt6vectorINS_6expairESaIS5_EE"]
    pub fn GiNaC_pseries_pseries1(
        this: *mut GiNaC_pseries,
        rel_: *const GiNaC_ex,
        ops_: *const GiNaC_epvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7pseriesC1ERKNS_2exEOSt6vectorINS_6expairESaIS5_EE"]
    pub fn GiNaC_pseries_pseries2(
        this: *mut GiNaC_pseries,
        rel_: *const GiNaC_ex,
        ops_: *mut GiNaC_epvector,
    );
}
impl GiNaC_pseries {
    #[inline]
    pub unsafe fn convert_to_poly(&self, no_order: bool) -> GiNaC_ex {
        GiNaC_pseries_convert_to_poly(self, no_order)
    }
    #[inline]
    pub unsafe fn is_terminating(&self) -> bool {
        GiNaC_pseries_is_terminating(self)
    }
    #[inline]
    pub unsafe fn coeffop(&self, i: size_t) -> GiNaC_ex {
        GiNaC_pseries_coeffop(self, i)
    }
    #[inline]
    pub unsafe fn exponop(&self, i: size_t) -> GiNaC_ex {
        GiNaC_pseries_exponop(self, i)
    }
    #[inline]
    pub unsafe fn add_series(&self, other: *const GiNaC_pseries) -> GiNaC_ex {
        GiNaC_pseries_add_series(self, other)
    }
    #[inline]
    pub unsafe fn mul_const(&self, other: *const GiNaC_numeric) -> GiNaC_ex {
        GiNaC_pseries_mul_const(self, other)
    }
    #[inline]
    pub unsafe fn mul_series(&self, other: *const GiNaC_pseries) -> GiNaC_ex {
        GiNaC_pseries_mul_series(self, other)
    }
    #[inline]
    pub unsafe fn power_const(
        &self,
        p: *const GiNaC_numeric,
        deg: ::std::os::raw::c_int,
    ) -> GiNaC_ex {
        GiNaC_pseries_power_const(self, p, deg)
    }
    #[inline]
    pub unsafe fn shift_exponents(
        &self,
        deg: ::std::os::raw::c_int,
    ) -> GiNaC_pseries {
        GiNaC_pseries_shift_exponents(self, deg)
    }
    #[inline]
    pub unsafe fn print_series(
        &self,
        c: *const GiNaC_print_context,
        openbrace: *const ::std::os::raw::c_char,
        closebrace: *const ::std::os::raw::c_char,
        mul_sym: *const ::std::os::raw::c_char,
        pow_sym: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_pseries_print_series(
            self, c, openbrace, closebrace, mul_sym, pow_sym, level,
        )
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_pseries_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_pseries_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_pseries_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python(
        &self,
        c: *const GiNaC_print_python,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_pseries_do_print_python(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_pseries_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_pseries_pseries(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        rel_: *const GiNaC_ex,
        ops_: *const GiNaC_epvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_pseries_pseries1(__bindgen_tmp.as_mut_ptr(), rel_, ops_);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        rel_: *const GiNaC_ex,
        ops_: *mut GiNaC_epvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_pseries_pseries2(__bindgen_tmp.as_mut_ptr(), rel_, ops_);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_pseries_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries4nopsEv"]
    pub fn GiNaC_pseries_nops(this: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries2opEm"]
    pub fn GiNaC_pseries_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries6degreeERKNS_2exE"]
    pub fn GiNaC_pseries_degree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries7ldegreeERKNS_2exE"]
    pub fn GiNaC_pseries_ldegree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries5coeffERKNS_2exEi"]
    pub fn GiNaC_pseries_coeff(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
        n: ::std::os::raw::c_int,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries7collectERKNS_2exEb"]
    pub fn GiNaC_pseries_collect(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
        distributed: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries4evalEv"]
    pub fn GiNaC_pseries_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries5evalfEv"]
    pub fn GiNaC_pseries_evalf(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries6seriesERKNS_10relationalEij"]
    pub fn GiNaC_pseries_series(
        this: *mut ::std::os::raw::c_void,
        r: *const GiNaC_relational,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries4subsERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_pseries_subs(
        this: *mut ::std::os::raw::c_void,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries6normalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEES9_"]
    pub fn GiNaC_pseries_normal(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
        rev_lookup: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries6expandEj"]
    pub fn GiNaC_pseries_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries9conjugateEv"]
    pub fn GiNaC_pseries_conjugate(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries9real_partEv"]
    pub fn GiNaC_pseries_real_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries9imag_partEv"]
    pub fn GiNaC_pseries_imag_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries10eval_integEv"]
    pub fn GiNaC_pseries_eval_integ(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries5evalmEv"]
    pub fn GiNaC_pseries_evalm(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_pseries_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7pseries12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_pseries_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7pseries10derivativeERKNS_6symbolE"]
    pub fn GiNaC_pseries_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_pseries_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18pseries_unarchiver8usecountE"]
    pub static mut GiNaC_pseries_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_pseries_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_pseries_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_pseries_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_pseries_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_pseries_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18pseries_unarchiver6createEv"]
    pub fn GiNaC_pseries_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18pseries_unarchiverC1Ev"]
    pub fn GiNaC_pseries_unarchiver_pseries_unarchiver(
        this: *mut GiNaC_pseries_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18pseries_unarchiverD1Ev"]
    pub fn GiNaC_pseries_unarchiver_pseries_unarchiver_destructor(
        this: *mut GiNaC_pseries_unarchiver,
    );
}
impl GiNaC_pseries_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_pseries_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_pseries_unarchiver_pseries_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_pseries_unarchiver_pseries_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL27pseries_unarchiver_instanceE"]
    pub static mut GiNaC_pseries_unarchiver_instance: GiNaC_pseries_unarchiver;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_sy_is_less {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_sy_swap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_symmetry {
    pub _base: GiNaC_basic,
    pub type_: GiNaC_symmetry_symmetry_type,
    pub indices: [u64; 6usize],
    pub children: GiNaC_exvector,
}
#[repr(C)]
pub struct GiNaC_symmetry_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_symmetry_visitor {
    pub vtable_: *const GiNaC_symmetry_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_symmetry_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_symmetry_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_symmetry_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_symmetry_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_symmetry_visitor))
    );
}
pub type GiNaC_symmetry_inherited = GiNaC_basic;
pub const GiNaC_symmetry_symmetry_type_none: GiNaC_symmetry_symmetry_type = 0;
pub const GiNaC_symmetry_symmetry_type_symmetric: GiNaC_symmetry_symmetry_type =
    1;
pub const GiNaC_symmetry_symmetry_type_antisymmetric:
    GiNaC_symmetry_symmetry_type = 2;
pub const GiNaC_symmetry_symmetry_type_cyclic: GiNaC_symmetry_symmetry_type = 3;
pub type GiNaC_symmetry_symmetry_type = u32;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8symmetry8reg_infoE"]
    pub static mut GiNaC_symmetry_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_symmetry() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_symmetry>(),
        96usize,
        concat!("Size of: ", stringify!(GiNaC_symmetry))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_symmetry>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_symmetry))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_symmetry>())).type_ as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_symmetry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_symmetry>())).indices as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_symmetry),
            "::",
            stringify!(indices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_symmetry>())).children as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_symmetry),
            "::",
            stringify!(children)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8symmetry3addERKS0_"]
    pub fn GiNaC_symmetry_add(
        this: *mut GiNaC_symmetry,
        c: *const GiNaC_symmetry,
    ) -> *mut GiNaC_symmetry;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8symmetry8validateEj"]
    pub fn GiNaC_symmetry_validate(
        this: *mut GiNaC_symmetry,
        n: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8symmetry16has_nonsymmetricEv"]
    pub fn GiNaC_symmetry_has_nonsymmetric(this: *const GiNaC_symmetry)
        -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8symmetry10has_cyclicEv"]
    pub fn GiNaC_symmetry_has_cyclic(this: *const GiNaC_symmetry) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8symmetry8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_symmetry_do_print(
        this: *const GiNaC_symmetry,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8symmetry13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_symmetry_do_print_tree(
        this: *const GiNaC_symmetry,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8symmetryC1Ev"]
    pub fn GiNaC_symmetry_symmetry(this: *mut GiNaC_symmetry);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8symmetryC1Ej"]
    pub fn GiNaC_symmetry_symmetry1(
        this: *mut GiNaC_symmetry,
        i: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8symmetryC1ENS0_13symmetry_typeERKS0_S3_"]
    pub fn GiNaC_symmetry_symmetry2(
        this: *mut GiNaC_symmetry,
        t: GiNaC_symmetry_symmetry_type,
        c1: *const GiNaC_symmetry,
        c2: *const GiNaC_symmetry,
    );
}
impl GiNaC_symmetry {
    #[inline]
    pub unsafe fn add(
        &mut self,
        c: *const GiNaC_symmetry,
    ) -> *mut GiNaC_symmetry {
        GiNaC_symmetry_add(self, c)
    }
    #[inline]
    pub unsafe fn validate(&mut self, n: ::std::os::raw::c_uint) {
        GiNaC_symmetry_validate(self, n)
    }
    #[inline]
    pub unsafe fn has_nonsymmetric(&self) -> bool {
        GiNaC_symmetry_has_nonsymmetric(self)
    }
    #[inline]
    pub unsafe fn has_cyclic(&self) -> bool {
        GiNaC_symmetry_has_cyclic(self)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_symmetry_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_symmetry_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_symmetry_symmetry(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(i: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_symmetry_symmetry1(__bindgen_tmp.as_mut_ptr(), i);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        t: GiNaC_symmetry_symmetry_type,
        c1: *const GiNaC_symmetry,
        c2: *const GiNaC_symmetry,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_symmetry_symmetry2(__bindgen_tmp.as_mut_ptr(), t, c1, c2);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8symmetry17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_symmetry_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8symmetry7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_symmetry_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8symmetry12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_symmetry_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8symmetry8calchashEv"]
    pub fn GiNaC_symmetry_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_symmetry_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19symmetry_unarchiver8usecountE"]
    pub static mut GiNaC_symmetry_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_symmetry_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_symmetry_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_symmetry_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_symmetry_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_symmetry_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19symmetry_unarchiver6createEv"]
    pub fn GiNaC_symmetry_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19symmetry_unarchiverC1Ev"]
    pub fn GiNaC_symmetry_unarchiver_symmetry_unarchiver(
        this: *mut GiNaC_symmetry_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19symmetry_unarchiverD1Ev"]
    pub fn GiNaC_symmetry_unarchiver_symmetry_unarchiver_destructor(
        this: *mut GiNaC_symmetry_unarchiver,
    );
}
impl GiNaC_symmetry_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_symmetry_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_symmetry_unarchiver_symmetry_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_symmetry_unarchiver_symmetry_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL28symmetry_unarchiver_instanceE"]
    pub static mut GiNaC_symmetry_unarchiver_instance:
        GiNaC_symmetry_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13not_symmetricEv"]
    pub fn GiNaC_not_symmetric() -> *const GiNaC_symmetry;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10symmetric2Ev"]
    pub fn GiNaC_symmetric2() -> *const GiNaC_symmetry;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10symmetric3Ev"]
    pub fn GiNaC_symmetric3() -> *const GiNaC_symmetry;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10symmetric4Ev"]
    pub fn GiNaC_symmetric4() -> *const GiNaC_symmetry;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14antisymmetric2Ev"]
    pub fn GiNaC_antisymmetric2() -> *const GiNaC_symmetry;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14antisymmetric3Ev"]
    pub fn GiNaC_antisymmetric3() -> *const GiNaC_symmetry;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14antisymmetric4Ev"]
    pub fn GiNaC_antisymmetric4() -> *const GiNaC_symmetry;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12canonicalizeEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS2_SaIS2_EEEERKNS_8symmetryE"]
    pub fn GiNaC_canonicalize(
        v: __gnu_cxx___normal_iterator<pointer>,
        symm: *const GiNaC_symmetry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10symmetrizeERKNS_2exEN9__gnu_cxx17__normal_iteratorIPS1_St6vectorIS0_SaIS0_EEEES9_"]
    pub fn GiNaC_symmetrize(
        e: *const GiNaC_ex,
        first: __gnu_cxx___normal_iterator<const_pointer>,
        last: __gnu_cxx___normal_iterator<const_pointer>,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14antisymmetrizeERKNS_2exEN9__gnu_cxx17__normal_iteratorIPS1_St6vectorIS0_SaIS0_EEEES9_"]
    pub fn GiNaC_antisymmetrize(
        e: *const GiNaC_ex,
        first: __gnu_cxx___normal_iterator<const_pointer>,
        last: __gnu_cxx___normal_iterator<const_pointer>,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17symmetrize_cyclicERKNS_2exEN9__gnu_cxx17__normal_iteratorIPS1_St6vectorIS0_SaIS0_EEEES9_"]
    pub fn GiNaC_symmetrize_cyclic(
        e: *const GiNaC_ex,
        first: __gnu_cxx___normal_iterator<const_pointer>,
        last: __gnu_cxx___normal_iterator<const_pointer>,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_add {
    pub _base: GiNaC_expairseq,
}
#[repr(C)]
pub struct GiNaC_add_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_add_visitor {
    pub vtable_: *const GiNaC_add_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_add_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_add_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_add_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_add_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_add_visitor))
    );
}
pub type GiNaC_add_inherited = GiNaC_expairseq;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3add8reg_infoE"]
    pub static mut GiNaC_add_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_add() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_add>(),
        56usize,
        concat!("Size of: ", stringify!(GiNaC_add))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_add>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_add))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add9print_addERKNS_13print_contextEPKcS5_S5_j"]
    pub fn GiNaC_add_print_add(
        this: *const GiNaC_add,
        c: *const GiNaC_print_context,
        openbrace: *const ::std::os::raw::c_char,
        closebrace: *const ::std::os::raw::c_char,
        mul_sym: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_add_do_print(
        this: *const GiNaC_add,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_add_do_print_latex(
        this: *const GiNaC_add,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add13do_print_csrcERKNS_10print_csrcEj"]
    pub fn GiNaC_add_do_print_csrc(
        this: *const GiNaC_add,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_add_do_print_python_repr(
        this: *const GiNaC_add,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3addC1Ev"]
    pub fn GiNaC_add_add(this: *mut GiNaC_add);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3addC1ERKNS_2exES3_"]
    pub fn GiNaC_add_add1(
        this: *mut GiNaC_add,
        lh: *const GiNaC_ex,
        rh: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3addC1ERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_add_add2(this: *mut GiNaC_add, v: *const GiNaC_exvector);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3addC1ERKSt6vectorINS_6expairESaIS2_EE"]
    pub fn GiNaC_add_add3(this: *mut GiNaC_add, v: *const GiNaC_epvector);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3addC1ERKSt6vectorINS_6expairESaIS2_EERKNS_2exE"]
    pub fn GiNaC_add_add4(
        this: *mut GiNaC_add,
        v: *const GiNaC_epvector,
        oc: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3addC1EOSt6vectorINS_6expairESaIS2_EE"]
    pub fn GiNaC_add_add5(this: *mut GiNaC_add, v: *mut GiNaC_epvector);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3addC1EOSt6vectorINS_6expairESaIS2_EERKNS_2exE"]
    pub fn GiNaC_add_add6(
        this: *mut GiNaC_add,
        v: *mut GiNaC_epvector,
        oc: *const GiNaC_ex,
    );
}
impl GiNaC_add {
    #[inline]
    pub unsafe fn print_add(
        &self,
        c: *const GiNaC_print_context,
        openbrace: *const ::std::os::raw::c_char,
        closebrace: *const ::std::os::raw::c_char,
        mul_sym: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_add_print_add(self, c, openbrace, closebrace, mul_sym, level)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_add_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_add_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_csrc(
        &self,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_add_do_print_csrc(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_add_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_add_add(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(lh: *const GiNaC_ex, rh: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_add_add1(__bindgen_tmp.as_mut_ptr(), lh, rh);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(v: *const GiNaC_exvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_add_add2(__bindgen_tmp.as_mut_ptr(), v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(v: *const GiNaC_epvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_add_add3(__bindgen_tmp.as_mut_ptr(), v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(v: *const GiNaC_epvector, oc: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_add_add4(__bindgen_tmp.as_mut_ptr(), v, oc);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(v: *mut GiNaC_epvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_add_add5(__bindgen_tmp.as_mut_ptr(), v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(v: *mut GiNaC_epvector, oc: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_add_add6(__bindgen_tmp.as_mut_ptr(), v, oc);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_add_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add4infoEj"]
    pub fn GiNaC_add_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add13is_polynomialERKNS_2exE"]
    pub fn GiNaC_add_is_polynomial(
        this: *mut ::std::os::raw::c_void,
        var: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add6degreeERKNS_2exE"]
    pub fn GiNaC_add_degree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add7ldegreeERKNS_2exE"]
    pub fn GiNaC_add_ldegree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add5coeffERKNS_2exEi"]
    pub fn GiNaC_add_coeff(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
        n: ::std::os::raw::c_int,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add4evalEv"]
    pub fn GiNaC_add_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add5evalmEv"]
    pub fn GiNaC_add_evalm(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add6seriesERKNS_10relationalEij"]
    pub fn GiNaC_add_series(
        this: *mut ::std::os::raw::c_void,
        r: *const GiNaC_relational,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add6normalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEES9_"]
    pub fn GiNaC_add_normal(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
        rev_lookup: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add15integer_contentEv"]
    pub fn GiNaC_add_integer_content(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add4smodERKNS_7numericE"]
    pub fn GiNaC_add_smod(
        this: *mut ::std::os::raw::c_void,
        xi: *const GiNaC_numeric,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add15max_coefficientEv"]
    pub fn GiNaC_add_max_coefficient(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add9conjugateEv"]
    pub fn GiNaC_add_conjugate(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add9real_partEv"]
    pub fn GiNaC_add_real_part(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add9imag_partEv"]
    pub fn GiNaC_add_imag_part(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add16get_free_indicesEv"]
    pub fn GiNaC_add_get_free_indices(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add10eval_ncmulERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_add_eval_ncmul(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add10derivativeERKNS_6symbolE"]
    pub fn GiNaC_add_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add11return_typeEv"]
    pub fn GiNaC_add_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add17return_type_tinfoEv"]
    pub fn GiNaC_add_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add13thisexpairseqERKSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_add_thisexpairseq(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add13thisexpairseqEOSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_add_thisexpairseq1(
        this: *mut ::std::os::raw::c_void,
        vp: *mut GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add16split_ex_to_pairERKNS_2exE"]
    pub fn GiNaC_add_split_ex_to_pair(
        this: *mut ::std::os::raw::c_void,
        e: *const GiNaC_ex,
    ) -> GiNaC_expair;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add29combine_ex_with_coeff_to_pairERKNS_2exES3_"]
    pub fn GiNaC_add_combine_ex_with_coeff_to_pair(
        this: *mut ::std::os::raw::c_void,
        e: *const GiNaC_ex,
        c: *const GiNaC_ex,
    ) -> GiNaC_expair;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add31combine_pair_with_coeff_to_pairERKNS_6expairERKNS_2exE"]
    pub fn GiNaC_add_combine_pair_with_coeff_to_pair(
        this: *mut ::std::os::raw::c_void,
        p: *const GiNaC_expair,
        c: *const GiNaC_ex,
    ) -> GiNaC_expair;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add20recombine_pair_to_exERKNS_6expairE"]
    pub fn GiNaC_add_recombine_pair_to_ex(
        this: *mut ::std::os::raw::c_void,
        p: *const GiNaC_expair,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3add6expandEj"]
    pub fn GiNaC_add_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_add_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14add_unarchiver8usecountE"]
    pub static mut GiNaC_add_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_add_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_add_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_add_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_add_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_add_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14add_unarchiver6createEv"]
    pub fn GiNaC_add_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14add_unarchiverC1Ev"]
    pub fn GiNaC_add_unarchiver_add_unarchiver(this: *mut GiNaC_add_unarchiver);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14add_unarchiverD1Ev"]
    pub fn GiNaC_add_unarchiver_add_unarchiver_destructor(
        this: *mut GiNaC_add_unarchiver,
    );
}
impl GiNaC_add_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_add_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_add_unarchiver_add_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_add_unarchiver_add_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL23add_unarchiver_instanceE"]
    pub static mut GiNaC_add_unarchiver_instance: GiNaC_add_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_mul {
    pub _base: GiNaC_expairseq,
}
#[repr(C)]
pub struct GiNaC_mul_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_mul_visitor {
    pub vtable_: *const GiNaC_mul_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_mul_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_mul_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_mul_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_mul_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_mul_visitor))
    );
}
pub type GiNaC_mul_inherited = GiNaC_expairseq;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mul8reg_infoE"]
    pub static mut GiNaC_mul_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_mul() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_mul>(),
        56usize,
        concat!("Size of: ", stringify!(GiNaC_mul))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_mul>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_mul))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul18algebraic_subs_mulERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_mul_algebraic_subs_mul(
        this: *const GiNaC_mul,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul14find_real_imagERNS_2exES2_"]
    pub fn GiNaC_mul_find_real_imag(
        this: *const GiNaC_mul,
        arg1: *mut GiNaC_ex,
        arg2: *mut GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul19print_overall_coeffERKNS_13print_contextEPKc"]
    pub fn GiNaC_mul_print_overall_coeff(
        this: *const GiNaC_mul,
        c: *const GiNaC_print_context,
        mul_sym: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_mul_do_print(
        this: *const GiNaC_mul,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_mul_do_print_latex(
        this: *const GiNaC_mul,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul13do_print_csrcERKNS_10print_csrcEj"]
    pub fn GiNaC_mul_do_print_csrc(
        this: *const GiNaC_mul,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul20do_print_python_reprERKNS_17print_python_reprEj"]
    pub fn GiNaC_mul_do_print_python_repr(
        this: *const GiNaC_mul,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mul23can_be_further_expandedERKNS_2exE"]
    pub fn GiNaC_mul_can_be_further_expanded(e: *const GiNaC_ex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul14expandchildrenEj"]
    pub fn GiNaC_mul_expandchildren(
        this: *const GiNaC_mul,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_epvector;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mulC1Ev"]
    pub fn GiNaC_mul_mul(this: *mut GiNaC_mul);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mulC1ERKNS_2exES3_"]
    pub fn GiNaC_mul_mul1(
        this: *mut GiNaC_mul,
        lh: *const GiNaC_ex,
        rh: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mulC1ERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_mul_mul2(this: *mut GiNaC_mul, v: *const GiNaC_exvector);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mulC1ERKSt6vectorINS_6expairESaIS2_EE"]
    pub fn GiNaC_mul_mul3(this: *mut GiNaC_mul, v: *const GiNaC_epvector);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mulC1ERKSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_mul_mul4(
        this: *mut GiNaC_mul,
        v: *const GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mulC1EOSt6vectorINS_6expairESaIS2_EE"]
    pub fn GiNaC_mul_mul5(this: *mut GiNaC_mul, vp: *mut GiNaC_epvector);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mulC1EOSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_mul_mul6(
        this: *mut GiNaC_mul,
        vp: *mut GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mulC1ERKNS_2exES3_S3_"]
    pub fn GiNaC_mul_mul7(
        this: *mut GiNaC_mul,
        lh: *const GiNaC_ex,
        mh: *const GiNaC_ex,
        rh: *const GiNaC_ex,
    );
}
impl GiNaC_mul {
    #[inline]
    pub unsafe fn algebraic_subs_mul(
        &self,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_mul_algebraic_subs_mul(self, m, options)
    }
    #[inline]
    pub unsafe fn find_real_imag(
        &self,
        arg1: *mut GiNaC_ex,
        arg2: *mut GiNaC_ex,
    ) {
        GiNaC_mul_find_real_imag(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn print_overall_coeff(
        &self,
        c: *const GiNaC_print_context,
        mul_sym: *const ::std::os::raw::c_char,
    ) {
        GiNaC_mul_print_overall_coeff(self, c, mul_sym)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_mul_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_mul_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_csrc(
        &self,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_mul_do_print_csrc(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_python_repr(
        &self,
        c: *const GiNaC_print_python_repr,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_mul_do_print_python_repr(self, c, level)
    }
    #[inline]
    pub unsafe fn can_be_further_expanded(e: *const GiNaC_ex) -> bool {
        GiNaC_mul_can_be_further_expanded(e)
    }
    #[inline]
    pub unsafe fn expandchildren(
        &self,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_epvector {
        GiNaC_mul_expandchildren(self, options)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_mul_mul(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(lh: *const GiNaC_ex, rh: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_mul_mul1(__bindgen_tmp.as_mut_ptr(), lh, rh);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(v: *const GiNaC_exvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_mul_mul2(__bindgen_tmp.as_mut_ptr(), v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(v: *const GiNaC_epvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_mul_mul3(__bindgen_tmp.as_mut_ptr(), v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        v: *const GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_mul_mul4(__bindgen_tmp.as_mut_ptr(), v, oc, do_index_renaming);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(vp: *mut GiNaC_epvector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_mul_mul5(__bindgen_tmp.as_mut_ptr(), vp);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(
        vp: *mut GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_mul_mul6(__bindgen_tmp.as_mut_ptr(), vp, oc, do_index_renaming);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(
        lh: *const GiNaC_ex,
        mh: *const GiNaC_ex,
        rh: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_mul_mul7(__bindgen_tmp.as_mut_ptr(), lh, mh, rh);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_mul_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul4infoEj"]
    pub fn GiNaC_mul_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul13is_polynomialERKNS_2exE"]
    pub fn GiNaC_mul_is_polynomial(
        this: *mut ::std::os::raw::c_void,
        var: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul6degreeERKNS_2exE"]
    pub fn GiNaC_mul_degree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul7ldegreeERKNS_2exE"]
    pub fn GiNaC_mul_ldegree(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul5coeffERKNS_2exEi"]
    pub fn GiNaC_mul_coeff(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_ex,
        n: ::std::os::raw::c_int,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul3hasERKNS_2exEj"]
    pub fn GiNaC_mul_has(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul4evalEv"]
    pub fn GiNaC_mul_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul5evalfEv"]
    pub fn GiNaC_mul_evalf(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul9real_partEv"]
    pub fn GiNaC_mul_real_part(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul9imag_partEv"]
    pub fn GiNaC_mul_imag_part(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul5evalmEv"]
    pub fn GiNaC_mul_evalm(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul6seriesERKNS_10relationalEij"]
    pub fn GiNaC_mul_series(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_relational,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul6normalERSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEES9_"]
    pub fn GiNaC_mul_normal(
        this: *mut ::std::os::raw::c_void,
        repl: *mut GiNaC_exmap,
        rev_lookup: *mut GiNaC_exmap,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul15integer_contentEv"]
    pub fn GiNaC_mul_integer_content(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul4smodERKNS_7numericE"]
    pub fn GiNaC_mul_smod(
        this: *mut ::std::os::raw::c_void,
        xi: *const GiNaC_numeric,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul15max_coefficientEv"]
    pub fn GiNaC_mul_max_coefficient(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul16get_free_indicesEv"]
    pub fn GiNaC_mul_get_free_indices(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_exvector;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul9conjugateEv"]
    pub fn GiNaC_mul_conjugate(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul10derivativeERKNS_6symbolE"]
    pub fn GiNaC_mul_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul10eval_ncmulERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_mul_eval_ncmul(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul11return_typeEv"]
    pub fn GiNaC_mul_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul17return_type_tinfoEv"]
    pub fn GiNaC_mul_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul13thisexpairseqERKSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_mul_thisexpairseq(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul13thisexpairseqEOSt6vectorINS_6expairESaIS2_EERKNS_2exEb"]
    pub fn GiNaC_mul_thisexpairseq1(
        this: *mut ::std::os::raw::c_void,
        vp: *mut GiNaC_epvector,
        oc: *const GiNaC_ex,
        do_index_renaming: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul16split_ex_to_pairERKNS_2exE"]
    pub fn GiNaC_mul_split_ex_to_pair(
        this: *mut ::std::os::raw::c_void,
        e: *const GiNaC_ex,
    ) -> GiNaC_expair;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul29combine_ex_with_coeff_to_pairERKNS_2exES3_"]
    pub fn GiNaC_mul_combine_ex_with_coeff_to_pair(
        this: *mut ::std::os::raw::c_void,
        e: *const GiNaC_ex,
        c: *const GiNaC_ex,
    ) -> GiNaC_expair;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul31combine_pair_with_coeff_to_pairERKNS_6expairERKNS_2exE"]
    pub fn GiNaC_mul_combine_pair_with_coeff_to_pair(
        this: *mut ::std::os::raw::c_void,
        p: *const GiNaC_expair,
        c: *const GiNaC_ex,
    ) -> GiNaC_expair;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul20recombine_pair_to_exERKNS_6expairE"]
    pub fn GiNaC_mul_recombine_pair_to_ex(
        this: *mut ::std::os::raw::c_void,
        p: *const GiNaC_expair,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mul31expair_needs_further_processingEN9__gnu_cxx17__normal_iteratorIPNS_6expairESt6vectorIS3_SaIS3_EEEE"]
    pub fn GiNaC_mul_expair_needs_further_processing(
        this: *mut ::std::os::raw::c_void,
        it: GiNaC_epp,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul21default_overall_coeffEv"]
    pub fn GiNaC_mul_default_overall_coeff(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mul21combine_overall_coeffERKNS_2exE"]
    pub fn GiNaC_mul_combine_overall_coeff(
        this: *mut ::std::os::raw::c_void,
        c: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3mul21combine_overall_coeffERKNS_2exES3_"]
    pub fn GiNaC_mul_combine_overall_coeff1(
        this: *mut ::std::os::raw::c_void,
        c1: *const GiNaC_ex,
        c2: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul13can_make_flatERKNS_6expairE"]
    pub fn GiNaC_mul_can_make_flat(
        this: *mut ::std::os::raw::c_void,
        p: *const GiNaC_expair,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3mul6expandEj"]
    pub fn GiNaC_mul_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_mul_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14mul_unarchiver8usecountE"]
    pub static mut GiNaC_mul_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_mul_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_mul_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_mul_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_mul_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_mul_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14mul_unarchiver6createEv"]
    pub fn GiNaC_mul_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14mul_unarchiverC1Ev"]
    pub fn GiNaC_mul_unarchiver_mul_unarchiver(this: *mut GiNaC_mul_unarchiver);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14mul_unarchiverD1Ev"]
    pub fn GiNaC_mul_unarchiver_mul_unarchiver_destructor(
        this: *mut GiNaC_mul_unarchiver,
    );
}
impl GiNaC_mul_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_mul_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_mul_unarchiver_mul_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_mul_unarchiver_mul_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL23mul_unarchiver_instanceE"]
    pub static mut GiNaC_mul_unarchiver_instance: GiNaC_mul_unarchiver;
}
pub type GiNaC_eval_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_evalf_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_conjugate_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_real_part_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_imag_part_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_expand_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_derivative_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_expl_derivative_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_power_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_series_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> GiNaC_ex>;
pub type GiNaC_print_funcp = ::std::option::Option<unsafe extern "C" fn()>;
pub type GiNaC_info_funcp =
    ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type GiNaC_eval_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_ex) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_ex) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_ex) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_ex) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_ex) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_relational,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_1 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_relational,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_2 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_relational,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_relational,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_relational,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_relational,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_relational,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_relational,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_relational,
        arg11: ::std::os::raw::c_int,
        arg12: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_9 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_relational,
        arg12: ::std::os::raw::c_int,
        arg13: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_10 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_relational,
        arg13: ::std::os::raw::c_int,
        arg14: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_11 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_relational,
        arg14: ::std::os::raw::c_int,
        arg15: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_12 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_relational,
        arg15: ::std::os::raw::c_int,
        arg16: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_13 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
        arg15: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
        arg15: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
        arg15: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
        arg15: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
        arg15: *const GiNaC_relational,
        arg16: ::std::os::raw::c_int,
        arg17: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
        arg15: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_14 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_ex,
        arg2: *const GiNaC_ex,
        arg3: *const GiNaC_ex,
        arg4: *const GiNaC_ex,
        arg5: *const GiNaC_ex,
        arg6: *const GiNaC_ex,
        arg7: *const GiNaC_ex,
        arg8: *const GiNaC_ex,
        arg9: *const GiNaC_ex,
        arg10: *const GiNaC_ex,
        arg11: *const GiNaC_ex,
        arg12: *const GiNaC_ex,
        arg13: *const GiNaC_ex,
        arg14: *const GiNaC_ex,
        arg15: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type GiNaC_eval_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_exvector) -> GiNaC_ex,
>;
pub type GiNaC_evalf_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_exvector) -> GiNaC_ex,
>;
pub type GiNaC_conjugate_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_exvector) -> GiNaC_ex,
>;
pub type GiNaC_real_part_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_exvector) -> GiNaC_ex,
>;
pub type GiNaC_imag_part_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const GiNaC_exvector) -> GiNaC_ex,
>;
pub type GiNaC_expand_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_exvector,
        arg2: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_derivative_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_exvector,
        arg2: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_expl_derivative_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_exvector,
        arg2: *const GiNaC_symbol,
    ) -> GiNaC_ex,
>;
pub type GiNaC_power_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_exvector,
        arg2: *const GiNaC_ex,
    ) -> GiNaC_ex,
>;
pub type GiNaC_series_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_exvector,
        arg2: *const GiNaC_relational,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
    ) -> GiNaC_ex,
>;
pub type GiNaC_print_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_exvector,
        arg2: *const GiNaC_print_context,
    ),
>;
pub type GiNaC_info_funcp_exvector = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const GiNaC_exvector,
        arg2: ::std::os::raw::c_uint,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_function_options {
    pub name: std_string,
    pub TeX_name: std_string,
    pub nparams: ::std::os::raw::c_uint,
    pub eval_f: GiNaC_eval_funcp,
    pub evalf_f: GiNaC_evalf_funcp,
    pub conjugate_f: GiNaC_conjugate_funcp,
    pub real_part_f: GiNaC_real_part_funcp,
    pub imag_part_f: GiNaC_imag_part_funcp,
    pub expand_f: GiNaC_expand_funcp,
    pub derivative_f: GiNaC_derivative_funcp,
    pub expl_derivative_f: GiNaC_expl_derivative_funcp,
    pub power_f: GiNaC_power_funcp,
    pub series_f: GiNaC_series_funcp,
    pub print_dispatch_table: [u64; 3usize],
    pub info_f: GiNaC_info_funcp,
    pub evalf_params_first: bool,
    pub use_return_type: bool,
    pub return_type: ::std::os::raw::c_uint,
    pub return_type_tinfo: GiNaC_return_type_t,
    pub use_remember: bool,
    pub remember_size: ::std::os::raw::c_uint,
    pub remember_assoc_size: ::std::os::raw::c_uint,
    pub remember_strategy: ::std::os::raw::c_uint,
    pub eval_use_exvector_args: bool,
    pub evalf_use_exvector_args: bool,
    pub conjugate_use_exvector_args: bool,
    pub real_part_use_exvector_args: bool,
    pub imag_part_use_exvector_args: bool,
    pub expand_use_exvector_args: bool,
    pub derivative_use_exvector_args: bool,
    pub expl_derivative_use_exvector_args: bool,
    pub power_use_exvector_args: bool,
    pub series_use_exvector_args: bool,
    pub print_use_exvector_args: bool,
    pub info_use_exvector_args: bool,
    pub functions_with_same_name: ::std::os::raw::c_uint,
    pub symtree: GiNaC_ex,
}
#[test]
fn bindgen_test_layout_GiNaC_function_options() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_function_options>(),
        248usize,
        concat!("Size of: ", stringify!(GiNaC_function_options))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_function_options>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_function_options))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).TeX_name
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(TeX_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).nparams
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(nparams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).eval_f
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(eval_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).evalf_f
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(evalf_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).conjugate_f
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(conjugate_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).real_part_f
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(real_part_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).imag_part_f
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(imag_part_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).expand_f
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(expand_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).derivative_f
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(derivative_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).expl_derivative_f
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(expl_derivative_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).power_f
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(power_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).series_f
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(series_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .print_dispatch_table as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(print_dispatch_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).info_f
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(info_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .evalf_params_first as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(evalf_params_first)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).use_return_type
                as *const _ as usize
        },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(use_return_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).return_type
                as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(return_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).return_type_tinfo
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(return_type_tinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).use_remember
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(use_remember)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).remember_size
                as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(remember_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .remember_assoc_size as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(remember_assoc_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).remember_strategy
                as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(remember_strategy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .eval_use_exvector_args as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(eval_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .evalf_use_exvector_args as *const _ as usize
        },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(evalf_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .conjugate_use_exvector_args as *const _ as usize
        },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(conjugate_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .real_part_use_exvector_args as *const _ as usize
        },
        227usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(real_part_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .imag_part_use_exvector_args as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(imag_part_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .expand_use_exvector_args as *const _ as usize
        },
        229usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(expand_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .derivative_use_exvector_args as *const _ as usize
        },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(derivative_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .expl_derivative_use_exvector_args as *const _
                as usize
        },
        231usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(expl_derivative_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .power_use_exvector_args as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(power_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .series_use_exvector_args as *const _ as usize
        },
        233usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(series_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .print_use_exvector_args as *const _ as usize
        },
        234usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(print_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .info_use_exvector_args as *const _ as usize
        },
        235usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(info_use_exvector_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>()))
                .functions_with_same_name as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(functions_with_same_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function_options>())).symtree
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function_options),
            "::",
            stringify!(symtree)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10initializeEv"]
    pub fn GiNaC_function_options_initialize(this: *mut GiNaC_function_options);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options8set_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
    pub fn GiNaC_function_options_set_name(
        this: *mut GiNaC_function_options,
        n: *const std_string,
        tn: *const std_string,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10latex_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_function_options_latex_name(
        this: *mut GiNaC_function_options,
        tn: *const std_string,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_E"]
    pub fn GiNaC_function_options_eval_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_E"]
    pub fn GiNaC_function_options_eval_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_eval_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_E"]
    pub fn GiNaC_function_options_evalf_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_E"]
    pub fn GiNaC_function_options_evalf_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_evalf_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_E"]
    pub fn GiNaC_function_options_conjugate_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_E"]
    pub fn GiNaC_function_options_conjugate_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_conjugate_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_E"]
    pub fn GiNaC_function_options_real_part_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_E"]
    pub fn GiNaC_function_options_real_part_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_real_part_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_E"]
    pub fn GiNaC_function_options_imag_part_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_E"]
    pub fn GiNaC_function_options_imag_part_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_imag_part_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_jE"]
    pub fn GiNaC_function_options_expand_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_jE"]
    pub fn GiNaC_function_options_expand_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_expand_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_jE"]
    pub fn GiNaC_function_options_derivative_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_jE"]
    pub fn GiNaC_function_options_derivative_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_derivative_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_E"]
    pub fn GiNaC_function_options_power_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_E"]
    pub fn GiNaC_function_options_power_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_E"]
    pub fn GiNaC_function_options_power_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKS1_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_RKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exEjE"]
    pub fn GiNaC_function_options_info_func(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_1,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_jE"]
    pub fn GiNaC_function_options_info_func1(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_2,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_jE"]
    pub fn GiNaC_function_options_info_func2(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_3,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func3(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_4,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func4(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_5,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func5(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_6,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func6(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_7,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func7(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_8,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func8(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_9,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func9(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_10,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func10(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_11,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func11(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_12,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func12(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_13,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_jE"]
    pub fn GiNaC_function_options_info_func13(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_14,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9eval_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EEE"]
    pub fn GiNaC_function_options_eval_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_eval_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10evalf_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EEE"]
    pub fn GiNaC_function_options_evalf_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_evalf_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14conjugate_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EEE"]
    pub fn GiNaC_function_options_conjugate_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_conjugate_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14real_part_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EEE"]
    pub fn GiNaC_function_options_real_part_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_real_part_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14imag_part_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EEE"]
    pub fn GiNaC_function_options_imag_part_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_imag_part_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11expand_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EEjE"]
    pub fn GiNaC_function_options_expand_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_expand_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15derivative_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EEjE"]
    pub fn GiNaC_function_options_derivative_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_derivative_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20expl_derivative_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EERKNS_6symbolEE"]
    pub fn GiNaC_function_options_expl_derivative_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_expl_derivative_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10power_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EERKS1_E"]
    pub fn GiNaC_function_options_power_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_power_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options11series_funcEPFNS_2exERKSt6vectorIS1_SaIS1_EERKNS_10relationalEijE"]
    pub fn GiNaC_function_options_series_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_series_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options9info_funcEPFbRKSt6vectorINS_2exESaIS2_EEjE"]
    pub fn GiNaC_function_options_info_func14(
        this: *mut GiNaC_function_options,
        e: GiNaC_info_funcp_exvector,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options15set_return_typeEjPKNS_13return_type_tE"]
    pub fn GiNaC_function_options_set_return_type(
        this: *mut GiNaC_function_options,
        rt: ::std::os::raw::c_uint,
        rtt: *const GiNaC_return_type_t,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options19do_not_evalf_paramsEv"]
    pub fn GiNaC_function_options_do_not_evalf_params(
        this: *mut GiNaC_function_options,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options8rememberEjjj"]
    pub fn GiNaC_function_options_remember(
        this: *mut GiNaC_function_options,
        size: ::std::os::raw::c_uint,
        assoc_size: ::std::os::raw::c_uint,
        strategy: ::std::os::raw::c_uint,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options10overloadedEj"]
    pub fn GiNaC_function_options_overloaded(
        this: *mut GiNaC_function_options,
        o: ::std::os::raw::c_uint,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options12set_symmetryERKNS_8symmetryE"]
    pub fn GiNaC_function_options_set_symmetry(
        this: *mut GiNaC_function_options,
        s: *const GiNaC_symmetry,
    ) -> *mut GiNaC_function_options;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options20test_and_set_nparamsEj"]
    pub fn GiNaC_function_options_test_and_set_nparams(
        this: *mut GiNaC_function_options,
        n: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_options14set_print_funcEjPFvvE"]
    pub fn GiNaC_function_options_set_print_func(
        this: *mut GiNaC_function_options,
        id: ::std::os::raw::c_uint,
        f: GiNaC_print_funcp,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_optionsC1Ev"]
    pub fn GiNaC_function_options_function_options(
        this: *mut GiNaC_function_options,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_optionsC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
    pub fn GiNaC_function_options_function_options1(
        this: *mut GiNaC_function_options,
        n: *const std_string,
        tn: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_optionsC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj"]
    pub fn GiNaC_function_options_function_options2(
        this: *mut GiNaC_function_options,
        n: *const std_string,
        np: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16function_optionsD1Ev"]
    pub fn GiNaC_function_options_function_options_destructor(
        this: *mut GiNaC_function_options,
    );
}
impl GiNaC_function_options {
    #[inline]
    pub unsafe fn initialize(&mut self) {
        GiNaC_function_options_initialize(self)
    }
    #[inline]
    pub unsafe fn set_name(
        &mut self,
        n: *const std_string,
        tn: *const std_string,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_set_name(self, n, tn)
    }
    #[inline]
    pub unsafe fn latex_name(
        &mut self,
        tn: *const std_string,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_latex_name(self, tn)
    }
    #[inline]
    pub unsafe fn eval_func(
        &mut self,
        e: GiNaC_eval_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func(self, e)
    }
    #[inline]
    pub unsafe fn eval_func1(
        &mut self,
        e: GiNaC_eval_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func1(self, e)
    }
    #[inline]
    pub unsafe fn eval_func2(
        &mut self,
        e: GiNaC_eval_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func2(self, e)
    }
    #[inline]
    pub unsafe fn eval_func3(
        &mut self,
        e: GiNaC_eval_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func3(self, e)
    }
    #[inline]
    pub unsafe fn eval_func4(
        &mut self,
        e: GiNaC_eval_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func4(self, e)
    }
    #[inline]
    pub unsafe fn eval_func5(
        &mut self,
        e: GiNaC_eval_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func5(self, e)
    }
    #[inline]
    pub unsafe fn eval_func6(
        &mut self,
        e: GiNaC_eval_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func6(self, e)
    }
    #[inline]
    pub unsafe fn eval_func7(
        &mut self,
        e: GiNaC_eval_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func7(self, e)
    }
    #[inline]
    pub unsafe fn eval_func8(
        &mut self,
        e: GiNaC_eval_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func8(self, e)
    }
    #[inline]
    pub unsafe fn eval_func9(
        &mut self,
        e: GiNaC_eval_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func9(self, e)
    }
    #[inline]
    pub unsafe fn eval_func10(
        &mut self,
        e: GiNaC_eval_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func10(self, e)
    }
    #[inline]
    pub unsafe fn eval_func11(
        &mut self,
        e: GiNaC_eval_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func11(self, e)
    }
    #[inline]
    pub unsafe fn eval_func12(
        &mut self,
        e: GiNaC_eval_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func12(self, e)
    }
    #[inline]
    pub unsafe fn eval_func13(
        &mut self,
        e: GiNaC_eval_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func13(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func(
        &mut self,
        e: GiNaC_evalf_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func1(
        &mut self,
        e: GiNaC_evalf_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func1(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func2(
        &mut self,
        e: GiNaC_evalf_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func2(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func3(
        &mut self,
        e: GiNaC_evalf_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func3(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func4(
        &mut self,
        e: GiNaC_evalf_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func4(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func5(
        &mut self,
        e: GiNaC_evalf_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func5(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func6(
        &mut self,
        e: GiNaC_evalf_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func6(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func7(
        &mut self,
        e: GiNaC_evalf_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func7(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func8(
        &mut self,
        e: GiNaC_evalf_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func8(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func9(
        &mut self,
        e: GiNaC_evalf_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func9(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func10(
        &mut self,
        e: GiNaC_evalf_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func10(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func11(
        &mut self,
        e: GiNaC_evalf_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func11(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func12(
        &mut self,
        e: GiNaC_evalf_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func12(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func13(
        &mut self,
        e: GiNaC_evalf_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func13(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func(
        &mut self,
        e: GiNaC_conjugate_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func1(
        &mut self,
        e: GiNaC_conjugate_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func1(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func2(
        &mut self,
        e: GiNaC_conjugate_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func2(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func3(
        &mut self,
        e: GiNaC_conjugate_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func3(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func4(
        &mut self,
        e: GiNaC_conjugate_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func4(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func5(
        &mut self,
        e: GiNaC_conjugate_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func5(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func6(
        &mut self,
        e: GiNaC_conjugate_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func6(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func7(
        &mut self,
        e: GiNaC_conjugate_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func7(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func8(
        &mut self,
        e: GiNaC_conjugate_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func8(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func9(
        &mut self,
        e: GiNaC_conjugate_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func9(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func10(
        &mut self,
        e: GiNaC_conjugate_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func10(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func11(
        &mut self,
        e: GiNaC_conjugate_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func11(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func12(
        &mut self,
        e: GiNaC_conjugate_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func12(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func13(
        &mut self,
        e: GiNaC_conjugate_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func13(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func(
        &mut self,
        e: GiNaC_real_part_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func1(
        &mut self,
        e: GiNaC_real_part_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func1(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func2(
        &mut self,
        e: GiNaC_real_part_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func2(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func3(
        &mut self,
        e: GiNaC_real_part_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func3(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func4(
        &mut self,
        e: GiNaC_real_part_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func4(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func5(
        &mut self,
        e: GiNaC_real_part_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func5(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func6(
        &mut self,
        e: GiNaC_real_part_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func6(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func7(
        &mut self,
        e: GiNaC_real_part_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func7(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func8(
        &mut self,
        e: GiNaC_real_part_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func8(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func9(
        &mut self,
        e: GiNaC_real_part_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func9(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func10(
        &mut self,
        e: GiNaC_real_part_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func10(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func11(
        &mut self,
        e: GiNaC_real_part_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func11(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func12(
        &mut self,
        e: GiNaC_real_part_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func12(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func13(
        &mut self,
        e: GiNaC_real_part_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func13(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func(
        &mut self,
        e: GiNaC_imag_part_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func1(
        &mut self,
        e: GiNaC_imag_part_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func1(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func2(
        &mut self,
        e: GiNaC_imag_part_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func2(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func3(
        &mut self,
        e: GiNaC_imag_part_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func3(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func4(
        &mut self,
        e: GiNaC_imag_part_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func4(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func5(
        &mut self,
        e: GiNaC_imag_part_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func5(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func6(
        &mut self,
        e: GiNaC_imag_part_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func6(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func7(
        &mut self,
        e: GiNaC_imag_part_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func7(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func8(
        &mut self,
        e: GiNaC_imag_part_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func8(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func9(
        &mut self,
        e: GiNaC_imag_part_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func9(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func10(
        &mut self,
        e: GiNaC_imag_part_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func10(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func11(
        &mut self,
        e: GiNaC_imag_part_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func11(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func12(
        &mut self,
        e: GiNaC_imag_part_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func12(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func13(
        &mut self,
        e: GiNaC_imag_part_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func13(self, e)
    }
    #[inline]
    pub unsafe fn expand_func(
        &mut self,
        e: GiNaC_expand_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func(self, e)
    }
    #[inline]
    pub unsafe fn expand_func1(
        &mut self,
        e: GiNaC_expand_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func1(self, e)
    }
    #[inline]
    pub unsafe fn expand_func2(
        &mut self,
        e: GiNaC_expand_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func2(self, e)
    }
    #[inline]
    pub unsafe fn expand_func3(
        &mut self,
        e: GiNaC_expand_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func3(self, e)
    }
    #[inline]
    pub unsafe fn expand_func4(
        &mut self,
        e: GiNaC_expand_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func4(self, e)
    }
    #[inline]
    pub unsafe fn expand_func5(
        &mut self,
        e: GiNaC_expand_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func5(self, e)
    }
    #[inline]
    pub unsafe fn expand_func6(
        &mut self,
        e: GiNaC_expand_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func6(self, e)
    }
    #[inline]
    pub unsafe fn expand_func7(
        &mut self,
        e: GiNaC_expand_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func7(self, e)
    }
    #[inline]
    pub unsafe fn expand_func8(
        &mut self,
        e: GiNaC_expand_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func8(self, e)
    }
    #[inline]
    pub unsafe fn expand_func9(
        &mut self,
        e: GiNaC_expand_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func9(self, e)
    }
    #[inline]
    pub unsafe fn expand_func10(
        &mut self,
        e: GiNaC_expand_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func10(self, e)
    }
    #[inline]
    pub unsafe fn expand_func11(
        &mut self,
        e: GiNaC_expand_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func11(self, e)
    }
    #[inline]
    pub unsafe fn expand_func12(
        &mut self,
        e: GiNaC_expand_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func12(self, e)
    }
    #[inline]
    pub unsafe fn expand_func13(
        &mut self,
        e: GiNaC_expand_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func13(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func(
        &mut self,
        e: GiNaC_derivative_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func1(
        &mut self,
        e: GiNaC_derivative_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func1(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func2(
        &mut self,
        e: GiNaC_derivative_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func2(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func3(
        &mut self,
        e: GiNaC_derivative_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func3(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func4(
        &mut self,
        e: GiNaC_derivative_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func4(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func5(
        &mut self,
        e: GiNaC_derivative_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func5(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func6(
        &mut self,
        e: GiNaC_derivative_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func6(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func7(
        &mut self,
        e: GiNaC_derivative_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func7(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func8(
        &mut self,
        e: GiNaC_derivative_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func8(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func9(
        &mut self,
        e: GiNaC_derivative_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func9(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func10(
        &mut self,
        e: GiNaC_derivative_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func10(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func11(
        &mut self,
        e: GiNaC_derivative_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func11(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func12(
        &mut self,
        e: GiNaC_derivative_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func12(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func13(
        &mut self,
        e: GiNaC_derivative_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func13(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func(
        &mut self,
        e: GiNaC_expl_derivative_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func1(
        &mut self,
        e: GiNaC_expl_derivative_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func1(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func2(
        &mut self,
        e: GiNaC_expl_derivative_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func2(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func3(
        &mut self,
        e: GiNaC_expl_derivative_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func3(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func4(
        &mut self,
        e: GiNaC_expl_derivative_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func4(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func5(
        &mut self,
        e: GiNaC_expl_derivative_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func5(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func6(
        &mut self,
        e: GiNaC_expl_derivative_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func6(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func7(
        &mut self,
        e: GiNaC_expl_derivative_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func7(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func8(
        &mut self,
        e: GiNaC_expl_derivative_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func8(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func9(
        &mut self,
        e: GiNaC_expl_derivative_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func9(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func10(
        &mut self,
        e: GiNaC_expl_derivative_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func10(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func11(
        &mut self,
        e: GiNaC_expl_derivative_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func11(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func12(
        &mut self,
        e: GiNaC_expl_derivative_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func12(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func13(
        &mut self,
        e: GiNaC_expl_derivative_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func13(self, e)
    }
    #[inline]
    pub unsafe fn power_func(
        &mut self,
        e: GiNaC_power_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func(self, e)
    }
    #[inline]
    pub unsafe fn power_func1(
        &mut self,
        e: GiNaC_power_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func1(self, e)
    }
    #[inline]
    pub unsafe fn power_func2(
        &mut self,
        e: GiNaC_power_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func2(self, e)
    }
    #[inline]
    pub unsafe fn power_func3(
        &mut self,
        e: GiNaC_power_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func3(self, e)
    }
    #[inline]
    pub unsafe fn power_func4(
        &mut self,
        e: GiNaC_power_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func4(self, e)
    }
    #[inline]
    pub unsafe fn power_func5(
        &mut self,
        e: GiNaC_power_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func5(self, e)
    }
    #[inline]
    pub unsafe fn power_func6(
        &mut self,
        e: GiNaC_power_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func6(self, e)
    }
    #[inline]
    pub unsafe fn power_func7(
        &mut self,
        e: GiNaC_power_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func7(self, e)
    }
    #[inline]
    pub unsafe fn power_func8(
        &mut self,
        e: GiNaC_power_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func8(self, e)
    }
    #[inline]
    pub unsafe fn power_func9(
        &mut self,
        e: GiNaC_power_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func9(self, e)
    }
    #[inline]
    pub unsafe fn power_func10(
        &mut self,
        e: GiNaC_power_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func10(self, e)
    }
    #[inline]
    pub unsafe fn power_func11(
        &mut self,
        e: GiNaC_power_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func11(self, e)
    }
    #[inline]
    pub unsafe fn power_func12(
        &mut self,
        e: GiNaC_power_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func12(self, e)
    }
    #[inline]
    pub unsafe fn power_func13(
        &mut self,
        e: GiNaC_power_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func13(self, e)
    }
    #[inline]
    pub unsafe fn series_func(
        &mut self,
        e: GiNaC_series_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func(self, e)
    }
    #[inline]
    pub unsafe fn series_func1(
        &mut self,
        e: GiNaC_series_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func1(self, e)
    }
    #[inline]
    pub unsafe fn series_func2(
        &mut self,
        e: GiNaC_series_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func2(self, e)
    }
    #[inline]
    pub unsafe fn series_func3(
        &mut self,
        e: GiNaC_series_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func3(self, e)
    }
    #[inline]
    pub unsafe fn series_func4(
        &mut self,
        e: GiNaC_series_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func4(self, e)
    }
    #[inline]
    pub unsafe fn series_func5(
        &mut self,
        e: GiNaC_series_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func5(self, e)
    }
    #[inline]
    pub unsafe fn series_func6(
        &mut self,
        e: GiNaC_series_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func6(self, e)
    }
    #[inline]
    pub unsafe fn series_func7(
        &mut self,
        e: GiNaC_series_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func7(self, e)
    }
    #[inline]
    pub unsafe fn series_func8(
        &mut self,
        e: GiNaC_series_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func8(self, e)
    }
    #[inline]
    pub unsafe fn series_func9(
        &mut self,
        e: GiNaC_series_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func9(self, e)
    }
    #[inline]
    pub unsafe fn series_func10(
        &mut self,
        e: GiNaC_series_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func10(self, e)
    }
    #[inline]
    pub unsafe fn series_func11(
        &mut self,
        e: GiNaC_series_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func11(self, e)
    }
    #[inline]
    pub unsafe fn series_func12(
        &mut self,
        e: GiNaC_series_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func12(self, e)
    }
    #[inline]
    pub unsafe fn series_func13(
        &mut self,
        e: GiNaC_series_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func13(self, e)
    }
    #[inline]
    pub unsafe fn info_func(
        &mut self,
        e: GiNaC_info_funcp_1,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func(self, e)
    }
    #[inline]
    pub unsafe fn info_func1(
        &mut self,
        e: GiNaC_info_funcp_2,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func1(self, e)
    }
    #[inline]
    pub unsafe fn info_func2(
        &mut self,
        e: GiNaC_info_funcp_3,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func2(self, e)
    }
    #[inline]
    pub unsafe fn info_func3(
        &mut self,
        e: GiNaC_info_funcp_4,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func3(self, e)
    }
    #[inline]
    pub unsafe fn info_func4(
        &mut self,
        e: GiNaC_info_funcp_5,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func4(self, e)
    }
    #[inline]
    pub unsafe fn info_func5(
        &mut self,
        e: GiNaC_info_funcp_6,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func5(self, e)
    }
    #[inline]
    pub unsafe fn info_func6(
        &mut self,
        e: GiNaC_info_funcp_7,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func6(self, e)
    }
    #[inline]
    pub unsafe fn info_func7(
        &mut self,
        e: GiNaC_info_funcp_8,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func7(self, e)
    }
    #[inline]
    pub unsafe fn info_func8(
        &mut self,
        e: GiNaC_info_funcp_9,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func8(self, e)
    }
    #[inline]
    pub unsafe fn info_func9(
        &mut self,
        e: GiNaC_info_funcp_10,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func9(self, e)
    }
    #[inline]
    pub unsafe fn info_func10(
        &mut self,
        e: GiNaC_info_funcp_11,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func10(self, e)
    }
    #[inline]
    pub unsafe fn info_func11(
        &mut self,
        e: GiNaC_info_funcp_12,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func11(self, e)
    }
    #[inline]
    pub unsafe fn info_func12(
        &mut self,
        e: GiNaC_info_funcp_13,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func12(self, e)
    }
    #[inline]
    pub unsafe fn info_func13(
        &mut self,
        e: GiNaC_info_funcp_14,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func13(self, e)
    }
    #[inline]
    pub unsafe fn eval_func14(
        &mut self,
        e: GiNaC_eval_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_eval_func14(self, e)
    }
    #[inline]
    pub unsafe fn evalf_func14(
        &mut self,
        e: GiNaC_evalf_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_evalf_func14(self, e)
    }
    #[inline]
    pub unsafe fn conjugate_func14(
        &mut self,
        e: GiNaC_conjugate_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_conjugate_func14(self, e)
    }
    #[inline]
    pub unsafe fn real_part_func14(
        &mut self,
        e: GiNaC_real_part_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_real_part_func14(self, e)
    }
    #[inline]
    pub unsafe fn imag_part_func14(
        &mut self,
        e: GiNaC_imag_part_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_imag_part_func14(self, e)
    }
    #[inline]
    pub unsafe fn expand_func14(
        &mut self,
        e: GiNaC_expand_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expand_func14(self, e)
    }
    #[inline]
    pub unsafe fn derivative_func14(
        &mut self,
        e: GiNaC_derivative_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_derivative_func14(self, e)
    }
    #[inline]
    pub unsafe fn expl_derivative_func14(
        &mut self,
        e: GiNaC_expl_derivative_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_expl_derivative_func14(self, e)
    }
    #[inline]
    pub unsafe fn power_func14(
        &mut self,
        e: GiNaC_power_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_power_func14(self, e)
    }
    #[inline]
    pub unsafe fn series_func14(
        &mut self,
        e: GiNaC_series_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_series_func14(self, e)
    }
    #[inline]
    pub unsafe fn info_func14(
        &mut self,
        e: GiNaC_info_funcp_exvector,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_info_func14(self, e)
    }
    #[inline]
    pub unsafe fn set_return_type(
        &mut self,
        rt: ::std::os::raw::c_uint,
        rtt: *const GiNaC_return_type_t,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_set_return_type(self, rt, rtt)
    }
    #[inline]
    pub unsafe fn do_not_evalf_params(
        &mut self,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_do_not_evalf_params(self)
    }
    #[inline]
    pub unsafe fn remember(
        &mut self,
        size: ::std::os::raw::c_uint,
        assoc_size: ::std::os::raw::c_uint,
        strategy: ::std::os::raw::c_uint,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_remember(self, size, assoc_size, strategy)
    }
    #[inline]
    pub unsafe fn overloaded(
        &mut self,
        o: ::std::os::raw::c_uint,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_overloaded(self, o)
    }
    #[inline]
    pub unsafe fn set_symmetry(
        &mut self,
        s: *const GiNaC_symmetry,
    ) -> *mut GiNaC_function_options {
        GiNaC_function_options_set_symmetry(self, s)
    }
    #[inline]
    pub unsafe fn test_and_set_nparams(&mut self, n: ::std::os::raw::c_uint) {
        GiNaC_function_options_test_and_set_nparams(self, n)
    }
    #[inline]
    pub unsafe fn set_print_func(
        &mut self,
        id: ::std::os::raw::c_uint,
        f: GiNaC_print_funcp,
    ) {
        GiNaC_function_options_set_print_func(self, id, f)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_options_function_options(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(n: *const std_string, tn: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_options_function_options1(
            __bindgen_tmp.as_mut_ptr(),
            n,
            tn,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        n: *const std_string,
        np: ::std::os::raw::c_uint,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_options_function_options2(
            __bindgen_tmp.as_mut_ptr(),
            n,
            np,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_function_options_function_options_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_do_taylor {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_do_taylor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_do_taylor>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_do_taylor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_do_taylor>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_do_taylor))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_function {
    pub _base: GiNaC_exprseq,
    pub serial: ::std::os::raw::c_uint,
}
#[repr(C)]
pub struct GiNaC_function_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_function_visitor {
    pub vtable_: *const GiNaC_function_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_function_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_function_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_function_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_function_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_function_visitor))
    );
}
pub type GiNaC_function_inherited = GiNaC_exprseq;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8function8reg_infoE"]
    pub static mut GiNaC_function_reg_info: GiNaC_registered_class_info;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8function14current_serialE"]
    pub static mut GiNaC_function_current_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_function() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_function>(),
        56usize,
        concat!("Size of: ", stringify!(GiNaC_function))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_function>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_function))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_function>())).serial as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_function),
            "::",
            stringify!(serial)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function11pderivativeEj"]
    pub fn GiNaC_function_pderivative(
        this: *const GiNaC_function,
        diff_param: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function15expl_derivativeERKNS_6symbolE"]
    pub fn GiNaC_function_expl_derivative(
        this: *const GiNaC_function,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8function20registered_functionsEv"]
    pub fn GiNaC_function_registered_functions() -> *mut [u64; 3usize];
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function21lookup_remember_tableERNS_2exE"]
    pub fn GiNaC_function_lookup_remember_table(
        this: *const GiNaC_function,
        result: *mut GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function20store_remember_tableERKNS_2exE"]
    pub fn GiNaC_function_store_remember_table(
        this: *const GiNaC_function,
        result: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function5powerERKNS_2exE"]
    pub fn GiNaC_function_power(
        this: *const GiNaC_function,
        exp: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8function12register_newERKNS_16function_optionsE"]
    pub fn GiNaC_function_register_new(
        opt: *const GiNaC_function_options,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8function13find_functionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj"]
    pub fn GiNaC_function_find_function(
        name: *const std_string,
        nparams: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function8get_nameB5cxx11Ev"]
    pub fn GiNaC_function_get_name(this: *const GiNaC_function) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1Ev"]
    pub fn GiNaC_function_function(this: *mut GiNaC_function);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1Ej"]
    pub fn GiNaC_function_function1(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exE"]
    pub fn GiNaC_function_function2(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_"]
    pub fn GiNaC_function_function3(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_"]
    pub fn GiNaC_function_function4(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_"]
    pub fn GiNaC_function_function5(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_"]
    pub fn GiNaC_function_function6(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_S3_"]
    pub fn GiNaC_function_function7(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_S3_S3_"]
    pub fn GiNaC_function_function8(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_S3_S3_S3_"]
    pub fn GiNaC_function_function9(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_"]
    pub fn GiNaC_function_function10(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_"]
    pub fn GiNaC_function_function11(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_S3_"]
    pub fn GiNaC_function_function12(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
        param11: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_"]
    pub fn GiNaC_function_function13(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
        param11: *const GiNaC_ex,
        param12: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_"]
    pub fn GiNaC_function_function14(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
        param11: *const GiNaC_ex,
        param12: *const GiNaC_ex,
        param13: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_2exES3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_S3_"]
    pub fn GiNaC_function_function15(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
        param11: *const GiNaC_ex,
        param12: *const GiNaC_ex,
        param13: *const GiNaC_ex,
        param14: *const GiNaC_ex,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKNS_9containerISt6vectorEE"]
    pub fn GiNaC_function_function16(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        es: *const GiNaC_exprseq,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjRKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_function_function17(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        v: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8functionC1EjOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_function_function18(
        this: *mut GiNaC_function,
        ser: ::std::os::raw::c_uint,
        v: *mut GiNaC_exvector,
    );
}
impl GiNaC_function {
    #[inline]
    pub unsafe fn pderivative(
        &self,
        diff_param: ::std::os::raw::c_uint,
    ) -> GiNaC_ex {
        GiNaC_function_pderivative(self, diff_param)
    }
    #[inline]
    pub unsafe fn expl_derivative(&self, s: *const GiNaC_symbol) -> GiNaC_ex {
        GiNaC_function_expl_derivative(self, s)
    }
    #[inline]
    pub unsafe fn registered_functions() -> *mut [u64; 3usize] {
        GiNaC_function_registered_functions()
    }
    #[inline]
    pub unsafe fn lookup_remember_table(&self, result: *mut GiNaC_ex) -> bool {
        GiNaC_function_lookup_remember_table(self, result)
    }
    #[inline]
    pub unsafe fn store_remember_table(&self, result: *const GiNaC_ex) {
        GiNaC_function_store_remember_table(self, result)
    }
    #[inline]
    pub unsafe fn power(&self, exp: *const GiNaC_ex) -> GiNaC_ex {
        GiNaC_function_power(self, exp)
    }
    #[inline]
    pub unsafe fn register_new(
        opt: *const GiNaC_function_options,
    ) -> ::std::os::raw::c_uint {
        GiNaC_function_register_new(opt)
    }
    #[inline]
    pub unsafe fn find_function(
        name: *const std_string,
        nparams: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        GiNaC_function_find_function(name, nparams)
    }
    #[inline]
    pub unsafe fn get_name(&self) -> std_string {
        GiNaC_function_get_name(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(ser: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function1(__bindgen_tmp.as_mut_ptr(), ser);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function2(__bindgen_tmp.as_mut_ptr(), ser, param1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function3(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function4(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function5(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function6(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function7(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new8(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function8(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
            param7,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new9(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function9(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
            param7,
            param8,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new10(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function10(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
            param7,
            param8,
            param9,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new11(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function11(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
            param7,
            param8,
            param9,
            param10,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new12(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
        param11: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function12(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
            param7,
            param8,
            param9,
            param10,
            param11,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new13(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
        param11: *const GiNaC_ex,
        param12: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function13(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
            param7,
            param8,
            param9,
            param10,
            param11,
            param12,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new14(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
        param11: *const GiNaC_ex,
        param12: *const GiNaC_ex,
        param13: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function14(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
            param7,
            param8,
            param9,
            param10,
            param11,
            param12,
            param13,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new15(
        ser: ::std::os::raw::c_uint,
        param1: *const GiNaC_ex,
        param2: *const GiNaC_ex,
        param3: *const GiNaC_ex,
        param4: *const GiNaC_ex,
        param5: *const GiNaC_ex,
        param6: *const GiNaC_ex,
        param7: *const GiNaC_ex,
        param8: *const GiNaC_ex,
        param9: *const GiNaC_ex,
        param10: *const GiNaC_ex,
        param11: *const GiNaC_ex,
        param12: *const GiNaC_ex,
        param13: *const GiNaC_ex,
        param14: *const GiNaC_ex,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function15(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
            param7,
            param8,
            param9,
            param10,
            param11,
            param12,
            param13,
            param14,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new16(
        ser: ::std::os::raw::c_uint,
        es: *const GiNaC_exprseq,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function16(__bindgen_tmp.as_mut_ptr(), ser, es);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new17(
        ser: ::std::os::raw::c_uint,
        v: *const GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function17(__bindgen_tmp.as_mut_ptr(), ser, v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new18(
        ser: ::std::os::raw::c_uint,
        v: *mut GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_function18(__bindgen_tmp.as_mut_ptr(), ser, v);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_function_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function5printERKNS_13print_contextEj"]
    pub fn GiNaC_function_print(
        this: *mut ::std::os::raw::c_void,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function6expandEj"]
    pub fn GiNaC_function_expand(
        this: *mut ::std::os::raw::c_void,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function4evalEv"]
    pub fn GiNaC_function_eval(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function5evalfEv"]
    pub fn GiNaC_function_evalf(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function10eval_ncmulERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_function_eval_ncmul(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function8calchashEv"]
    pub fn GiNaC_function_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function6seriesERKNS_10relationalEij"]
    pub fn GiNaC_function_series(
        this: *mut ::std::os::raw::c_void,
        r: *const GiNaC_relational,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function13thiscontainerERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_function_thiscontainer(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function13thiscontainerEOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_function_thiscontainer1(
        this: *mut ::std::os::raw::c_void,
        v: *mut GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function9conjugateEv"]
    pub fn GiNaC_function_conjugate(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function9real_partEv"]
    pub fn GiNaC_function_real_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function9imag_partEv"]
    pub fn GiNaC_function_imag_part(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_function_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8function12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_function_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function4infoEj"]
    pub fn GiNaC_function_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function10derivativeERKNS_6symbolE"]
    pub fn GiNaC_function_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function18is_equal_same_typeERKNS_5basicE"]
    pub fn GiNaC_function_is_equal_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function15match_same_typeERKNS_5basicE"]
    pub fn GiNaC_function_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function11return_typeEv"]
    pub fn GiNaC_function_return_type(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8function17return_type_tinfoEv"]
    pub fn GiNaC_function_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_function_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19function_unarchiver8usecountE"]
    pub static mut GiNaC_function_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_function_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_function_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_function_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_function_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_function_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19function_unarchiver6createEv"]
    pub fn GiNaC_function_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19function_unarchiverC1Ev"]
    pub fn GiNaC_function_unarchiver_function_unarchiver(
        this: *mut GiNaC_function_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19function_unarchiverD1Ev"]
    pub fn GiNaC_function_unarchiver_function_unarchiver_destructor(
        this: *mut GiNaC_function_unarchiver,
    );
}
impl GiNaC_function_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_function_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_function_unarchiver_function_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_function_unarchiver_function_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL28function_unarchiver_instanceE"]
    pub static mut GiNaC_function_unarchiver_instance:
        GiNaC_function_unarchiver;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_conjugate_function_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC25conjugate_function_SERIAL6serialE"]
    pub static mut GiNaC_conjugate_function_SERIAL_serial:
        ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_conjugate_function_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_conjugate_function_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_conjugate_function_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_conjugate_function_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_conjugate_function_SERIAL))
    );
}
pub const GiNaC_conjugate_function_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_real_part_function_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC25real_part_function_SERIAL6serialE"]
    pub static mut GiNaC_real_part_function_SERIAL_serial:
        ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_real_part_function_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_real_part_function_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_real_part_function_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_real_part_function_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_real_part_function_SERIAL))
    );
}
pub const GiNaC_real_part_function_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_imag_part_function_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC25imag_part_function_SERIAL6serialE"]
    pub static mut GiNaC_imag_part_function_SERIAL_serial:
        ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_imag_part_function_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_imag_part_function_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_imag_part_function_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_imag_part_function_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_imag_part_function_SERIAL))
    );
}
pub const GiNaC_imag_part_function_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_abs_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10abs_SERIAL6serialE"]
    pub static mut GiNaC_abs_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_abs_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_abs_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_abs_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_abs_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_abs_SERIAL))
    );
}
pub const GiNaC_abs_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_step_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11step_SERIAL6serialE"]
    pub static mut GiNaC_step_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_step_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_step_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_step_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_step_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_step_SERIAL))
    );
}
pub const GiNaC_step_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_csgn_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11csgn_SERIAL6serialE"]
    pub static mut GiNaC_csgn_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_csgn_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_csgn_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_csgn_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_csgn_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_csgn_SERIAL))
    );
}
pub const GiNaC_csgn_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_eta_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10eta_SERIAL6serialE"]
    pub static mut GiNaC_eta_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_eta_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_eta_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_eta_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_eta_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_eta_SERIAL))
    );
}
pub const GiNaC_eta_NPARAMS: ::std::os::raw::c_uint = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_sin_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10sin_SERIAL6serialE"]
    pub static mut GiNaC_sin_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_sin_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_sin_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_sin_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_sin_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_sin_SERIAL))
    );
}
pub const GiNaC_sin_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_cos_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10cos_SERIAL6serialE"]
    pub static mut GiNaC_cos_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_cos_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_cos_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_cos_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_cos_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_cos_SERIAL))
    );
}
pub const GiNaC_cos_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_tan_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10tan_SERIAL6serialE"]
    pub static mut GiNaC_tan_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_tan_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tan_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_tan_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tan_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_tan_SERIAL))
    );
}
pub const GiNaC_tan_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_exp_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10exp_SERIAL6serialE"]
    pub static mut GiNaC_exp_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_exp_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_exp_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_exp_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_exp_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_exp_SERIAL))
    );
}
pub const GiNaC_exp_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_log_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10log_SERIAL6serialE"]
    pub static mut GiNaC_log_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_log_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_log_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_log_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_log_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_log_SERIAL))
    );
}
pub const GiNaC_log_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_asin_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11asin_SERIAL6serialE"]
    pub static mut GiNaC_asin_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_asin_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_asin_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_asin_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_asin_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_asin_SERIAL))
    );
}
pub const GiNaC_asin_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_acos_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11acos_SERIAL6serialE"]
    pub static mut GiNaC_acos_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_acos_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_acos_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_acos_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_acos_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_acos_SERIAL))
    );
}
pub const GiNaC_acos_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_atan_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11atan_SERIAL6serialE"]
    pub static mut GiNaC_atan_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_atan_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_atan_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_atan_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_atan_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_atan_SERIAL))
    );
}
pub const GiNaC_atan_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_atan2_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12atan2_SERIAL6serialE"]
    pub static mut GiNaC_atan2_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_atan2_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_atan2_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_atan2_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_atan2_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_atan2_SERIAL))
    );
}
pub const GiNaC_atan2_NPARAMS: ::std::os::raw::c_uint = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_sinh_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11sinh_SERIAL6serialE"]
    pub static mut GiNaC_sinh_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_sinh_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_sinh_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_sinh_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_sinh_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_sinh_SERIAL))
    );
}
pub const GiNaC_sinh_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_cosh_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11cosh_SERIAL6serialE"]
    pub static mut GiNaC_cosh_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_cosh_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_cosh_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_cosh_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_cosh_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_cosh_SERIAL))
    );
}
pub const GiNaC_cosh_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_tanh_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11tanh_SERIAL6serialE"]
    pub static mut GiNaC_tanh_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_tanh_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tanh_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_tanh_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tanh_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_tanh_SERIAL))
    );
}
pub const GiNaC_tanh_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_asinh_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12asinh_SERIAL6serialE"]
    pub static mut GiNaC_asinh_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_asinh_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_asinh_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_asinh_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_asinh_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_asinh_SERIAL))
    );
}
pub const GiNaC_asinh_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_acosh_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12acosh_SERIAL6serialE"]
    pub static mut GiNaC_acosh_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_acosh_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_acosh_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_acosh_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_acosh_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_acosh_SERIAL))
    );
}
pub const GiNaC_acosh_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_atanh_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12atanh_SERIAL6serialE"]
    pub static mut GiNaC_atanh_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_atanh_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_atanh_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_atanh_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_atanh_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_atanh_SERIAL))
    );
}
pub const GiNaC_atanh_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_Li2_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10Li2_SERIAL6serialE"]
    pub static mut GiNaC_Li2_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_Li2_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_Li2_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_Li2_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_Li2_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_Li2_SERIAL))
    );
}
pub const GiNaC_Li2_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_Li3_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10Li3_SERIAL6serialE"]
    pub static mut GiNaC_Li3_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_Li3_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_Li3_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_Li3_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_Li3_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_Li3_SERIAL))
    );
}
pub const GiNaC_Li3_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_zetaderiv_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16zetaderiv_SERIAL6serialE"]
    pub static mut GiNaC_zetaderiv_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_zetaderiv_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_zetaderiv_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_zetaderiv_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_zetaderiv_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_zetaderiv_SERIAL))
    );
}
pub const GiNaC_zetaderiv_NPARAMS: ::std::os::raw::c_uint = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_zeta1_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12zeta1_SERIAL6serialE"]
    pub static mut GiNaC_zeta1_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_zeta1_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_zeta1_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_zeta1_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_zeta1_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_zeta1_SERIAL))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_zeta2_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12zeta2_SERIAL6serialE"]
    pub static mut GiNaC_zeta2_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_zeta2_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_zeta2_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_zeta2_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_zeta2_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_zeta2_SERIAL))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_zeta_SERIAL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_G2_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9G2_SERIAL6serialE"]
    pub static mut GiNaC_G2_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_G2_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_G2_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_G2_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_G2_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_G2_SERIAL))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_G3_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9G3_SERIAL6serialE"]
    pub static mut GiNaC_G3_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_G3_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_G3_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_G3_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_G3_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_G3_SERIAL))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_G_SERIAL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_Li_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9Li_SERIAL6serialE"]
    pub static mut GiNaC_Li_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_Li_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_Li_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_Li_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_Li_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_Li_SERIAL))
    );
}
pub const GiNaC_Li_NPARAMS: ::std::os::raw::c_uint = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_S_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8S_SERIAL6serialE"]
    pub static mut GiNaC_S_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_S_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_S_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_S_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_S_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_S_SERIAL))
    );
}
pub const GiNaC_S_NPARAMS: ::std::os::raw::c_uint = 3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_H_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8H_SERIAL6serialE"]
    pub static mut GiNaC_H_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_H_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_H_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_H_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_H_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_H_SERIAL))
    );
}
pub const GiNaC_H_NPARAMS: ::std::os::raw::c_uint = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_lgamma_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13lgamma_SERIAL6serialE"]
    pub static mut GiNaC_lgamma_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_lgamma_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_lgamma_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_lgamma_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_lgamma_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_lgamma_SERIAL))
    );
}
pub const GiNaC_lgamma_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_tgamma_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13tgamma_SERIAL6serialE"]
    pub static mut GiNaC_tgamma_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_tgamma_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tgamma_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_tgamma_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tgamma_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_tgamma_SERIAL))
    );
}
pub const GiNaC_tgamma_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_beta_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11beta_SERIAL6serialE"]
    pub static mut GiNaC_beta_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_beta_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_beta_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_beta_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_beta_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_beta_SERIAL))
    );
}
pub const GiNaC_beta_NPARAMS: ::std::os::raw::c_uint = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_psi1_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11psi1_SERIAL6serialE"]
    pub static mut GiNaC_psi1_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_psi1_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_psi1_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_psi1_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_psi1_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_psi1_SERIAL))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_psi2_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11psi2_SERIAL6serialE"]
    pub static mut GiNaC_psi2_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_psi2_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_psi2_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_psi2_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_psi2_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_psi2_SERIAL))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_psi_SERIAL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_factorial_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16factorial_SERIAL6serialE"]
    pub static mut GiNaC_factorial_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_factorial_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_factorial_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_factorial_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_factorial_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_factorial_SERIAL))
    );
}
pub const GiNaC_factorial_NPARAMS: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_binomial_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15binomial_SERIAL6serialE"]
    pub static mut GiNaC_binomial_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_binomial_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_binomial_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_binomial_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_binomial_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_binomial_SERIAL))
    );
}
pub const GiNaC_binomial_NPARAMS: ::std::os::raw::c_uint = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_Order_SERIAL {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12Order_SERIAL6serialE"]
    pub static mut GiNaC_Order_SERIAL_serial: ::std::os::raw::c_uint;
}
#[test]
fn bindgen_test_layout_GiNaC_Order_SERIAL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_Order_SERIAL>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_Order_SERIAL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_Order_SERIAL>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_Order_SERIAL))
    );
}
pub const GiNaC_Order_NPARAMS: ::std::os::raw::c_uint = 1;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6lsolveERKNS_2exES2_j"]
    pub fn GiNaC_lsolve(
        eqns: *const GiNaC_ex,
        symbols: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6fsolveERKNS_2exERKNS_6symbolERKNS_7numericES8_"]
    pub fn GiNaC_fsolve(
        f: *const GiNaC_ex,
        x: *const GiNaC_symbol,
        x1: *const GiNaC_numeric,
        x2: *const GiNaC_numeric,
    ) -> GiNaC_numeric;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15convert_H_to_LiERKNS_2exES2_"]
    pub fn GiNaC_convert_H_to_Li(
        parameterlst: *const GiNaC_ex,
        arg: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
pub type GiNaC_paramset = [u64; 6usize];
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_fderivative {
    pub _base: GiNaC_function,
    pub parameter_set: GiNaC_paramset,
}
#[repr(C)]
pub struct GiNaC_fderivative_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_fderivative_visitor {
    pub vtable_: *const GiNaC_fderivative_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_fderivative_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_fderivative_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_fderivative_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_fderivative_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_fderivative_visitor))
    );
}
pub type GiNaC_fderivative_inherited = GiNaC_function;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11fderivative8reg_infoE"]
    pub static mut GiNaC_fderivative_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_fderivative() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_fderivative>(),
        104usize,
        concat!("Size of: ", stringify!(GiNaC_fderivative))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_fderivative>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_fderivative))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_fderivative>())).parameter_set
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_fderivative),
            "::",
            stringify!(parameter_set)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative11derivativesEv"]
    pub fn GiNaC_fderivative_derivatives(
        this: *const GiNaC_fderivative,
    ) -> *const GiNaC_paramset;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_fderivative_do_print(
        this: *const GiNaC_fderivative,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative14do_print_latexERKNS_13print_contextEj"]
    pub fn GiNaC_fderivative_do_print_latex(
        this: *const GiNaC_fderivative,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative13do_print_csrcERKNS_10print_csrcEj"]
    pub fn GiNaC_fderivative_do_print_csrc(
        this: *const GiNaC_fderivative,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_fderivative_do_print_tree(
        this: *const GiNaC_fderivative,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11fderivativeC1Ev"]
    pub fn GiNaC_fderivative_fderivative(this: *mut GiNaC_fderivative);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11fderivativeC1EjjRKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_fderivative_fderivative1(
        this: *mut GiNaC_fderivative,
        ser: ::std::os::raw::c_uint,
        param: ::std::os::raw::c_uint,
        args: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11fderivativeC1EjRKSt8multisetIjSt4lessIjESaIjEERKSt6vectorINS_2exESaIS9_EE"]
    pub fn GiNaC_fderivative_fderivative2(
        this: *mut GiNaC_fderivative,
        ser: ::std::os::raw::c_uint,
        params: *const GiNaC_paramset,
        args: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11fderivativeC1EjRKSt8multisetIjSt4lessIjESaIjEEOSt6vectorINS_2exESaIS9_EE"]
    pub fn GiNaC_fderivative_fderivative3(
        this: *mut GiNaC_fderivative,
        ser: ::std::os::raw::c_uint,
        params: *const GiNaC_paramset,
        v: *mut GiNaC_exvector,
    );
}
impl GiNaC_fderivative {
    #[inline]
    pub unsafe fn derivatives(&self) -> *const GiNaC_paramset {
        GiNaC_fderivative_derivatives(self)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_fderivative_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_fderivative_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_csrc(
        &self,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_fderivative_do_print_csrc(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_fderivative_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_fderivative_fderivative(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        ser: ::std::os::raw::c_uint,
        param: ::std::os::raw::c_uint,
        args: *const GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_fderivative_fderivative1(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            param,
            args,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        ser: ::std::os::raw::c_uint,
        params: *const GiNaC_paramset,
        args: *const GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_fderivative_fderivative2(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            params,
            args,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        ser: ::std::os::raw::c_uint,
        params: *const GiNaC_paramset,
        v: *mut GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_fderivative_fderivative3(
            __bindgen_tmp.as_mut_ptr(),
            ser,
            params,
            v,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_fderivative_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative5printERKNS_13print_contextEj"]
    pub fn GiNaC_fderivative_print(
        this: *mut ::std::os::raw::c_void,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative4evalEv"]
    pub fn GiNaC_fderivative_eval(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative6seriesERKNS_10relationalEij"]
    pub fn GiNaC_fderivative_series(
        this: *mut ::std::os::raw::c_void,
        r: *const GiNaC_relational,
        order: ::std::os::raw::c_int,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative13thiscontainerERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_fderivative_thiscontainer(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative13thiscontainerEOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_fderivative_thiscontainer1(
        this: *mut ::std::os::raw::c_void,
        v: *mut GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_fderivative_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11fderivative12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_fderivative_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative10derivativeERKNS_6symbolE"]
    pub fn GiNaC_fderivative_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative18is_equal_same_typeERKNS_5basicE"]
    pub fn GiNaC_fderivative_is_equal_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11fderivative15match_same_typeERKNS_5basicE"]
    pub fn GiNaC_fderivative_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_fderivative_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22fderivative_unarchiver8usecountE"]
    pub static mut GiNaC_fderivative_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_fderivative_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_fderivative_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_fderivative_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_fderivative_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_fderivative_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22fderivative_unarchiver6createEv"]
    pub fn GiNaC_fderivative_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22fderivative_unarchiverC1Ev"]
    pub fn GiNaC_fderivative_unarchiver_fderivative_unarchiver(
        this: *mut GiNaC_fderivative_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22fderivative_unarchiverD1Ev"]
    pub fn GiNaC_fderivative_unarchiver_fderivative_unarchiver_destructor(
        this: *mut GiNaC_fderivative_unarchiver,
    );
}
impl GiNaC_fderivative_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_fderivative_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_fderivative_unarchiver_fderivative_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_fderivative_unarchiver_fderivative_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL31fderivative_unarchiver_instanceE"]
    pub static mut GiNaC_fderivative_unarchiver_instance:
        GiNaC_fderivative_unarchiver;
}
pub type GiNaC_exhashmap = u8;
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_idx {
    pub _base: GiNaC_basic,
    pub value: GiNaC_ex,
    pub dim: GiNaC_ex,
}
#[repr(C)]
pub struct GiNaC_idx_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_idx_visitor {
    pub vtable_: *const GiNaC_idx_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_idx_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_idx_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_idx_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_idx_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_idx_visitor))
    );
}
pub type GiNaC_idx_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3idx8reg_infoE"]
    pub static mut GiNaC_idx_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_idx() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_idx>(),
        40usize,
        concat!("Size of: ", stringify!(GiNaC_idx))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_idx>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_idx))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_idx>())).value as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_idx),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_idx>())).dim as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_idx),
            "::",
            stringify!(dim)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx11replace_dimERKNS_2exE"]
    pub fn GiNaC_idx_replace_dim(
        this: *const GiNaC_idx,
        new_dim: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx11minimal_dimERKS0_"]
    pub fn GiNaC_idx_minimal_dim(
        this: *const GiNaC_idx,
        other: *const GiNaC_idx,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx11print_indexERKNS_13print_contextEj"]
    pub fn GiNaC_idx_print_index(
        this: *const GiNaC_idx,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_idx_do_print(
        this: *const GiNaC_idx,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx13do_print_csrcERKNS_10print_csrcEj"]
    pub fn GiNaC_idx_do_print_csrc(
        this: *const GiNaC_idx,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_idx_do_print_latex(
        this: *const GiNaC_idx,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_idx_do_print_tree(
        this: *const GiNaC_idx,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3idxC1Ev"]
    pub fn GiNaC_idx_idx(this: *mut GiNaC_idx);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3idxC1ERKNS_2exES3_"]
    pub fn GiNaC_idx_idx1(
        this: *mut GiNaC_idx,
        v: *const GiNaC_ex,
        dim: *const GiNaC_ex,
    );
}
impl GiNaC_idx {
    #[inline]
    pub unsafe fn replace_dim(&self, new_dim: *const GiNaC_ex) -> GiNaC_ex {
        GiNaC_idx_replace_dim(self, new_dim)
    }
    #[inline]
    pub unsafe fn minimal_dim(&self, other: *const GiNaC_idx) -> GiNaC_ex {
        GiNaC_idx_minimal_dim(self, other)
    }
    #[inline]
    pub unsafe fn print_index(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_idx_print_index(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_idx_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_csrc(
        &self,
        c: *const GiNaC_print_csrc,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_idx_do_print_csrc(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_idx_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_idx_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_idx_idx(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(v: *const GiNaC_ex, dim: *const GiNaC_ex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_idx_idx1(__bindgen_tmp.as_mut_ptr(), v, dim);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_idx_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx4infoEj"]
    pub fn GiNaC_idx_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx4nopsEv"]
    pub fn GiNaC_idx_nops(this: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx2opEm"]
    pub fn GiNaC_idx_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx3mapERNS_12map_functionE"]
    pub fn GiNaC_idx_map(
        this: *mut ::std::os::raw::c_void,
        f: *mut GiNaC_map_function,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx5evalfEv"]
    pub fn GiNaC_idx_evalf(this: *mut ::std::os::raw::c_void) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx4subsERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_idx_subs(
        this: *mut ::std::os::raw::c_void,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_idx_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC3idx12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_idx_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx10derivativeERKNS_6symbolE"]
    pub fn GiNaC_idx_derivative(
        this: *mut ::std::os::raw::c_void,
        s: *const GiNaC_symbol,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx15match_same_typeERKNS_5basicE"]
    pub fn GiNaC_idx_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx8calchashEv"]
    pub fn GiNaC_idx_calchash(
        this: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC3idx23is_dummy_pair_same_typeERKNS_5basicE"]
    pub fn GiNaC_idx_is_dummy_pair_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_idx_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14idx_unarchiver8usecountE"]
    pub static mut GiNaC_idx_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_idx_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_idx_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_idx_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_idx_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_idx_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14idx_unarchiver6createEv"]
    pub fn GiNaC_idx_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14idx_unarchiverC1Ev"]
    pub fn GiNaC_idx_unarchiver_idx_unarchiver(this: *mut GiNaC_idx_unarchiver);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14idx_unarchiverD1Ev"]
    pub fn GiNaC_idx_unarchiver_idx_unarchiver_destructor(
        this: *mut GiNaC_idx_unarchiver,
    );
}
impl GiNaC_idx_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_idx_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_idx_unarchiver_idx_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_idx_unarchiver_idx_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL23idx_unarchiver_instanceE"]
    pub static mut GiNaC_idx_unarchiver_instance: GiNaC_idx_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_varidx {
    pub _base: GiNaC_idx,
    pub covariant: bool,
}
#[repr(C)]
pub struct GiNaC_varidx_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_varidx_visitor {
    pub vtable_: *const GiNaC_varidx_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_varidx_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_varidx_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_varidx_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_varidx_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_varidx_visitor))
    );
}
pub type GiNaC_varidx_inherited = GiNaC_idx;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6varidx8reg_infoE"]
    pub static mut GiNaC_varidx_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_varidx() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_varidx>(),
        48usize,
        concat!("Size of: ", stringify!(GiNaC_varidx))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_varidx>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_varidx))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_varidx>())).covariant as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_varidx),
            "::",
            stringify!(covariant)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6varidx15toggle_varianceEv"]
    pub fn GiNaC_varidx_toggle_variance(this: *const GiNaC_varidx) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6varidx8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_varidx_do_print(
        this: *const GiNaC_varidx,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6varidx13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_varidx_do_print_tree(
        this: *const GiNaC_varidx,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6varidxC1Ev"]
    pub fn GiNaC_varidx_varidx(this: *mut GiNaC_varidx);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6varidxC1ERKNS_2exES3_b"]
    pub fn GiNaC_varidx_varidx1(
        this: *mut GiNaC_varidx,
        v: *const GiNaC_ex,
        dim: *const GiNaC_ex,
        covariant: bool,
    );
}
impl GiNaC_varidx {
    #[inline]
    pub unsafe fn toggle_variance(&self) -> GiNaC_ex {
        GiNaC_varidx_toggle_variance(self)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_varidx_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_varidx_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_varidx_varidx(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        v: *const GiNaC_ex,
        dim: *const GiNaC_ex,
        covariant: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_varidx_varidx1(__bindgen_tmp.as_mut_ptr(), v, dim, covariant);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6varidx17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_varidx_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6varidx23is_dummy_pair_same_typeERKNS_5basicE"]
    pub fn GiNaC_varidx_is_dummy_pair_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6varidx7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_varidx_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6varidx12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_varidx_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6varidx15match_same_typeERKNS_5basicE"]
    pub fn GiNaC_varidx_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_varidx_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17varidx_unarchiver8usecountE"]
    pub static mut GiNaC_varidx_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_varidx_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_varidx_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_varidx_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_varidx_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_varidx_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17varidx_unarchiver6createEv"]
    pub fn GiNaC_varidx_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17varidx_unarchiverC1Ev"]
    pub fn GiNaC_varidx_unarchiver_varidx_unarchiver(
        this: *mut GiNaC_varidx_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17varidx_unarchiverD1Ev"]
    pub fn GiNaC_varidx_unarchiver_varidx_unarchiver_destructor(
        this: *mut GiNaC_varidx_unarchiver,
    );
}
impl GiNaC_varidx_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_varidx_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_varidx_unarchiver_varidx_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_varidx_unarchiver_varidx_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL26varidx_unarchiver_instanceE"]
    pub static mut GiNaC_varidx_unarchiver_instance: GiNaC_varidx_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_spinidx {
    pub _base: GiNaC_varidx,
    pub dotted: bool,
}
#[repr(C)]
pub struct GiNaC_spinidx_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_spinidx_visitor {
    pub vtable_: *const GiNaC_spinidx_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_spinidx_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_spinidx_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_spinidx_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_spinidx_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_spinidx_visitor))
    );
}
pub type GiNaC_spinidx_inherited = GiNaC_varidx;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7spinidx8reg_infoE"]
    pub static mut GiNaC_spinidx_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_spinidx() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_spinidx>(),
        48usize,
        concat!("Size of: ", stringify!(GiNaC_spinidx))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_spinidx>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_spinidx))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_spinidx>())).dotted as *const _
                as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_spinidx),
            "::",
            stringify!(dotted)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7spinidx10toggle_dotEv"]
    pub fn GiNaC_spinidx_toggle_dot(this: *const GiNaC_spinidx) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7spinidx19toggle_variance_dotEv"]
    pub fn GiNaC_spinidx_toggle_variance_dot(
        this: *const GiNaC_spinidx,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7spinidx8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_spinidx_do_print(
        this: *const GiNaC_spinidx,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7spinidx14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_spinidx_do_print_latex(
        this: *const GiNaC_spinidx,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7spinidx13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_spinidx_do_print_tree(
        this: *const GiNaC_spinidx,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7spinidxC1Ev"]
    pub fn GiNaC_spinidx_spinidx(this: *mut GiNaC_spinidx);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7spinidxC1ERKNS_2exES3_bb"]
    pub fn GiNaC_spinidx_spinidx1(
        this: *mut GiNaC_spinidx,
        v: *const GiNaC_ex,
        dim: *const GiNaC_ex,
        covariant: bool,
        dotted: bool,
    );
}
impl GiNaC_spinidx {
    #[inline]
    pub unsafe fn toggle_dot(&self) -> GiNaC_ex {
        GiNaC_spinidx_toggle_dot(self)
    }
    #[inline]
    pub unsafe fn toggle_variance_dot(&self) -> GiNaC_ex {
        GiNaC_spinidx_toggle_variance_dot(self)
    }
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_spinidx_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_spinidx_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_spinidx_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_spinidx_spinidx(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        v: *const GiNaC_ex,
        dim: *const GiNaC_ex,
        covariant: bool,
        dotted: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_spinidx_spinidx1(
            __bindgen_tmp.as_mut_ptr(),
            v,
            dim,
            covariant,
            dotted,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7spinidx17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_spinidx_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7spinidx23is_dummy_pair_same_typeERKNS_5basicE"]
    pub fn GiNaC_spinidx_is_dummy_pair_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7spinidx7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_spinidx_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7spinidx12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_spinidx_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC7spinidx15match_same_typeERKNS_5basicE"]
    pub fn GiNaC_spinidx_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_spinidx_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18spinidx_unarchiver8usecountE"]
    pub static mut GiNaC_spinidx_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_spinidx_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_spinidx_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_spinidx_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_spinidx_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_spinidx_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18spinidx_unarchiver6createEv"]
    pub fn GiNaC_spinidx_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18spinidx_unarchiverC1Ev"]
    pub fn GiNaC_spinidx_unarchiver_spinidx_unarchiver(
        this: *mut GiNaC_spinidx_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18spinidx_unarchiverD1Ev"]
    pub fn GiNaC_spinidx_unarchiver_spinidx_unarchiver_destructor(
        this: *mut GiNaC_spinidx_unarchiver,
    );
}
impl GiNaC_spinidx_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_spinidx_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_spinidx_unarchiver_spinidx_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_spinidx_unarchiver_spinidx_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL27spinidx_unarchiver_instanceE"]
    pub static mut GiNaC_spinidx_unarchiver_instance: GiNaC_spinidx_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13is_dummy_pairERKNS_3idxES2_"]
    pub fn GiNaC_is_dummy_pair(
        i1: *const GiNaC_idx,
        i2: *const GiNaC_idx,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13is_dummy_pairERKNS_2exES2_"]
    pub fn GiNaC_is_dummy_pair1(
        e1: *const GiNaC_ex,
        e2: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19find_free_and_dummyEN9__gnu_cxx17__normal_iteratorIPKNS_2exESt6vectorIS2_SaIS2_EEEES8_RS7_S9_"]
    pub fn GiNaC_find_free_and_dummy(
        it: __gnu_cxx___normal_iterator<const_pointer>,
        itend: __gnu_cxx___normal_iterator<const_pointer>,
        out_free: *mut GiNaC_exvector,
        out_dummy: *mut GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11minimal_dimERKNS_2exES2_"]
    pub fn GiNaC_minimal_dim(
        dim1: *const GiNaC_ex,
        dim2: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensor {
    pub _base: GiNaC_basic,
}
#[repr(C)]
pub struct GiNaC_tensor_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensor_visitor {
    pub vtable_: *const GiNaC_tensor_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_tensor_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensor_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_tensor_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensor_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_tensor_visitor))
    );
}
pub type GiNaC_tensor_inherited = GiNaC_basic;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6tensor8reg_infoE"]
    pub static mut GiNaC_tensor_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_tensor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensor>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_tensor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_tensor))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6tensor19replace_contr_indexEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_"]
    pub fn GiNaC_tensor_replace_contr_index(
        this: *const GiNaC_tensor,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6tensorC1Ev"]
    pub fn GiNaC_tensor_tensor(this: *mut GiNaC_tensor);
}
impl GiNaC_tensor {
    #[inline]
    pub unsafe fn replace_contr_index(
        &self,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
    ) -> bool {
        GiNaC_tensor_replace_contr_index(self, self_, other)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_tensor_tensor(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6tensor17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_tensor_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensdelta {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_tensdelta_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensdelta_visitor {
    pub vtable_: *const GiNaC_tensdelta_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_tensdelta_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensdelta_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_tensdelta_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensdelta_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_tensdelta_visitor))
    );
}
pub type GiNaC_tensdelta_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9tensdelta8reg_infoE"]
    pub static mut GiNaC_tensdelta_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_tensdelta() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensdelta>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_tensdelta))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensdelta>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_tensdelta))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9tensdelta8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_tensdelta_do_print(
        this: *const GiNaC_tensdelta,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9tensdelta14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_tensdelta_do_print_latex(
        this: *const GiNaC_tensdelta,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9tensdeltaC1Ev"]
    pub fn GiNaC_tensdelta_tensdelta(this: *mut GiNaC_tensdelta);
}
impl GiNaC_tensdelta {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_tensdelta_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_tensdelta_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_tensdelta_tensdelta(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9tensdelta17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_tensdelta_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9tensdelta4infoEj"]
    pub fn GiNaC_tensdelta_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9tensdelta12eval_indexedERKNS_5basicE"]
    pub fn GiNaC_tensdelta_eval_indexed(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_basic,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC9tensdelta13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_tensdelta_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensdelta_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20tensdelta_unarchiver8usecountE"]
    pub static mut GiNaC_tensdelta_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_tensdelta_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensdelta_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_tensdelta_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensdelta_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_tensdelta_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20tensdelta_unarchiver6createEv"]
    pub fn GiNaC_tensdelta_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20tensdelta_unarchiverC1Ev"]
    pub fn GiNaC_tensdelta_unarchiver_tensdelta_unarchiver(
        this: *mut GiNaC_tensdelta_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20tensdelta_unarchiverD1Ev"]
    pub fn GiNaC_tensdelta_unarchiver_tensdelta_unarchiver_destructor(
        this: *mut GiNaC_tensdelta_unarchiver,
    );
}
impl GiNaC_tensdelta_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_tensdelta_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_tensdelta_unarchiver_tensdelta_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_tensdelta_unarchiver_tensdelta_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL29tensdelta_unarchiver_instanceE"]
    pub static mut GiNaC_tensdelta_unarchiver_instance:
        GiNaC_tensdelta_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensmetric {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_tensmetric_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensmetric_visitor {
    pub vtable_: *const GiNaC_tensmetric_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_tensmetric_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensmetric_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_tensmetric_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensmetric_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_tensmetric_visitor))
    );
}
pub type GiNaC_tensmetric_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10tensmetric8reg_infoE"]
    pub static mut GiNaC_tensmetric_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_tensmetric() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensmetric>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_tensmetric))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensmetric>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_tensmetric))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10tensmetric8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_tensmetric_do_print(
        this: *const GiNaC_tensmetric,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10tensmetricC1Ev"]
    pub fn GiNaC_tensmetric_tensmetric(this: *mut GiNaC_tensmetric);
}
impl GiNaC_tensmetric {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_tensmetric_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_tensmetric_tensmetric(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10tensmetric17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_tensmetric_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10tensmetric4infoEj"]
    pub fn GiNaC_tensmetric_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10tensmetric12eval_indexedERKNS_5basicE"]
    pub fn GiNaC_tensmetric_eval_indexed(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_basic,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10tensmetric13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_tensmetric_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensmetric_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21tensmetric_unarchiver8usecountE"]
    pub static mut GiNaC_tensmetric_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_tensmetric_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensmetric_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_tensmetric_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensmetric_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_tensmetric_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21tensmetric_unarchiver6createEv"]
    pub fn GiNaC_tensmetric_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21tensmetric_unarchiverC1Ev"]
    pub fn GiNaC_tensmetric_unarchiver_tensmetric_unarchiver(
        this: *mut GiNaC_tensmetric_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21tensmetric_unarchiverD1Ev"]
    pub fn GiNaC_tensmetric_unarchiver_tensmetric_unarchiver_destructor(
        this: *mut GiNaC_tensmetric_unarchiver,
    );
}
impl GiNaC_tensmetric_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_tensmetric_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_tensmetric_unarchiver_tensmetric_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_tensmetric_unarchiver_tensmetric_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL30tensmetric_unarchiver_instanceE"]
    pub static mut GiNaC_tensmetric_unarchiver_instance:
        GiNaC_tensmetric_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_minkmetric {
    pub _base: GiNaC_tensmetric,
    pub pos_sig: bool,
}
#[repr(C)]
pub struct GiNaC_minkmetric_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_minkmetric_visitor {
    pub vtable_: *const GiNaC_minkmetric_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_minkmetric_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_minkmetric_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_minkmetric_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_minkmetric_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_minkmetric_visitor))
    );
}
pub type GiNaC_minkmetric_inherited = GiNaC_tensmetric;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10minkmetric8reg_infoE"]
    pub static mut GiNaC_minkmetric_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_minkmetric() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_minkmetric>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_minkmetric))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_minkmetric>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_minkmetric))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_minkmetric>())).pos_sig as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_minkmetric),
            "::",
            stringify!(pos_sig)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10minkmetric8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_minkmetric_do_print(
        this: *const GiNaC_minkmetric,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10minkmetric14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_minkmetric_do_print_latex(
        this: *const GiNaC_minkmetric,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10minkmetricC1Ev"]
    pub fn GiNaC_minkmetric_minkmetric(this: *mut GiNaC_minkmetric);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10minkmetricC1Eb"]
    pub fn GiNaC_minkmetric_minkmetric1(
        this: *mut GiNaC_minkmetric,
        pos_sig: bool,
    );
}
impl GiNaC_minkmetric {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_minkmetric_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_minkmetric_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_minkmetric_minkmetric(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(pos_sig: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_minkmetric_minkmetric1(__bindgen_tmp.as_mut_ptr(), pos_sig);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10minkmetric17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_minkmetric_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10minkmetric4infoEj"]
    pub fn GiNaC_minkmetric_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10minkmetric12eval_indexedERKNS_5basicE"]
    pub fn GiNaC_minkmetric_eval_indexed(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_basic,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10minkmetric7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_minkmetric_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10minkmetric12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_minkmetric_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_minkmetric_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21minkmetric_unarchiver8usecountE"]
    pub static mut GiNaC_minkmetric_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_minkmetric_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_minkmetric_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_minkmetric_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_minkmetric_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_minkmetric_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21minkmetric_unarchiver6createEv"]
    pub fn GiNaC_minkmetric_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21minkmetric_unarchiverC1Ev"]
    pub fn GiNaC_minkmetric_unarchiver_minkmetric_unarchiver(
        this: *mut GiNaC_minkmetric_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21minkmetric_unarchiverD1Ev"]
    pub fn GiNaC_minkmetric_unarchiver_minkmetric_unarchiver_destructor(
        this: *mut GiNaC_minkmetric_unarchiver,
    );
}
impl GiNaC_minkmetric_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_minkmetric_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_minkmetric_unarchiver_minkmetric_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_minkmetric_unarchiver_minkmetric_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL30minkmetric_unarchiver_instanceE"]
    pub static mut GiNaC_minkmetric_unarchiver_instance:
        GiNaC_minkmetric_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_spinmetric {
    pub _base: GiNaC_tensmetric,
}
#[repr(C)]
pub struct GiNaC_spinmetric_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_spinmetric_visitor {
    pub vtable_: *const GiNaC_spinmetric_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_spinmetric_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_spinmetric_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_spinmetric_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_spinmetric_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_spinmetric_visitor))
    );
}
pub type GiNaC_spinmetric_inherited = GiNaC_tensmetric;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10spinmetric8reg_infoE"]
    pub static mut GiNaC_spinmetric_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_spinmetric() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_spinmetric>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_spinmetric))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_spinmetric>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_spinmetric))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10spinmetric8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_spinmetric_do_print(
        this: *const GiNaC_spinmetric,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10spinmetric14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_spinmetric_do_print_latex(
        this: *const GiNaC_spinmetric,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10spinmetricC1Ev"]
    pub fn GiNaC_spinmetric_spinmetric(this: *mut GiNaC_spinmetric);
}
impl GiNaC_spinmetric {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_spinmetric_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_spinmetric_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_spinmetric_spinmetric(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10spinmetric17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_spinmetric_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10spinmetric4infoEj"]
    pub fn GiNaC_spinmetric_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10spinmetric12eval_indexedERKNS_5basicE"]
    pub fn GiNaC_spinmetric_eval_indexed(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_basic,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10spinmetric13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_spinmetric_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_spinmetric_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21spinmetric_unarchiver8usecountE"]
    pub static mut GiNaC_spinmetric_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_spinmetric_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_spinmetric_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_spinmetric_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_spinmetric_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_spinmetric_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21spinmetric_unarchiver6createEv"]
    pub fn GiNaC_spinmetric_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21spinmetric_unarchiverC1Ev"]
    pub fn GiNaC_spinmetric_unarchiver_spinmetric_unarchiver(
        this: *mut GiNaC_spinmetric_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21spinmetric_unarchiverD1Ev"]
    pub fn GiNaC_spinmetric_unarchiver_spinmetric_unarchiver_destructor(
        this: *mut GiNaC_spinmetric_unarchiver,
    );
}
impl GiNaC_spinmetric_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_spinmetric_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_spinmetric_unarchiver_spinmetric_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_spinmetric_unarchiver_spinmetric_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL30spinmetric_unarchiver_instanceE"]
    pub static mut GiNaC_spinmetric_unarchiver_instance:
        GiNaC_spinmetric_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensepsilon {
    pub _base: GiNaC_tensor,
    pub minkowski: bool,
    pub pos_sig: bool,
}
#[repr(C)]
pub struct GiNaC_tensepsilon_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensepsilon_visitor {
    pub vtable_: *const GiNaC_tensepsilon_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_tensepsilon_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensepsilon_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_tensepsilon_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensepsilon_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_tensepsilon_visitor))
    );
}
pub type GiNaC_tensepsilon_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11tensepsilon8reg_infoE"]
    pub static mut GiNaC_tensepsilon_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_tensepsilon() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensepsilon>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_tensepsilon))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensepsilon>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_tensepsilon))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_tensepsilon>())).minkowski as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_tensepsilon),
            "::",
            stringify!(minkowski)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_tensepsilon>())).pos_sig as *const _
                as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_tensepsilon),
            "::",
            stringify!(pos_sig)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11tensepsilon8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_tensepsilon_do_print(
        this: *const GiNaC_tensepsilon,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11tensepsilon14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_tensepsilon_do_print_latex(
        this: *const GiNaC_tensepsilon,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11tensepsilonC1Ev"]
    pub fn GiNaC_tensepsilon_tensepsilon(this: *mut GiNaC_tensepsilon);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11tensepsilonC1Ebb"]
    pub fn GiNaC_tensepsilon_tensepsilon1(
        this: *mut GiNaC_tensepsilon,
        minkowski: bool,
        pos_sig: bool,
    );
}
impl GiNaC_tensepsilon {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_tensepsilon_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_tensepsilon_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_tensepsilon_tensepsilon(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(minkowski: bool, pos_sig: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_tensepsilon_tensepsilon1(
            __bindgen_tmp.as_mut_ptr(),
            minkowski,
            pos_sig,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11tensepsilon17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_tensepsilon_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11tensepsilon4infoEj"]
    pub fn GiNaC_tensepsilon_info(
        this: *mut ::std::os::raw::c_void,
        inf: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11tensepsilon12eval_indexedERKNS_5basicE"]
    pub fn GiNaC_tensepsilon_eval_indexed(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_basic,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11tensepsilon13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_tensepsilon_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11tensepsilon7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_tensepsilon_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11tensepsilon12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_tensepsilon_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        syms: *mut GiNaC_lst,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_tensepsilon_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22tensepsilon_unarchiver8usecountE"]
    pub static mut GiNaC_tensepsilon_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_tensepsilon_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_tensepsilon_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_tensepsilon_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_tensepsilon_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_tensepsilon_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22tensepsilon_unarchiver6createEv"]
    pub fn GiNaC_tensepsilon_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22tensepsilon_unarchiverC1Ev"]
    pub fn GiNaC_tensepsilon_unarchiver_tensepsilon_unarchiver(
        this: *mut GiNaC_tensepsilon_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22tensepsilon_unarchiverD1Ev"]
    pub fn GiNaC_tensepsilon_unarchiver_tensepsilon_unarchiver_destructor(
        this: *mut GiNaC_tensepsilon_unarchiver,
    );
}
impl GiNaC_tensepsilon_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_tensepsilon_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_tensepsilon_unarchiver_tensepsilon_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_tensepsilon_unarchiver_tensepsilon_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL31tensepsilon_unarchiver_instanceE"]
    pub static mut GiNaC_tensepsilon_unarchiver_instance:
        GiNaC_tensepsilon_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12delta_tensorERKNS_2exES2_"]
    pub fn GiNaC_delta_tensor(
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13metric_tensorERKNS_2exES2_"]
    pub fn GiNaC_metric_tensor(
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9lorentz_gERKNS_2exES2_b"]
    pub fn GiNaC_lorentz_g(
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        pos_sig: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13spinor_metricERKNS_2exES2_"]
    pub fn GiNaC_spinor_metric(
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14epsilon_tensorERKNS_2exES2_"]
    pub fn GiNaC_epsilon_tensor(
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14epsilon_tensorERKNS_2exES2_S2_"]
    pub fn GiNaC_epsilon_tensor1(
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11lorentz_epsERKNS_2exES2_S2_S2_b"]
    pub fn GiNaC_lorentz_eps(
        i1: *const GiNaC_ex,
        i2: *const GiNaC_ex,
        i3: *const GiNaC_ex,
        i4: *const GiNaC_ex,
        pos_sig: bool,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_color {
    pub _base: GiNaC_indexed,
    pub representation_label: ::std::os::raw::c_uchar,
}
#[repr(C)]
pub struct GiNaC_color_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_color_visitor {
    pub vtable_: *const GiNaC_color_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_color_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_color_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_color_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_color_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_color_visitor))
    );
}
pub type GiNaC_color_inherited = GiNaC_indexed;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5color8reg_infoE"]
    pub static mut GiNaC_color_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_color() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_color>(),
        64usize,
        concat!("Size of: ", stringify!(GiNaC_color))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_color>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_color))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_color>())).representation_label
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_color),
            "::",
            stringify!(representation_label)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5colorC1Ev"]
    pub fn GiNaC_color_color(this: *mut GiNaC_color);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5colorC1ERKNS_2exEh"]
    pub fn GiNaC_color_color1(
        this: *mut GiNaC_color,
        b: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5colorC1ERKNS_2exES3_h"]
    pub fn GiNaC_color_color2(
        this: *mut GiNaC_color,
        b: *const GiNaC_ex,
        i1: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5colorC1EhRKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_color_color3(
        this: *mut GiNaC_color,
        rl: ::std::os::raw::c_uchar,
        v: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5colorC1EhOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_color_color4(
        this: *mut GiNaC_color,
        rl: ::std::os::raw::c_uchar,
        v: *mut GiNaC_exvector,
    );
}
impl GiNaC_color {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_color_color(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        b: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_color_color1(__bindgen_tmp.as_mut_ptr(), b, rl);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        b: *const GiNaC_ex,
        i1: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_color_color2(__bindgen_tmp.as_mut_ptr(), b, i1, rl);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        rl: ::std::os::raw::c_uchar,
        v: *const GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_color_color3(__bindgen_tmp.as_mut_ptr(), rl, v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        rl: ::std::os::raw::c_uchar,
        v: *mut GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_color_color4(__bindgen_tmp.as_mut_ptr(), rl, v);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5color17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_color_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5color7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_color_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC5color12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_color_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        sym_lst: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5color10eval_ncmulERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_color_eval_ncmul(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5color15match_same_typeERKNS_5basicE"]
    pub fn GiNaC_color_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5color13thiscontainerERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_color_thiscontainer(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5color13thiscontainerEOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_color_thiscontainer1(
        this: *mut ::std::os::raw::c_void,
        v: *mut GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC5color17return_type_tinfoEv"]
    pub fn GiNaC_color_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_color_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16color_unarchiver8usecountE"]
    pub static mut GiNaC_color_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_color_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_color_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_color_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_color_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_color_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16color_unarchiver6createEv"]
    pub fn GiNaC_color_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16color_unarchiverC1Ev"]
    pub fn GiNaC_color_unarchiver_color_unarchiver(
        this: *mut GiNaC_color_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16color_unarchiverD1Ev"]
    pub fn GiNaC_color_unarchiver_color_unarchiver_destructor(
        this: *mut GiNaC_color_unarchiver,
    );
}
impl GiNaC_color_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_color_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_color_unarchiver_color_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_color_unarchiver_color_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL25color_unarchiver_instanceE"]
    pub static mut GiNaC_color_unarchiver_instance: GiNaC_color_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3one {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_su3one_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3one_visitor {
    pub vtable_: *const GiNaC_su3one_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_su3one_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3one_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_su3one_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3one_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_su3one_visitor))
    );
}
pub type GiNaC_su3one_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6su3one8reg_infoE"]
    pub static mut GiNaC_su3one_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_su3one() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3one>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_su3one))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3one>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_su3one))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6su3one8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_su3one_do_print(
        this: *const GiNaC_su3one,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6su3one14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_su3one_do_print_latex(
        this: *const GiNaC_su3one,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6su3oneC1Ev"]
    pub fn GiNaC_su3one_su3one(this: *mut GiNaC_su3one);
}
impl GiNaC_su3one {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_su3one_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_su3one_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_su3one_su3one(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC6su3one17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_su3one_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3one_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17su3one_unarchiver8usecountE"]
    pub static mut GiNaC_su3one_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_su3one_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3one_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_su3one_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3one_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_su3one_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17su3one_unarchiver6createEv"]
    pub fn GiNaC_su3one_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17su3one_unarchiverC1Ev"]
    pub fn GiNaC_su3one_unarchiver_su3one_unarchiver(
        this: *mut GiNaC_su3one_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17su3one_unarchiverD1Ev"]
    pub fn GiNaC_su3one_unarchiver_su3one_unarchiver_destructor(
        this: *mut GiNaC_su3one_unarchiver,
    );
}
impl GiNaC_su3one_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_su3one_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_su3one_unarchiver_su3one_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_su3one_unarchiver_su3one_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL26su3one_unarchiver_instanceE"]
    pub static mut GiNaC_su3one_unarchiver_instance: GiNaC_su3one_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3t {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_su3t_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3t_visitor {
    pub vtable_: *const GiNaC_su3t_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_su3t_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3t_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_su3t_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3t_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_su3t_visitor))
    );
}
pub type GiNaC_su3t_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4su3t8reg_infoE"]
    pub static mut GiNaC_su3t_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_su3t() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3t>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_su3t))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3t>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_su3t))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3t8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_su3t_do_print(
        this: *const GiNaC_su3t,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3t14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_su3t_do_print_latex(
        this: *const GiNaC_su3t,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4su3tC1Ev"]
    pub fn GiNaC_su3t_su3t(this: *mut GiNaC_su3t);
}
impl GiNaC_su3t {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_su3t_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_su3t_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_su3t_su3t(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3t17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_su3t_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3t13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_su3t_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3t_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3t_unarchiver8usecountE"]
    pub static mut GiNaC_su3t_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_su3t_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3t_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_su3t_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3t_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_su3t_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3t_unarchiver6createEv"]
    pub fn GiNaC_su3t_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3t_unarchiverC1Ev"]
    pub fn GiNaC_su3t_unarchiver_su3t_unarchiver(
        this: *mut GiNaC_su3t_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3t_unarchiverD1Ev"]
    pub fn GiNaC_su3t_unarchiver_su3t_unarchiver_destructor(
        this: *mut GiNaC_su3t_unarchiver,
    );
}
impl GiNaC_su3t_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_su3t_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_su3t_unarchiver_su3t_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_su3t_unarchiver_su3t_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL24su3t_unarchiver_instanceE"]
    pub static mut GiNaC_su3t_unarchiver_instance: GiNaC_su3t_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3f {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_su3f_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3f_visitor {
    pub vtable_: *const GiNaC_su3f_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_su3f_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3f_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_su3f_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3f_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_su3f_visitor))
    );
}
pub type GiNaC_su3f_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4su3f8reg_infoE"]
    pub static mut GiNaC_su3f_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_su3f() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3f>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_su3f))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3f>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_su3f))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3f8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_su3f_do_print(
        this: *const GiNaC_su3f,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3f14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_su3f_do_print_latex(
        this: *const GiNaC_su3f,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4su3fC1Ev"]
    pub fn GiNaC_su3f_su3f(this: *mut GiNaC_su3f);
}
impl GiNaC_su3f {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_su3f_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_su3f_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_su3f_su3f(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3f17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_su3f_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3f12eval_indexedERKNS_5basicE"]
    pub fn GiNaC_su3f_eval_indexed(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_basic,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3f13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_su3f_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3f_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3f_unarchiver8usecountE"]
    pub static mut GiNaC_su3f_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_su3f_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3f_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_su3f_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3f_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_su3f_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3f_unarchiver6createEv"]
    pub fn GiNaC_su3f_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3f_unarchiverC1Ev"]
    pub fn GiNaC_su3f_unarchiver_su3f_unarchiver(
        this: *mut GiNaC_su3f_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3f_unarchiverD1Ev"]
    pub fn GiNaC_su3f_unarchiver_su3f_unarchiver_destructor(
        this: *mut GiNaC_su3f_unarchiver,
    );
}
impl GiNaC_su3f_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_su3f_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_su3f_unarchiver_su3f_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_su3f_unarchiver_su3f_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL24su3f_unarchiver_instanceE"]
    pub static mut GiNaC_su3f_unarchiver_instance: GiNaC_su3f_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3d {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_su3d_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3d_visitor {
    pub vtable_: *const GiNaC_su3d_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_su3d_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3d_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_su3d_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3d_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_su3d_visitor))
    );
}
pub type GiNaC_su3d_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4su3d8reg_infoE"]
    pub static mut GiNaC_su3d_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_su3d() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3d>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_su3d))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3d>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_su3d))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3d8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_su3d_do_print(
        this: *const GiNaC_su3d,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3d14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_su3d_do_print_latex(
        this: *const GiNaC_su3d,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC4su3dC1Ev"]
    pub fn GiNaC_su3d_su3d(this: *mut GiNaC_su3d);
}
impl GiNaC_su3d {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_su3d_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_su3d_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_su3d_su3d(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3d17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_su3d_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3d12eval_indexedERKNS_5basicE"]
    pub fn GiNaC_su3d_eval_indexed(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_basic,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC4su3d13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_su3d_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_su3d_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3d_unarchiver8usecountE"]
    pub static mut GiNaC_su3d_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_su3d_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_su3d_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_su3d_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_su3d_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_su3d_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3d_unarchiver6createEv"]
    pub fn GiNaC_su3d_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3d_unarchiverC1Ev"]
    pub fn GiNaC_su3d_unarchiver_su3d_unarchiver(
        this: *mut GiNaC_su3d_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15su3d_unarchiverD1Ev"]
    pub fn GiNaC_su3d_unarchiver_su3d_unarchiver_destructor(
        this: *mut GiNaC_su3d_unarchiver,
    );
}
impl GiNaC_su3d_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_su3d_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_su3d_unarchiver_su3d_unarchiver(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_su3d_unarchiver_su3d_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL24su3d_unarchiver_instanceE"]
    pub static mut GiNaC_su3d_unarchiver_instance: GiNaC_su3d_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9color_ONEEh"]
    pub fn GiNaC_color_ONE(rl: ::std::os::raw::c_uchar) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7color_TERKNS_2exEh"]
    pub fn GiNaC_color_T(
        a: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7color_fERKNS_2exES2_S2_"]
    pub fn GiNaC_color_f(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        c: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7color_dERKNS_2exES2_S2_"]
    pub fn GiNaC_color_d(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        c: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7color_hERKNS_2exES2_S2_"]
    pub fn GiNaC_color_h(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        c: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11color_traceERKNS_2exERKSt3setIhSt4lessIhESaIhEE"]
    pub fn GiNaC_color_trace(e: *const GiNaC_ex, rls: *const u8) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11color_traceERKNS_2exERKNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_color_trace1(
        e: *const GiNaC_ex,
        rll: *const GiNaC_lst,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11color_traceERKNS_2exEh"]
    pub fn GiNaC_color_trace2(
        e: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_clifford {
    pub _base: GiNaC_indexed,
    pub representation_label: ::std::os::raw::c_uchar,
    pub metric: GiNaC_ex,
    pub commutator_sign: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct GiNaC_clifford_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_clifford_visitor {
    pub vtable_: *const GiNaC_clifford_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_clifford_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_clifford_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_clifford_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_clifford_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_clifford_visitor))
    );
}
pub type GiNaC_clifford_inherited = GiNaC_indexed;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8clifford8reg_infoE"]
    pub static mut GiNaC_clifford_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_clifford() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_clifford>(),
        80usize,
        concat!("Size of: ", stringify!(GiNaC_clifford))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_clifford>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_clifford))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_clifford>())).representation_label
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_clifford),
            "::",
            stringify!(representation_label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_clifford>())).metric as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_clifford),
            "::",
            stringify!(metric)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_clifford>())).commutator_sign
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_clifford),
            "::",
            stringify!(commutator_sign)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford11same_metricERKNS_2exE"]
    pub fn GiNaC_clifford_same_metric(
        this: *const GiNaC_clifford,
        other: *const GiNaC_ex,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford13do_print_dfltERKNS_10print_dfltEj"]
    pub fn GiNaC_clifford_do_print_dflt(
        this: *const GiNaC_clifford,
        c: *const GiNaC_print_dflt,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_clifford_do_print_latex(
        this: *const GiNaC_clifford,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford13do_print_treeERKNS_10print_treeEj"]
    pub fn GiNaC_clifford_do_print_tree(
        this: *const GiNaC_clifford,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8cliffordC1Ev"]
    pub fn GiNaC_clifford_clifford(this: *mut GiNaC_clifford);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8cliffordC1ERKNS_2exEh"]
    pub fn GiNaC_clifford_clifford1(
        this: *mut GiNaC_clifford,
        b: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8cliffordC1ERKNS_2exES3_S3_hi"]
    pub fn GiNaC_clifford_clifford2(
        this: *mut GiNaC_clifford,
        b: *const GiNaC_ex,
        mu: *const GiNaC_ex,
        metr: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
        comm_sign: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8cliffordC1EhRKNS_2exEiRKSt6vectorIS1_SaIS1_EE"]
    pub fn GiNaC_clifford_clifford3(
        this: *mut GiNaC_clifford,
        rl: ::std::os::raw::c_uchar,
        metr: *const GiNaC_ex,
        comm_sign: ::std::os::raw::c_int,
        v: *const GiNaC_exvector,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8cliffordC1EhRKNS_2exEiOSt6vectorIS1_SaIS1_EE"]
    pub fn GiNaC_clifford_clifford4(
        this: *mut GiNaC_clifford,
        rl: ::std::os::raw::c_uchar,
        metr: *const GiNaC_ex,
        comm_sign: ::std::os::raw::c_int,
        v: *mut GiNaC_exvector,
    );
}
impl GiNaC_clifford {
    #[inline]
    pub unsafe fn same_metric(&self, other: *const GiNaC_ex) -> bool {
        GiNaC_clifford_same_metric(self, other)
    }
    #[inline]
    pub unsafe fn do_print_dflt(
        &self,
        c: *const GiNaC_print_dflt,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_clifford_do_print_dflt(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_clifford_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_tree(
        &self,
        c: *const GiNaC_print_tree,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_clifford_do_print_tree(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_clifford_clifford(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        b: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_clifford_clifford1(__bindgen_tmp.as_mut_ptr(), b, rl);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        b: *const GiNaC_ex,
        mu: *const GiNaC_ex,
        metr: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
        comm_sign: ::std::os::raw::c_int,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_clifford_clifford2(
            __bindgen_tmp.as_mut_ptr(),
            b,
            mu,
            metr,
            rl,
            comm_sign,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        rl: ::std::os::raw::c_uchar,
        metr: *const GiNaC_ex,
        comm_sign: ::std::os::raw::c_int,
        v: *const GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_clifford_clifford3(
            __bindgen_tmp.as_mut_ptr(),
            rl,
            metr,
            comm_sign,
            v,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        rl: ::std::os::raw::c_uchar,
        metr: *const GiNaC_ex,
        comm_sign: ::std::os::raw::c_int,
        v: *mut GiNaC_exvector,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_clifford_clifford4(
            __bindgen_tmp.as_mut_ptr(),
            rl,
            metr,
            comm_sign,
            v,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_clifford_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford7archiveERNS_12archive_nodeE"]
    pub fn GiNaC_clifford_archive(
        this: *mut ::std::os::raw::c_void,
        n: *mut GiNaC_archive_node,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8clifford12read_archiveERKNS_12archive_nodeERNS_9containerINSt7__cxx114listEEE"]
    pub fn GiNaC_clifford_read_archive(
        this: *mut ::std::os::raw::c_void,
        n: *const GiNaC_archive_node,
        sym_lst: *mut GiNaC_lst,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford10eval_ncmulERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_clifford_eval_ncmul(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford15match_same_typeERKNS_5basicE"]
    pub fn GiNaC_clifford_match_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford13thiscontainerERKSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_clifford_thiscontainer(
        this: *mut ::std::os::raw::c_void,
        v: *const GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford13thiscontainerEOSt6vectorINS_2exESaIS2_EE"]
    pub fn GiNaC_clifford_thiscontainer1(
        this: *mut ::std::os::raw::c_void,
        v: *mut GiNaC_exvector,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford17return_type_tinfoEv"]
    pub fn GiNaC_clifford_return_type_tinfo(
        this: *mut ::std::os::raw::c_void,
    ) -> GiNaC_return_type_t;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford10get_metricERKNS_2exES3_b"]
    pub fn GiNaC_clifford_get_metric(
        this: *mut ::std::os::raw::c_void,
        i: *const GiNaC_ex,
        j: *const GiNaC_ex,
        symmetrised: bool,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford2opEm"]
    pub fn GiNaC_clifford_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8clifford6let_opEm"]
    pub fn GiNaC_clifford_let_op(
        this: *mut ::std::os::raw::c_void,
        i: size_t,
    ) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8clifford4subsERKSt3mapINS_2exES2_NS_10ex_is_lessESaISt4pairIKS2_S2_EEEj"]
    pub fn GiNaC_clifford_subs(
        this: *mut ::std::os::raw::c_void,
        m: *const GiNaC_exmap,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_clifford_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19clifford_unarchiver8usecountE"]
    pub static mut GiNaC_clifford_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_clifford_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_clifford_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_clifford_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_clifford_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_clifford_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19clifford_unarchiver6createEv"]
    pub fn GiNaC_clifford_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19clifford_unarchiverC1Ev"]
    pub fn GiNaC_clifford_unarchiver_clifford_unarchiver(
        this: *mut GiNaC_clifford_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19clifford_unarchiverD1Ev"]
    pub fn GiNaC_clifford_unarchiver_clifford_unarchiver_destructor(
        this: *mut GiNaC_clifford_unarchiver,
    );
}
impl GiNaC_clifford_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_clifford_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_clifford_unarchiver_clifford_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_clifford_unarchiver_clifford_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL28clifford_unarchiver_instanceE"]
    pub static mut GiNaC_clifford_unarchiver_instance:
        GiNaC_clifford_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracone {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_diracone_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracone_visitor {
    pub vtable_: *const GiNaC_diracone_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_diracone_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracone_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_diracone_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracone_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracone_visitor))
    );
}
pub type GiNaC_diracone_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8diracone8reg_infoE"]
    pub static mut GiNaC_diracone_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_diracone() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracone>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_diracone))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracone>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracone))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8diracone8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_diracone_do_print(
        this: *const GiNaC_diracone,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8diracone14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_diracone_do_print_latex(
        this: *const GiNaC_diracone,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC8diraconeC1Ev"]
    pub fn GiNaC_diracone_diracone(this: *mut GiNaC_diracone);
}
impl GiNaC_diracone {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracone_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracone_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracone_diracone(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC8diracone17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_diracone_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracone_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19diracone_unarchiver8usecountE"]
    pub static mut GiNaC_diracone_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_diracone_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracone_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_diracone_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracone_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_diracone_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19diracone_unarchiver6createEv"]
    pub fn GiNaC_diracone_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19diracone_unarchiverC1Ev"]
    pub fn GiNaC_diracone_unarchiver_diracone_unarchiver(
        this: *mut GiNaC_diracone_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC19diracone_unarchiverD1Ev"]
    pub fn GiNaC_diracone_unarchiver_diracone_unarchiver_destructor(
        this: *mut GiNaC_diracone_unarchiver,
    );
}
impl GiNaC_diracone_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_diracone_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracone_unarchiver_diracone_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_diracone_unarchiver_diracone_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL28diracone_unarchiver_instanceE"]
    pub static mut GiNaC_diracone_unarchiver_instance:
        GiNaC_diracone_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_cliffordunit {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_cliffordunit_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_cliffordunit_visitor {
    pub vtable_: *const GiNaC_cliffordunit_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_cliffordunit_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_cliffordunit_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_cliffordunit_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_cliffordunit_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_cliffordunit_visitor))
    );
}
pub type GiNaC_cliffordunit_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12cliffordunit8reg_infoE"]
    pub static mut GiNaC_cliffordunit_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_cliffordunit() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_cliffordunit>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_cliffordunit))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_cliffordunit>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_cliffordunit))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12cliffordunit8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_cliffordunit_do_print(
        this: *const GiNaC_cliffordunit,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12cliffordunit14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_cliffordunit_do_print_latex(
        this: *const GiNaC_cliffordunit,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12cliffordunitC1Ev"]
    pub fn GiNaC_cliffordunit_cliffordunit(this: *mut GiNaC_cliffordunit);
}
impl GiNaC_cliffordunit {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_cliffordunit_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_cliffordunit_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_cliffordunit_cliffordunit(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12cliffordunit17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_cliffordunit_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC12cliffordunit13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_cliffordunit_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_cliffordunit_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC23cliffordunit_unarchiver8usecountE"]
    pub static mut GiNaC_cliffordunit_unarchiver_usecount:
        ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_cliffordunit_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_cliffordunit_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_cliffordunit_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_cliffordunit_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_cliffordunit_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC23cliffordunit_unarchiver6createEv"]
    pub fn GiNaC_cliffordunit_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC23cliffordunit_unarchiverC1Ev"]
    pub fn GiNaC_cliffordunit_unarchiver_cliffordunit_unarchiver(
        this: *mut GiNaC_cliffordunit_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC23cliffordunit_unarchiverD1Ev"]
    pub fn GiNaC_cliffordunit_unarchiver_cliffordunit_unarchiver_destructor(
        this: *mut GiNaC_cliffordunit_unarchiver,
    );
}
impl GiNaC_cliffordunit_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_cliffordunit_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_cliffordunit_unarchiver_cliffordunit_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_cliffordunit_unarchiver_cliffordunit_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL32cliffordunit_unarchiver_instanceE"]
    pub static mut GiNaC_cliffordunit_unarchiver_instance:
        GiNaC_cliffordunit_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgamma {
    pub _base: GiNaC_cliffordunit,
}
#[repr(C)]
pub struct GiNaC_diracgamma_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgamma_visitor {
    pub vtable_: *const GiNaC_diracgamma_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_diracgamma_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgamma_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_diracgamma_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgamma_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgamma_visitor))
    );
}
pub type GiNaC_diracgamma_inherited = GiNaC_cliffordunit;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10diracgamma8reg_infoE"]
    pub static mut GiNaC_diracgamma_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_diracgamma() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgamma>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_diracgamma))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgamma>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgamma))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10diracgamma8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_diracgamma_do_print(
        this: *const GiNaC_diracgamma,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10diracgamma14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_diracgamma_do_print_latex(
        this: *const GiNaC_diracgamma,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10diracgammaC1Ev"]
    pub fn GiNaC_diracgamma_diracgamma(this: *mut GiNaC_diracgamma);
}
impl GiNaC_diracgamma {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracgamma_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracgamma_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracgamma_diracgamma(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10diracgamma17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_diracgamma_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC10diracgamma13contract_withEN9__gnu_cxx17__normal_iteratorIPNS_2exESt6vectorIS3_SaIS3_EEEES8_RS7_"]
    pub fn GiNaC_diracgamma_contract_with(
        this: *mut ::std::os::raw::c_void,
        self_: __gnu_cxx___normal_iterator<pointer>,
        other: __gnu_cxx___normal_iterator<pointer>,
        v: *mut GiNaC_exvector,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgamma_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21diracgamma_unarchiver8usecountE"]
    pub static mut GiNaC_diracgamma_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_diracgamma_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgamma_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_diracgamma_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgamma_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgamma_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21diracgamma_unarchiver6createEv"]
    pub fn GiNaC_diracgamma_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21diracgamma_unarchiverC1Ev"]
    pub fn GiNaC_diracgamma_unarchiver_diracgamma_unarchiver(
        this: *mut GiNaC_diracgamma_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21diracgamma_unarchiverD1Ev"]
    pub fn GiNaC_diracgamma_unarchiver_diracgamma_unarchiver_destructor(
        this: *mut GiNaC_diracgamma_unarchiver,
    );
}
impl GiNaC_diracgamma_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_diracgamma_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracgamma_unarchiver_diracgamma_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_diracgamma_unarchiver_diracgamma_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL30diracgamma_unarchiver_instanceE"]
    pub static mut GiNaC_diracgamma_unarchiver_instance:
        GiNaC_diracgamma_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgamma5 {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_diracgamma5_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgamma5_visitor {
    pub vtable_: *const GiNaC_diracgamma5_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_diracgamma5_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgamma5_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_diracgamma5_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgamma5_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgamma5_visitor))
    );
}
pub type GiNaC_diracgamma5_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11diracgamma58reg_infoE"]
    pub static mut GiNaC_diracgamma5_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_diracgamma5() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgamma5>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_diracgamma5))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgamma5>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgamma5))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11diracgamma58do_printERKNS_13print_contextEj"]
    pub fn GiNaC_diracgamma5_do_print(
        this: *const GiNaC_diracgamma5,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11diracgamma514do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_diracgamma5_do_print_latex(
        this: *const GiNaC_diracgamma5,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11diracgamma5C1Ev"]
    pub fn GiNaC_diracgamma5_diracgamma5(this: *mut GiNaC_diracgamma5);
}
impl GiNaC_diracgamma5 {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracgamma5_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracgamma5_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracgamma5_diracgamma5(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11diracgamma517compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_diracgamma5_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgamma5_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgamma5_unarchiver8usecountE"]
    pub static mut GiNaC_diracgamma5_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_diracgamma5_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgamma5_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_diracgamma5_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgamma5_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgamma5_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgamma5_unarchiver6createEv"]
    pub fn GiNaC_diracgamma5_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgamma5_unarchiverC1Ev"]
    pub fn GiNaC_diracgamma5_unarchiver_diracgamma5_unarchiver(
        this: *mut GiNaC_diracgamma5_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgamma5_unarchiverD1Ev"]
    pub fn GiNaC_diracgamma5_unarchiver_diracgamma5_unarchiver_destructor(
        this: *mut GiNaC_diracgamma5_unarchiver,
    );
}
impl GiNaC_diracgamma5_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_diracgamma5_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracgamma5_unarchiver_diracgamma5_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_diracgamma5_unarchiver_diracgamma5_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL31diracgamma5_unarchiver_instanceE"]
    pub static mut GiNaC_diracgamma5_unarchiver_instance:
        GiNaC_diracgamma5_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgammaL {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_diracgammaL_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgammaL_visitor {
    pub vtable_: *const GiNaC_diracgammaL_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_diracgammaL_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgammaL_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_diracgammaL_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgammaL_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgammaL_visitor))
    );
}
pub type GiNaC_diracgammaL_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11diracgammaL8reg_infoE"]
    pub static mut GiNaC_diracgammaL_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_diracgammaL() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgammaL>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_diracgammaL))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgammaL>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgammaL))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11diracgammaL8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_diracgammaL_do_print(
        this: *const GiNaC_diracgammaL,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11diracgammaL14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_diracgammaL_do_print_latex(
        this: *const GiNaC_diracgammaL,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11diracgammaLC1Ev"]
    pub fn GiNaC_diracgammaL_diracgammaL(this: *mut GiNaC_diracgammaL);
}
impl GiNaC_diracgammaL {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracgammaL_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracgammaL_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracgammaL_diracgammaL(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11diracgammaL17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_diracgammaL_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgammaL_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgammaL_unarchiver8usecountE"]
    pub static mut GiNaC_diracgammaL_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_diracgammaL_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgammaL_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_diracgammaL_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgammaL_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgammaL_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgammaL_unarchiver6createEv"]
    pub fn GiNaC_diracgammaL_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgammaL_unarchiverC1Ev"]
    pub fn GiNaC_diracgammaL_unarchiver_diracgammaL_unarchiver(
        this: *mut GiNaC_diracgammaL_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgammaL_unarchiverD1Ev"]
    pub fn GiNaC_diracgammaL_unarchiver_diracgammaL_unarchiver_destructor(
        this: *mut GiNaC_diracgammaL_unarchiver,
    );
}
impl GiNaC_diracgammaL_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_diracgammaL_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracgammaL_unarchiver_diracgammaL_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_diracgammaL_unarchiver_diracgammaL_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL31diracgammaL_unarchiver_instanceE"]
    pub static mut GiNaC_diracgammaL_unarchiver_instance:
        GiNaC_diracgammaL_unarchiver;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgammaR {
    pub _base: GiNaC_tensor,
}
#[repr(C)]
pub struct GiNaC_diracgammaR_visitor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgammaR_visitor {
    pub vtable_: *const GiNaC_diracgammaR_visitor__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_GiNaC_diracgammaR_visitor() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgammaR_visitor>(),
        8usize,
        concat!("Size of: ", stringify!(GiNaC_diracgammaR_visitor))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgammaR_visitor>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgammaR_visitor))
    );
}
pub type GiNaC_diracgammaR_inherited = GiNaC_tensor;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11diracgammaR8reg_infoE"]
    pub static mut GiNaC_diracgammaR_reg_info: GiNaC_registered_class_info;
}
#[test]
fn bindgen_test_layout_GiNaC_diracgammaR() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgammaR>(),
        24usize,
        concat!("Size of: ", stringify!(GiNaC_diracgammaR))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgammaR>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgammaR))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11diracgammaR8do_printERKNS_13print_contextEj"]
    pub fn GiNaC_diracgammaR_do_print(
        this: *const GiNaC_diracgammaR,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11diracgammaR14do_print_latexERKNS_11print_latexEj"]
    pub fn GiNaC_diracgammaR_do_print_latex(
        this: *const GiNaC_diracgammaR,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11diracgammaRC1Ev"]
    pub fn GiNaC_diracgammaR_diracgammaR(this: *mut GiNaC_diracgammaR);
}
impl GiNaC_diracgammaR {
    #[inline]
    pub unsafe fn do_print(
        &self,
        c: *const GiNaC_print_context,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracgammaR_do_print(self, c, level)
    }
    #[inline]
    pub unsafe fn do_print_latex(
        &self,
        c: *const GiNaC_print_latex,
        level: ::std::os::raw::c_uint,
    ) {
        GiNaC_diracgammaR_do_print_latex(self, c, level)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracgammaR_diracgammaR(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNK5GiNaC11diracgammaR17compare_same_typeERKNS_5basicE"]
    pub fn GiNaC_diracgammaR_compare_same_type(
        this: *mut ::std::os::raw::c_void,
        other: *const GiNaC_basic,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_diracgammaR_unarchiver {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgammaR_unarchiver8usecountE"]
    pub static mut GiNaC_diracgammaR_unarchiver_usecount: ::std::os::raw::c_int;
}
#[test]
fn bindgen_test_layout_GiNaC_diracgammaR_unarchiver() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_diracgammaR_unarchiver>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_diracgammaR_unarchiver))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_diracgammaR_unarchiver>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_diracgammaR_unarchiver))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgammaR_unarchiver6createEv"]
    pub fn GiNaC_diracgammaR_unarchiver_create() -> *mut GiNaC_basic;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgammaR_unarchiverC1Ev"]
    pub fn GiNaC_diracgammaR_unarchiver_diracgammaR_unarchiver(
        this: *mut GiNaC_diracgammaR_unarchiver,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC22diracgammaR_unarchiverD1Ev"]
    pub fn GiNaC_diracgammaR_unarchiver_diracgammaR_unarchiver_destructor(
        this: *mut GiNaC_diracgammaR_unarchiver,
    );
}
impl GiNaC_diracgammaR_unarchiver {
    #[inline]
    pub unsafe fn create() -> *mut GiNaC_basic {
        GiNaC_diracgammaR_unarchiver_create()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_diracgammaR_unarchiver_diracgammaR_unarchiver(
            __bindgen_tmp.as_mut_ptr(),
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_diracgammaR_unarchiver_diracgammaR_unarchiver_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaCL31diracgammaR_unarchiver_instanceE"]
    pub static mut GiNaC_diracgammaR_unarchiver_instance:
        GiNaC_diracgammaR_unarchiver;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9dirac_ONEEh"]
    pub fn GiNaC_dirac_ONE(rl: ::std::os::raw::c_uchar) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13clifford_unitERKNS_2exES2_h"]
    pub fn GiNaC_clifford_unit(
        mu: *const GiNaC_ex,
        metr: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11dirac_gammaERKNS_2exEh"]
    pub fn GiNaC_dirac_gamma(
        mu: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12dirac_gamma5Eh"]
    pub fn GiNaC_dirac_gamma5(rl: ::std::os::raw::c_uchar) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12dirac_gammaLEh"]
    pub fn GiNaC_dirac_gammaL(rl: ::std::os::raw::c_uchar) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC12dirac_gammaREh"]
    pub fn GiNaC_dirac_gammaR(rl: ::std::os::raw::c_uchar) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11dirac_slashERKNS_2exES2_h"]
    pub fn GiNaC_dirac_slash(
        e: *const GiNaC_ex,
        dim: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11dirac_traceERKNS_2exERKSt3setIhSt4lessIhESaIhEES2_"]
    pub fn GiNaC_dirac_trace(
        e: *const GiNaC_ex,
        rls: *const u8,
        trONE: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11dirac_traceERKNS_2exERKNS_9containerINSt7__cxx114listEEES2_"]
    pub fn GiNaC_dirac_trace1(
        e: *const GiNaC_ex,
        rll: *const GiNaC_lst,
        trONE: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC11dirac_traceERKNS_2exEhS2_"]
    pub fn GiNaC_dirac_trace2(
        e: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
        trONE: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21canonicalize_cliffordERKNS_2exE"]
    pub fn GiNaC_canonicalize_clifford(e: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC14clifford_primeERKNS_2exE"]
    pub fn GiNaC_clifford_prime(e: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC17clifford_star_barERKNS_2exEbj"]
    pub fn GiNaC_clifford_star_bar(
        e: *const GiNaC_ex,
        do_bar: bool,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16remove_dirac_ONEERKNS_2exEhj"]
    pub fn GiNaC_remove_dirac_ONE(
        e: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18clifford_max_labelERKNS_2exEb"]
    pub fn GiNaC_clifford_max_label(
        e: *const GiNaC_ex,
        ignore_ONE: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC13clifford_normERKNS_2exE"]
    pub fn GiNaC_clifford_norm(e: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC16clifford_inverseERKNS_2exE"]
    pub fn GiNaC_clifford_inverse(e: *const GiNaC_ex) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15lst_to_cliffordERKNS_2exES2_S2_h"]
    pub fn GiNaC_lst_to_clifford(
        v: *const GiNaC_ex,
        mu: *const GiNaC_ex,
        metr: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15lst_to_cliffordERKNS_2exES2_"]
    pub fn GiNaC_lst_to_clifford1(
        v: *const GiNaC_ex,
        e: *const GiNaC_ex,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC15clifford_to_lstB5cxx11ERKNS_2exES2_b"]
    pub fn GiNaC_clifford_to_lst(
        e: *const GiNaC_ex,
        c: *const GiNaC_ex,
        algebraic: bool,
    ) -> GiNaC_lst;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20clifford_moebius_mapERKNS_2exES2_S2_S2_S2_S2_h"]
    pub fn GiNaC_clifford_moebius_map(
        a: *const GiNaC_ex,
        b: *const GiNaC_ex,
        c: *const GiNaC_ex,
        d: *const GiNaC_ex,
        v: *const GiNaC_ex,
        G: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC20clifford_moebius_mapERKNS_2exES2_S2_h"]
    pub fn GiNaC_clifford_moebius_map1(
        M: *const GiNaC_ex,
        v: *const GiNaC_ex,
        G: *const GiNaC_ex,
        rl: ::std::os::raw::c_uchar,
    ) -> GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6factorERKNS_2exEj"]
    pub fn GiNaC_factor(
        poly: *const GiNaC_ex,
        options: ::std::os::raw::c_uint,
    ) -> GiNaC_ex;
}
pub type GiNaC_FUNCP_1P =
    ::std::option::Option<unsafe extern "C" fn(arg1: f64) -> f64>;
pub type GiNaC_FUNCP_2P =
    ::std::option::Option<unsafe extern "C" fn(arg1: f64, arg2: f64) -> f64>;
pub type GiNaC_FUNCP_CUBA = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const f64,
        arg3: *const ::std::os::raw::c_int,
        arg4: *mut f64,
    ),
>;
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10compile_exERKNS_2exERKNS_6symbolERPFddENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_compile_ex(
        expr: *const GiNaC_ex,
        sym: *const GiNaC_symbol,
        fp: *mut GiNaC_FUNCP_1P,
        filename: std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10compile_exERKNS_2exERKNS_6symbolES5_RPFdddENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_compile_ex1(
        expr: *const GiNaC_ex,
        sym1: *const GiNaC_symbol,
        sym2: *const GiNaC_symbol,
        fp: *mut GiNaC_FUNCP_2P,
        filename: std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC10compile_exERKNS_9containerINSt7__cxx114listEEES5_RPFvPKiPKdS7_PdENS1_12basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_compile_ex2(
        exprs: *const GiNaC_lst,
        syms: *const GiNaC_lst,
        fp: *mut GiNaC_FUNCP_CUBA,
        filename: std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7link_exENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERPFddE"]
    pub fn GiNaC_link_ex(filename: std_string, fp: *mut GiNaC_FUNCP_1P);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7link_exENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERPFdddE"]
    pub fn GiNaC_link_ex1(filename: std_string, fp: *mut GiNaC_FUNCP_2P);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC7link_exENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERPFvPKiPKdS7_PdE"]
    pub fn GiNaC_link_ex2(filename: std_string, fp: *mut GiNaC_FUNCP_CUBA);
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC9unlink_exENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn GiNaC_unlink_ex(filename: std_string);
}
pub type GiNaC_symtab = [u64; 6usize];
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC21find_or_insert_symbolERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERSt3mapIS5_NS_2exESt4lessIS5_ESaISt4pairIS6_S9_EEEb"]
    pub fn GiNaC_find_or_insert_symbol(
        name: *const std_string,
        syms: *mut GiNaC_symtab,
        strict: bool,
    ) -> GiNaC_ex;
}
pub type GiNaC_prototype = [u64; 5usize];
pub type GiNaC_reader_func = ::std::option::Option<
    unsafe extern "C" fn(args: *const GiNaC_exvector) -> GiNaC_ex,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_PrototypeLess {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_GiNaC_PrototypeLess() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_PrototypeLess>(),
        1usize,
        concat!("Size of: ", stringify!(GiNaC_PrototypeLess))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_PrototypeLess>(),
        1usize,
        concat!("Alignment of ", stringify!(GiNaC_PrototypeLess))
    );
}
pub type GiNaC_prototype_table = [u64; 6usize];
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18get_default_readerB5cxx11Ev"]
    pub fn GiNaC_get_default_reader() -> *const GiNaC_prototype_table;
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC18get_builtin_readerB5cxx11Ev"]
    pub fn GiNaC_get_builtin_reader() -> *const GiNaC_prototype_table;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GiNaC_lexer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_parse_error {
    pub _base: std_invalid_argument,
    pub line: std_size_t,
    pub column: std_size_t,
}
#[test]
fn bindgen_test_layout_GiNaC_parse_error() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_parse_error>(),
        32usize,
        concat!("Size of: ", stringify!(GiNaC_parse_error))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_parse_error>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_parse_error))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_parse_error>())).line as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_parse_error),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_parse_error>())).column as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_parse_error),
            "::",
            stringify!(column)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct GiNaC_parser {
    pub strict: bool,
    pub funcs: GiNaC_prototype_table,
    pub syms: GiNaC_symtab,
    pub scanner: *mut GiNaC_lexer,
    pub token: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GiNaC_parser() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_parser>(),
        120usize,
        concat!("Size of: ", stringify!(GiNaC_parser))
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_parser>(),
        8usize,
        concat!("Alignment of ", stringify!(GiNaC_parser))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_parser>())).strict as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_parser),
            "::",
            stringify!(strict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_parser>())).funcs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_parser),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_parser>())).syms as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_parser),
            "::",
            stringify!(syms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_parser>())).scanner as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_parser),
            "::",
            stringify!(scanner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GiNaC_parser>())).token as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GiNaC_parser),
            "::",
            stringify!(token)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6parserC1ERKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_2exESt4lessIS7_ESaISt4pairIKS7_S8_EEEbRKS1_ISB_IS7_mEPFS8_RKSt6vectorIS8_SaIS8_EEENS_13PrototypeLessESaISB_IKSI_SP_EEE"]
    pub fn GiNaC_parser_parser(
        this: *mut GiNaC_parser,
        syms_: *const GiNaC_symtab,
        strict_: bool,
        funcs_: *const GiNaC_prototype_table,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN5GiNaC6parserD1Ev"]
    pub fn GiNaC_parser_parser_destructor(this: *mut GiNaC_parser);
}
impl GiNaC_parser {
    #[inline]
    pub unsafe fn new(
        syms_: *const GiNaC_symtab,
        strict_: bool,
        funcs_: *const GiNaC_prototype_table,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        GiNaC_parser_parser(__bindgen_tmp.as_mut_ptr(), syms_, strict_, funcs_);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        GiNaC_parser_parser_destructor(self)
    }
}
pub type std_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string {
    pub _address: u8,
}
pub type std_basic_string__Char_alloc_type = u8;
pub type std_basic_string__Alloc_traits = u8;
pub type std_basic_string_traits_type = u8;
pub type std_basic_string_value_type = u8;
pub type std_basic_string_allocator_type = u8;
pub type std_basic_string_size_type = u8;
pub type std_basic_string_difference_type = u8;
pub type std_basic_string_reference = u8;
pub type std_basic_string_const_reference = u8;
pub type std_basic_string_pointer = u8;
pub type std_basic_string_const_pointer = u8;
pub type std_basic_string_iterator = u8;
pub type std_basic_string_const_iterator = u8;
pub type std_basic_string_const_reverse_iterator = u8;
pub type std_basic_string_reverse_iterator = u8;
pub type std_basic_string___const_iterator = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string__Alloc_hider {
    pub _address: u8,
}
pub const std_basic_string__S_local_capacity: std_basic_string__bindgen_ty_1 =
    0;
pub type std_basic_string__bindgen_ty_1 = i32;
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union std_basic_string__bindgen_ty_2 {
    pub _bindgen_opaque_blob: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct std_type_info {
    pub _bindgen_opaque_blob: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_std_type_info() {
    assert_eq!(
        ::std::mem::size_of::<std_type_info>(),
        16usize,
        concat!("Size of: ", stringify!(std_type_info))
    );
    assert_eq!(
        ::std::mem::align_of::<std_type_info>(),
        8usize,
        concat!("Alignment of ", stringify!(std_type_info))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt9type_infoD1Ev"]
    pub fn std_type_info_type_info_destructor(this: *mut std_type_info);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info14__is_pointer_pEv"]
    pub fn std_type_info___is_pointer_p(
        this: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info15__is_function_pEv"]
    pub fn std_type_info___is_function_p(
        this: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info10__do_catchEPKS_PPvj"]
    pub fn std_type_info___do_catch(
        this: *mut ::std::os::raw::c_void,
        __thr_type: *const std_type_info,
        __thr_obj: *mut *mut ::std::os::raw::c_void,
        __outer: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv"]
    pub fn std_type_info___do_upcast(
        this: *mut ::std::os::raw::c_void,
        __target: *const __cxxabiv1___class_type_info,
        __obj_ptr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair {
    pub _address: u8,
}
pub type std_pair_first_type = u8;
pub type std_pair_second_type = u8;
pub type std_pair__PCCP = u8;
pub type std_pair__PCCFP = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_initializer_list {
    pub _address: u8,
}
pub type std_initializer_list_value_type = u8;
pub type std_initializer_list_reference = u8;
pub type std_initializer_list_const_reference = u8;
pub type std_initializer_list_size_type = u64;
pub type std_initializer_list_iterator = u8;
pub type std_initializer_list_const_iterator = u8;
#[repr(C)]
#[repr(align(1))]
#[derive(Debug, Copy, Clone)]
pub struct std_input_iterator_tag {
    pub _bindgen_opaque_blob: u8,
}
#[test]
fn bindgen_test_layout_std_input_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_input_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_input_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_input_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_input_iterator_tag))
    );
}
#[repr(C)]
#[repr(align(1))]
#[derive(Debug, Copy, Clone)]
pub struct std_forward_iterator_tag {
    pub _bindgen_opaque_blob: u8,
}
#[test]
fn bindgen_test_layout_std_forward_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_forward_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_forward_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_forward_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_forward_iterator_tag))
    );
}
#[repr(C)]
#[repr(align(1))]
#[derive(Debug, Copy, Clone)]
pub struct std_random_access_iterator_tag {
    pub _bindgen_opaque_blob: u8,
}
#[test]
fn bindgen_test_layout_std_random_access_iterator_tag() {
    assert_eq!(
        ::std::mem::size_of::<std_random_access_iterator_tag>(),
        1usize,
        concat!("Size of: ", stringify!(std_random_access_iterator_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<std_random_access_iterator_tag>(),
        1usize,
        concat!("Alignment of ", stringify!(std_random_access_iterator_tag))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_iterator_category = u8;
pub type std_iterator_value_type = u8;
pub type std_iterator_difference_type = u8;
pub type std_iterator_pointer = u8;
pub type std_iterator_reference = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
pub type std_string = [u64; 4usize];
pub type std_ostream = [u64; 34usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_value_type = u8;
pub type std_allocator_size_type = u64;
pub type std_allocator_difference_type = u64;
pub type std_allocator_pointer = u8;
pub type std_allocator_const_pointer = u8;
pub type std_allocator_reference = u8;
pub type std_allocator_const_reference = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = u8;
pub type std_allocator_propagate_on_container_move_assignment = u8;
pub type std_allocator_is_always_equal = u8;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct std_domain_error {
    pub _bindgen_opaque_blob: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_std_domain_error() {
    assert_eq!(
        ::std::mem::size_of::<std_domain_error>(),
        16usize,
        concat!("Size of: ", stringify!(std_domain_error))
    );
    assert_eq!(
        ::std::mem::align_of::<std_domain_error>(),
        8usize,
        concat!("Alignment of ", stringify!(std_domain_error))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_domain_error_domain_error(
        this: *mut std_domain_error,
        __arg: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorC1EPKc"]
    pub fn std_domain_error_domain_error1(
        this: *mut std_domain_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_domain_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_domain_error_domain_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_domain_error_domain_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorD1Ev"]
    pub fn std_domain_error_domain_error_destructor(
        this: *mut std_domain_error,
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct std_invalid_argument {
    pub _bindgen_opaque_blob: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_std_invalid_argument() {
    assert_eq!(
        ::std::mem::size_of::<std_invalid_argument>(),
        16usize,
        concat!("Size of: ", stringify!(std_invalid_argument))
    );
    assert_eq!(
        ::std::mem::align_of::<std_invalid_argument>(),
        8usize,
        concat!("Alignment of ", stringify!(std_invalid_argument))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_invalid_argument_invalid_argument(
        this: *mut std_invalid_argument,
        __arg: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentC1EPKc"]
    pub fn std_invalid_argument_invalid_argument1(
        this: *mut std_invalid_argument,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_invalid_argument {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_invalid_argument_invalid_argument(
            __bindgen_tmp.as_mut_ptr(),
            __arg,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_invalid_argument_invalid_argument1(
            __bindgen_tmp.as_mut_ptr(),
            arg1,
        );
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentD1Ev"]
    pub fn std_invalid_argument_invalid_argument_destructor(
        this: *mut std_invalid_argument,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unique_ptr {
    pub _address: u8,
}
pub type std_unique_ptr__DeleterConstraint = u8;
pub type std_unique_ptr_pointer = u8;
pub type std_unique_ptr_element_type = u8;
pub type std_unique_ptr_deleter_type = u8;
pub type std_unique_ptr___safe_conversion_up = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_map {
    pub _address: u8,
}
pub type std_map_key_type = u8;
pub type std_map_mapped_type = u8;
pub type std_map_value_type = u8;
pub type std_map_key_compare = u8;
pub type std_map_allocator_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_map_value_compare {
    pub _address: u8,
}
pub type std_map__Pair_alloc_type = u8;
pub type std_map__Rep_type = u8;
pub type std_map__Alloc_traits = u8;
pub type std_map_pointer = u8;
pub type std_map_const_pointer = u8;
pub type std_map_reference = u8;
pub type std_map_const_reference = u8;
pub type std_map_iterator = u8;
pub type std_map_const_iterator = u8;
pub type std_map_size_type = u8;
pub type std_map_difference_type = u8;
pub type std_map_reverse_iterator = u8;
pub type std_map_const_reverse_iterator = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_vector {
    pub _address: u8,
}
pub type std_vector__Base = u8;
pub type std_vector__Tp_alloc_type = u8;
pub type std_vector__Alloc_traits = u8;
pub type std_vector_value_type = u8;
pub type std_vector_pointer = u8;
pub type std_vector_const_pointer = u8;
pub type std_vector_reference = u8;
pub type std_vector_const_reference = u8;
pub type std_vector_iterator = u8;
pub type std_vector_const_iterator = u8;
pub type std_vector_const_reverse_iterator = u8;
pub type std_vector_reverse_iterator = u8;
pub type std_vector_size_type = u64;
pub type std_vector_difference_type = u64;
pub type std_vector_allocator_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_vector__Temporary_value {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_set {
    pub _address: u8,
}
pub type std_set_key_type = u8;
pub type std_set_value_type = u8;
pub type std_set_key_compare = u8;
pub type std_set_value_compare = u8;
pub type std_set_allocator_type = u8;
pub type std_set__Key_alloc_type = u8;
pub type std_set__Rep_type = u8;
pub type std_set__Alloc_traits = u8;
pub type std_set_pointer = u8;
pub type std_set_const_pointer = u8;
pub type std_set_reference = u8;
pub type std_set_const_reference = u8;
pub type std_set_iterator = u8;
pub type std_set_const_iterator = u8;
pub type std_set_reverse_iterator = u8;
pub type std_set_const_reverse_iterator = u8;
pub type std_set_size_type = u8;
pub type std_set_difference_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multiset {
    pub _address: u8,
}
pub type std_multiset_key_type = u8;
pub type std_multiset_value_type = u8;
pub type std_multiset_key_compare = u8;
pub type std_multiset_value_compare = u8;
pub type std_multiset_allocator_type = u8;
pub type std_multiset__Key_alloc_type = u8;
pub type std_multiset__Rep_type = u8;
pub type std_multiset__Alloc_traits = u8;
pub type std_multiset_pointer = u8;
pub type std_multiset_const_pointer = u8;
pub type std_multiset_reference = u8;
pub type std_multiset_const_reference = u8;
pub type std_multiset_iterator = u8;
pub type std_multiset_const_iterator = u8;
pub type std_multiset_reverse_iterator = u8;
pub type std_multiset_const_reverse_iterator = u8;
pub type std_multiset_size_type = u8;
pub type std_multiset_difference_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_stack {
    pub _address: u8,
}
pub type std_stack__Uses = u8;
pub type std_stack_value_type = u8;
pub type std_stack_reference = u8;
pub type std_stack_const_reference = u8;
pub type std_stack_size_type = u8;
pub type std_stack_container_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unordered_map {
    pub _address: u8,
}
pub type std_unordered_map__Hashtable = u8;
pub type std_unordered_map_key_type = u8;
pub type std_unordered_map_value_type = u8;
pub type std_unordered_map_mapped_type = u8;
pub type std_unordered_map_hasher = u8;
pub type std_unordered_map_key_equal = u8;
pub type std_unordered_map_allocator_type = u8;
pub type std_unordered_map_pointer = u8;
pub type std_unordered_map_const_pointer = u8;
pub type std_unordered_map_reference = u8;
pub type std_unordered_map_const_reference = u8;
pub type std_unordered_map_iterator = u8;
pub type std_unordered_map_const_iterator = u8;
pub type std_unordered_map_local_iterator = u8;
pub type std_unordered_map_const_local_iterator = u8;
pub type std_unordered_map_size_type = u8;
pub type std_unordered_map_difference_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___normal_iterator<_Iterator> {
    pub _M_current: _Iterator,
    pub _phantom_0:
        ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
}
pub type __gnu_cxx___normal_iterator___traits_type = u8;
pub type __gnu_cxx___normal_iterator_iterator_type<_Iterator> = _Iterator;
pub type __gnu_cxx___normal_iterator_iterator_category =
    __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_value_type =
    __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_difference_type =
    __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_reference =
    __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_pointer =
    __gnu_cxx___normal_iterator___traits_type;
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cxxabiv1___class_type_info {
    _unused: [u8; 0],
}
pub type cln_cl_uint = uintP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cln_cl_heap {
    pub refcount: ::std::os::raw::c_int,
    pub type_: *const cln_cl_class,
}
#[test]
fn bindgen_test_layout_cln_cl_heap() {
    assert_eq!(
        ::std::mem::size_of::<cln_cl_heap>(),
        16usize,
        concat!("Size of: ", stringify!(cln_cl_heap))
    );
    assert_eq!(
        ::std::mem::align_of::<cln_cl_heap>(),
        8usize,
        concat!("Alignment of ", stringify!(cln_cl_heap))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cln_cl_heap>())).refcount as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cln_cl_heap),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cln_cl_heap>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cln_cl_heap),
            "::",
            stringify!(type_)
        )
    );
}
pub type cln_cl_heap_destructor_function =
    ::std::option::Option<unsafe extern "C" fn(pointer: *mut cln_cl_heap)>;
pub type cln_cl_heap_dprint_function =
    ::std::option::Option<unsafe extern "C" fn(pointer: *mut cln_cl_heap)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cln_cl_class {
    pub destruct: cln_cl_heap_destructor_function,
    pub flags: ::std::os::raw::c_int,
    pub dprint: cln_cl_heap_dprint_function,
}
#[test]
fn bindgen_test_layout_cln_cl_class() {
    assert_eq!(
        ::std::mem::size_of::<cln_cl_class>(),
        24usize,
        concat!("Size of: ", stringify!(cln_cl_class))
    );
    assert_eq!(
        ::std::mem::align_of::<cln_cl_class>(),
        8usize,
        concat!("Alignment of ", stringify!(cln_cl_class))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cln_cl_class>())).destruct as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cln_cl_class),
            "::",
            stringify!(destruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cln_cl_class>())).flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cln_cl_class),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cln_cl_class>())).dprint as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cln_cl_class),
            "::",
            stringify!(dprint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cln_cl_anything {
    _unused: [u8; 0],
}
pub type cln_cl_private_thing = *mut cln_cl_anything;
#[repr(C)]
pub struct cln_cl_gcobject {
    pub __bindgen_anon_1: cln_cl_gcobject__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cln_cl_gcobject__bindgen_ty_1 {
    pub pointer: *mut ::std::os::raw::c_void,
    pub heappointer: *mut cln_cl_heap,
    pub word: cln_cl_uint,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cln_cl_gcobject__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cln_cl_gcobject__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cln_cl_gcobject__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cln_cl_gcobject__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cln_cl_gcobject__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cln_cl_gcobject__bindgen_ty_1>())).pointer
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cln_cl_gcobject__bindgen_ty_1),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cln_cl_gcobject__bindgen_ty_1>()))
                .heappointer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cln_cl_gcobject__bindgen_ty_1),
            "::",
            stringify!(heappointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cln_cl_gcobject__bindgen_ty_1>())).word
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cln_cl_gcobject__bindgen_ty_1),
            "::",
            stringify!(word)
        )
    );
}
#[test]
fn bindgen_test_layout_cln_cl_gcobject() {
    assert_eq!(
        ::std::mem::size_of::<cln_cl_gcobject>(),
        8usize,
        concat!("Size of: ", stringify!(cln_cl_gcobject))
    );
    assert_eq!(
        ::std::mem::align_of::<cln_cl_gcobject>(),
        8usize,
        concat!("Alignment of ", stringify!(cln_cl_gcobject))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNK3cln11cl_gcobject20_as_cl_private_thingEv"]
    pub fn cln_cl_gcobject__as_cl_private_thing(
        this: *const cln_cl_gcobject,
    ) -> cln_cl_private_thing;
}
extern "C" {
    #[link_name = "\u{1}_ZNK3cln11cl_gcobject11debug_printEv"]
    pub fn cln_cl_gcobject_debug_print(this: *const cln_cl_gcobject);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln11cl_gcobjectC1Ev"]
    pub fn cln_cl_gcobject_cl_gcobject(this: *mut cln_cl_gcobject);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln11cl_gcobjectC1ERKS0_"]
    pub fn cln_cl_gcobject_cl_gcobject1(
        this: *mut cln_cl_gcobject,
        arg1: *const cln_cl_gcobject,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln11cl_gcobjectD1Ev"]
    pub fn cln_cl_gcobject_cl_gcobject_destructor(this: *mut cln_cl_gcobject);
}
impl cln_cl_gcobject {
    #[inline]
    pub unsafe fn _as_cl_private_thing(&self) -> cln_cl_private_thing {
        cln_cl_gcobject__as_cl_private_thing(self)
    }
    #[inline]
    pub unsafe fn debug_print(&self) {
        cln_cl_gcobject_debug_print(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_gcobject_cl_gcobject(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const cln_cl_gcobject) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_gcobject_cl_gcobject1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        cln_cl_gcobject_cl_gcobject_destructor(self)
    }
}
#[repr(C)]
pub struct cln_cl_number {
    pub _base: cln_cl_gcobject,
}
#[test]
fn bindgen_test_layout_cln_cl_number() {
    assert_eq!(
        ::std::mem::size_of::<cln_cl_number>(),
        8usize,
        concat!("Size of: ", stringify!(cln_cl_number))
    );
    assert_eq!(
        ::std::mem::align_of::<cln_cl_number>(),
        8usize,
        concat!("Alignment of ", stringify!(cln_cl_number))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1Ev"]
    pub fn cln_cl_number_cl_number(this: *mut cln_cl_number);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1ERKS0_"]
    pub fn cln_cl_number_cl_number1(
        this: *mut cln_cl_number,
        x: *const cln_cl_number,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1Ei"]
    pub fn cln_cl_number_cl_number2(
        this: *mut cln_cl_number,
        arg1: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1Ej"]
    pub fn cln_cl_number_cl_number3(
        this: *mut cln_cl_number,
        arg1: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1El"]
    pub fn cln_cl_number_cl_number4(
        this: *mut cln_cl_number,
        arg1: ::std::os::raw::c_long,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1Em"]
    pub fn cln_cl_number_cl_number5(
        this: *mut cln_cl_number,
        arg1: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1Ex"]
    pub fn cln_cl_number_cl_number6(
        this: *mut cln_cl_number,
        arg1: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1Ey"]
    pub fn cln_cl_number_cl_number7(
        this: *mut cln_cl_number,
        arg1: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1Ef"]
    pub fn cln_cl_number_cl_number8(this: *mut cln_cl_number, arg1: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1Ed"]
    pub fn cln_cl_number_cl_number9(this: *mut cln_cl_number, arg1: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln9cl_numberC1EPNS_11cl_anythingE"]
    pub fn cln_cl_number_cl_number10(
        this: *mut cln_cl_number,
        arg1: cln_cl_private_thing,
    );
}
impl cln_cl_number {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(x: *const cln_cl_number) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number1(__bindgen_tmp.as_mut_ptr(), x);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(arg1: ::std::os::raw::c_long) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number4(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(arg1: ::std::os::raw::c_ulong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number5(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(arg1: ::std::os::raw::c_longlong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number6(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(arg1: ::std::os::raw::c_ulonglong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number7(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new8(arg1: f32) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number8(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new9(arg1: f64) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number9(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new10(arg1: cln_cl_private_thing) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_number_cl_number10(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct cln_cl_N {
    pub _base: cln_cl_number,
}
#[test]
fn bindgen_test_layout_cln_cl_N() {
    assert_eq!(
        ::std::mem::size_of::<cln_cl_N>(),
        8usize,
        concat!("Size of: ", stringify!(cln_cl_N))
    );
    assert_eq!(
        ::std::mem::align_of::<cln_cl_N>(),
        8usize,
        concat!("Alignment of ", stringify!(cln_cl_N))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1Ev"]
    pub fn cln_cl_N_cl_N(this: *mut cln_cl_N);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1ERKS0_"]
    pub fn cln_cl_N_cl_N1(this: *mut cln_cl_N, arg1: *const cln_cl_N);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1Ei"]
    pub fn cln_cl_N_cl_N2(this: *mut cln_cl_N, arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1Ej"]
    pub fn cln_cl_N_cl_N3(this: *mut cln_cl_N, arg1: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1El"]
    pub fn cln_cl_N_cl_N4(this: *mut cln_cl_N, arg1: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1Em"]
    pub fn cln_cl_N_cl_N5(this: *mut cln_cl_N, arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1Ex"]
    pub fn cln_cl_N_cl_N6(
        this: *mut cln_cl_N,
        arg1: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1Ey"]
    pub fn cln_cl_N_cl_N7(
        this: *mut cln_cl_N,
        arg1: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1Ef"]
    pub fn cln_cl_N_cl_N8(this: *mut cln_cl_N, arg1: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1Ed"]
    pub fn cln_cl_N_cl_N9(this: *mut cln_cl_N, arg1: f64);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1EPKc"]
    pub fn cln_cl_N_cl_N10(
        this: *mut cln_cl_N,
        arg1: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1EPNS_11cl_anythingE"]
    pub fn cln_cl_N_cl_N11(this: *mut cln_cl_N, arg1: cln_cl_private_thing);
}
extern "C" {
    #[link_name = "\u{1}_ZN3cln4cl_NC1EPNS_15cl_heap_complexE"]
    pub fn cln_cl_N_cl_N12(this: *mut cln_cl_N, arg1: *mut cl_heap_complex);
}
impl cln_cl_N {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const cln_cl_N) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: ::std::os::raw::c_uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(arg1: ::std::os::raw::c_long) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N4(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(arg1: ::std::os::raw::c_ulong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N5(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(arg1: ::std::os::raw::c_longlong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N6(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(arg1: ::std::os::raw::c_ulonglong) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N7(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new8(arg1: f32) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N8(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new9(arg1: f64) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N9(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new10(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N10(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new11(arg1: cln_cl_private_thing) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N11(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new12(arg1: *mut cl_heap_complex) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        cln_cl_N_cl_N12(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
pub type uintP = usize;
extern "C" {
    #[link_name = "\u{1}_Z21wrap_symbol_constructPKc"]
    pub fn wrap_symbol_construct(
        cptr: *const ::std::os::raw::c_char,
    ) -> *mut GiNaC_symbol;
}
extern "C" {
    #[link_name = "\u{1}_Z20wrap_symbol_destructPN5GiNaC6symbolE"]
    pub fn wrap_symbol_destruct(ptr: *mut GiNaC_symbol);
}
extern "C" {
    #[link_name = "\u{1}_Z17wrap_ex_constructPKc"]
    pub fn wrap_ex_construct(
        cptr: *const ::std::os::raw::c_char,
    ) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_Z22wrap_ex_construct_copyPKN5GiNaC2exE"]
    pub fn wrap_ex_construct_copy(cptr: *const GiNaC_ex) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_Z23wrap_ex_construct_floatd"]
    pub fn wrap_ex_construct_float(f: f64) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_Z25wrap_ex_construct_integeri"]
    pub fn wrap_ex_construct_integer(i: ::std::os::raw::c_int)
        -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_Z23wrap_ex_construct_powerPKN5GiNaC2exES2_"]
    pub fn wrap_ex_construct_power(
        base: *const GiNaC_ex,
        expon: *const GiNaC_ex,
    ) -> *mut GiNaC_ex;
}
extern "C" {
    #[link_name = "\u{1}_Z16wrap_ex_destructPN5GiNaC2exE"]
    pub fn wrap_ex_destruct(ptr: *mut GiNaC_ex);
}
extern "C" {
    #[link_name = "\u{1}_Z15wrap_add_assignPN5GiNaC2exEPKS0_"]
    pub fn wrap_add_assign(left: *mut GiNaC_ex, right: *const GiNaC_ex);
}
extern "C" {
    #[link_name = "\u{1}_Z15wrap_mul_assignPN5GiNaC2exEPKS0_"]
    pub fn wrap_mul_assign(left: *mut GiNaC_ex, right: *const GiNaC_ex);
}
extern "C" {
    #[link_name = "\u{1}_Z10wrap_equalPKN5GiNaC2exES2_"]
    pub fn wrap_equal(left: *const GiNaC_ex, right: *const GiNaC_ex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_Z16wrap_debugsymbolPN5GiNaC6symbolE"]
    pub fn wrap_debugsymbol(ptr: *mut GiNaC_symbol);
}
extern "C" {
    #[link_name = "\u{1}_Z13wrap_testfuncv"]
    pub fn wrap_testfunc();
}
#[test]
fn __bindgen_test_layout_GiNaC_class_info_open0_GiNaC_print_context_options_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_class_info<GiNaC_print_context_options>>(),
        40usize,
        concat!(
            "Size of template specialization: ",
            stringify!(GiNaC_class_info<GiNaC_print_context_options>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_class_info<GiNaC_print_context_options>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(GiNaC_class_info<GiNaC_print_context_options>)
        )
    );
}
#[test]
fn __bindgen_test_layout_GiNaC_container_open0_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<[u64; 6usize]>(),
        48usize,
        concat!(
            "Size of template specialization: ",
            stringify!([u64; 6usize])
        )
    );
    assert_eq!(
        ::std::mem::align_of::<[u64; 6usize]>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!([u64; 6usize])
        )
    );
}
#[test]
fn __bindgen_test_layout_GiNaC_class_info_open0_GiNaC_registered_class_options_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_class_info<GiNaC_registered_class_options>>(
        ),
        64usize,
        concat!(
            "Size of template specialization: ",
            stringify!(GiNaC_class_info<GiNaC_registered_class_options>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_class_info<GiNaC_registered_class_options>>(
        ),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(GiNaC_class_info<GiNaC_registered_class_options>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
pub type pointer = *mut GiNaC_ex;
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout_GiNaC_ptr_open0_GiNaC_basic_close0_instantiation() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ptr<GiNaC_basic>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(GiNaC_ptr<GiNaC_basic>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ptr<GiNaC_basic>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(GiNaC_ptr<GiNaC_basic>)
        )
    );
}
#[test]
fn __bindgen_test_layout_GiNaC_ptr_open0_GiNaC_basic_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ptr<GiNaC_basic>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(GiNaC_ptr<GiNaC_basic>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ptr<GiNaC_basic>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(GiNaC_ptr<GiNaC_basic>)
        )
    );
}
#[test]
fn __bindgen_test_layout_GiNaC_ptr_open0_GiNaC_basic_close0_instantiation_2() {
    assert_eq!(
        ::std::mem::size_of::<GiNaC_ptr<GiNaC_basic>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(GiNaC_ptr<GiNaC_basic>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<GiNaC_ptr<GiNaC_basic>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(GiNaC_ptr<GiNaC_basic>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_const_pointer_std_vector_open1_GiNaC_archive_node_property_std_allocator_open2_GiNaC_archive_node_property_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
}
pub type const_pointer = *const GiNaC_archive_node_property;
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_heap_complex {
    pub _address: u8,
}
#[test]
fn __bindgen_test_layout_GiNaC_container_open0_close0_instantiation_1() {
    assert_eq!(
        ::std::mem::size_of::<[u64; 6usize]>(),
        48usize,
        concat!(
            "Size of template specialization: ",
            stringify!([u64; 6usize])
        )
    );
    assert_eq!(
        ::std::mem::align_of::<[u64; 6usize]>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!([u64; 6usize])
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_const_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_const_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_1(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_const_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_2(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_const_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_3(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_const_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_4(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_const_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_5(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_const_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_6(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_const_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_7(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<const_pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<const_pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_5(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_6(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_7(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_8(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_9(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_10(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_11(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_12(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_13(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_14(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_15(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_16(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_17(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_18(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_19(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_20(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_21(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_22(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_23(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
#[test]
fn __bindgen_test_layout___gnu_cxx___normal_iterator_open0_pointer_std_vector_open1_GiNaC_ex_std_allocator_open2_GiNaC_ex_close2_close1_close0_instantiation_24(
) {
    assert_eq!(
        ::std::mem::size_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Size of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__gnu_cxx___normal_iterator<pointer>>(),
        8usize,
        concat!(
            "Alignment of template specialization: ",
            stringify!(__gnu_cxx___normal_iterator<pointer>)
        )
    );
}
